# Generated from MysqlQuery.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3g")
        buf.write("\u0676\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\3\2\3\2\3\3\3\3\3\3\5\3\u0102")
        buf.write("\n\3\3\3\7\3\u0105\n\3\f\3\16\3\u0108\13\3\3\3\3\3\3\3")
        buf.write("\3\3\5\3\u010e\n\3\3\3\7\3\u0111\n\3\f\3\16\3\u0114\13")
        buf.write("\3\7\3\u0116\n\3\f\3\16\3\u0119\13\3\3\3\3\3\7\3\u011d")
        buf.write("\n\3\f\3\16\3\u0120\13\3\3\4\3\4\3\5\3\5\3\6\3\6\3\6\3")
        buf.write("\6\5\6\u012a\n\6\3\7\3\7\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3")
        buf.write("\n\3\n\3\n\3\n\5\n\u0139\n\n\3\n\3\n\3\n\5\n\u013e\n\n")
        buf.write("\3\n\3\n\3\13\3\13\3\13\3\13\5\13\u0146\n\13\3\13\3\13")
        buf.write("\3\13\5\13\u014b\n\13\3\13\3\13\3\13\3\13\3\13\3\13\3")
        buf.write("\f\3\f\3\f\3\f\3\f\3\f\7\f\u0159\n\f\f\f\16\f\u015c\13")
        buf.write("\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\7\r\u0165\n\r\f\r\16\r")
        buf.write("\u0168\13\r\3\r\3\r\3\16\3\16\3\16\3\16\3\16\3\16\7\16")
        buf.write("\u0172\n\16\f\16\16\16\u0175\13\16\3\16\3\16\3\17\3\17")
        buf.write("\3\17\3\17\5\17\u017d\n\17\3\17\3\17\5\17\u0181\n\17\3")
        buf.write("\17\3\17\3\20\3\20\3\20\3\20\3\20\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\6\22\u019b\n\22\r\22\16\22\u019c\3\22\3\22")
        buf.write("\5\22\u01a1\n\22\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u01a9")
        buf.write("\n\23\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u01b1\n\23\3")
        buf.write("\23\5\23\u01b4\n\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\23\3\23\7\23\u01ce\n\23\f\23\16")
        buf.write("\23\u01d1\13\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\23\7\23\u01dd\n\23\f\23\16\23\u01e0\13\23\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\7\23\u01ec")
        buf.write("\n\23\f\23\16\23\u01ef\13\23\3\23\3\23\5\23\u01f3\n\23")
        buf.write("\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\3\24\3\24\5\24\u0203\n\24\3\25\3\25\3\25\3\25\3")
        buf.write("\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\6\25\u0211\n\25")
        buf.write("\r\25\16\25\u0212\3\25\3\25\5\25\u0217\n\25\3\26\3\26")
        buf.write("\3\26\3\26\5\26\u021d\n\26\3\27\3\27\3\27\3\27\3\27\3")
        buf.write("\27\3\27\3\27\3\27\3\27\3\27\3\27\6\27\u022b\n\27\r\27")
        buf.write("\16\27\u022c\3\27\3\27\5\27\u0231\n\27\3\30\3\30\3\31")
        buf.write("\3\31\3\32\3\32\3\32\3\32\3\32\3\32\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\33\5\33\u0243\n\33\3\34\3\34\3\34\3\34\3\34\7")
        buf.write("\34\u024a\n\34\f\34\16\34\u024d\13\34\3\34\3\34\5\34\u0251")
        buf.write("\n\34\3\35\3\35\3\35\3\35\3\35\7\35\u0258\n\35\f\35\16")
        buf.write("\35\u025b\13\35\3\35\3\35\5\35\u025f\n\35\3\36\3\36\3")
        buf.write("\36\3\36\7\36\u0265\n\36\f\36\16\36\u0268\13\36\3\36\3")
        buf.write("\36\3\37\3\37\3\37\3\37\7\37\u0270\n\37\f\37\16\37\u0273")
        buf.write("\13\37\3\37\3\37\3 \3 \3 \3 \7 \u027b\n \f \16 \u027e")
        buf.write("\13 \3 \3 \3!\3!\3!\3\"\3\"\3\"\3#\3#\3#\3#\3#\3#\3#\3")
        buf.write("#\3#\3#\3$\3$\3$\3$\3$\3$\3$\5$\u0299\n$\3%\3%\3%\3%\3")
        buf.write("%\3%\6%\u02a1\n%\r%\16%\u02a2\3%\3%\5%\u02a7\n%\3&\3&")
        buf.write("\3&\3&\3&\3&\6&\u02af\n&\r&\16&\u02b0\3&\3&\5&\u02b5\n")
        buf.write("&\3\'\3\'\3\'\3\'\3\'\5\'\u02bc\n\'\7\'\u02be\n\'\f\'")
        buf.write("\16\'\u02c1\13\'\3\'\3\'\3(\3(\3(\3(\7(\u02c9\n(\f(\16")
        buf.write("(\u02cc\13(\5(\u02ce\n(\3(\3(\3(\3(\7(\u02d4\n(\f(\16")
        buf.write("(\u02d7\13(\3(\3(\3)\3)\3)\3)\3)\7)\u02e0\n)\f)\16)\u02e3")
        buf.write("\13)\3)\3)\3*\3*\3*\3*\3*\7*\u02ec\n*\f*\16*\u02ef\13")
        buf.write("*\3*\3*\3+\3+\3+\3+\3+\7+\u02f8\n+\f+\16+\u02fb\13+\3")
        buf.write("+\3+\3,\3,\3,\3,\3,\7,\u0304\n,\f,\16,\u0307\13,\3,\3")
        buf.write(",\3-\3-\3-\3-\3-\7-\u0310\n-\f-\16-\u0313\13-\3-\3-\3")
        buf.write(".\3.\3.\3.\3.\7.\u031c\n.\f.\16.\u031f\13.\3.\3.\3/\3")
        buf.write("/\3/\3/\3/\7/\u0328\n/\f/\16/\u032b\13/\3/\3/\3\60\3\60")
        buf.write("\3\60\3\60\3\60\7\60\u0334\n\60\f\60\16\60\u0337\13\60")
        buf.write("\3\60\3\60\3\61\3\61\3\61\3\61\3\61\7\61\u0340\n\61\f")
        buf.write("\61\16\61\u0343\13\61\3\61\3\61\3\62\3\62\3\62\3\62\3")
        buf.write("\62\3\62\3\62\3\62\3\62\3\62\5\62\u0351\n\62\3\63\3\63")
        buf.write("\3\64\3\64\3\64\3\64\7\64\u0359\n\64\f\64\16\64\u035c")
        buf.write("\13\64\5\64\u035e\n\64\3\64\3\64\3\64\3\64\7\64\u0364")
        buf.write("\n\64\f\64\16\64\u0367\13\64\3\64\3\64\3\65\3\65\3\65")
        buf.write("\3\65\3\65\3\65\3\65\3\65\3\65\5\65\u0374\n\65\3\66\3")
        buf.write("\66\3\66\3\66\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67")
        buf.write("\3\67\5\67\u0383\n\67\38\38\38\38\38\38\38\38\38\38\3")
        buf.write("8\38\38\58\u0392\n8\39\39\3:\3:\3;\3;\3<\3<\3=\3=\5=\u039e")
        buf.write("\n=\3=\3=\3=\5=\u03a3\n=\3=\3=\3=\5=\u03a8\n=\3=\3=\5")
        buf.write("=\u03ac\n=\3=\3=\3=\3=\5=\u03b2\n=\3=\3=\3=\3=\3=\5=\u03b9")
        buf.write("\n=\5=\u03bb\n=\3>\3>\3>\3>\3>\3>\5>\u03c3\n>\3?\3?\3")
        buf.write("?\3?\3?\3?\3?\7?\u03cc\n?\f?\16?\u03cf\13?\5?\u03d1\n")
        buf.write("?\3?\5?\u03d4\n?\3?\3?\3?\7?\u03d9\n?\f?\16?\u03dc\13")
        buf.write("?\5?\u03de\n?\3@\3@\3@\3@\3@\7@\u03e5\n@\f@\16@\u03e8")
        buf.write("\13@\3A\3A\3A\3A\3A\3A\3B\3B\3B\3B\7B\u03f4\nB\fB\16B")
        buf.write("\u03f7\13B\3B\3B\3B\3B\3B\3B\3B\3B\7B\u0401\nB\fB\16B")
        buf.write("\u0404\13B\5B\u0406\nB\3C\3C\3C\3C\7C\u040c\nC\fC\16C")
        buf.write("\u040f\13C\3C\3C\3C\3C\3C\3C\3C\3C\7C\u0419\nC\fC\16C")
        buf.write("\u041c\13C\5C\u041e\nC\3D\3D\3D\3D\3D\7D\u0425\nD\fD\16")
        buf.write("D\u0428\13D\3D\3D\3D\5D\u042d\nD\5D\u042f\nD\3E\3E\3E")
        buf.write("\3E\3E\3E\3E\3E\3E\3E\3E\7E\u043c\nE\fE\16E\u043f\13E")
        buf.write("\3F\3F\3F\3F\3F\7F\u0446\nF\fF\16F\u0449\13F\3G\3G\3G")
        buf.write("\3G\3G\3G\3H\3H\3H\3H\3H\3H\3H\3H\3H\3I\3I\3I\3I\7I\u045e")
        buf.write("\nI\fI\16I\u0461\13I\3I\3I\3I\5I\u0466\nI\3I\3I\3I\3I")
        buf.write("\3I\7I\u046d\nI\fI\16I\u0470\13I\3I\5I\u0473\nI\5I\u0475")
        buf.write("\nI\3J\3J\3J\3J\7J\u047b\nJ\fJ\16J\u047e\13J\3J\3J\3J")
        buf.write("\5J\u0483\nJ\3J\3J\3J\3J\3J\7J\u048a\nJ\fJ\16J\u048d\13")
        buf.write("J\3J\5J\u0490\nJ\5J\u0492\nJ\3K\3K\3K\3K\3K\7K\u0499\n")
        buf.write("K\fK\16K\u049c\13K\3K\5K\u049f\nK\3K\3K\3K\3K\5K\u04a5")
        buf.write("\nK\3K\3K\3K\5K\u04aa\nK\5K\u04ac\nK\3L\3L\3L\3L\3L\5")
        buf.write("L\u04b3\nL\3L\3L\3L\7L\u04b8\nL\fL\16L\u04bb\13L\3M\3")
        buf.write("M\3M\5M\u04c0\nM\3N\3N\3N\3N\7N\u04c6\nN\fN\16N\u04c9")
        buf.write("\13N\3O\3O\3P\3P\3P\3P\7P\u04d1\nP\fP\16P\u04d4\13P\3")
        buf.write("Q\3Q\3Q\5Q\u04d9\nQ\3Q\3Q\3R\3R\3R\3R\7R\u04e1\nR\fR\16")
        buf.write("R\u04e4\13R\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\5S\u04f2")
        buf.write("\nS\3S\3S\3S\5S\u04f7\nS\5S\u04f9\nS\3T\3T\3T\3T\3T\3")
        buf.write("T\3T\5T\u0502\nT\3U\3U\3U\3U\5U\u0508\nU\3V\3V\3V\3V\3")
        buf.write("W\3W\3W\3W\3W\3W\3W\7W\u0515\nW\fW\16W\u0518\13W\3W\3")
        buf.write("W\5W\u051c\nW\3W\3W\3W\3W\3W\3W\3W\3W\3W\7W\u0527\nW\f")
        buf.write("W\16W\u052a\13W\3X\3X\3X\3X\5X\u0530\nX\7X\u0532\nX\f")
        buf.write("X\16X\u0535\13X\3Y\3Y\5Y\u0539\nY\3Z\3Z\3Z\3Z\3Z\3Z\5")
        buf.write("Z\u0541\nZ\3[\3[\3[\3[\5[\u0547\n[\3\\\3\\\3\\\3\\\3\\")
        buf.write("\3\\\7\\\u054f\n\\\f\\\16\\\u0552\13\\\3]\3]\5]\u0556")
        buf.write("\n]\3^\3^\3^\3^\3^\3^\5^\u055e\n^\3_\3_\3_\3_\5_\u0564")
        buf.write("\n_\3`\3`\3`\3`\3`\5`\u056b\n`\3`\5`\u056e\n`\3`\5`\u0571")
        buf.write("\n`\5`\u0573\n`\3`\5`\u0576\n`\3`\5`\u0579\n`\3a\3a\3")
        buf.write("a\3b\3b\5b\u0580\nb\3b\3b\7b\u0584\nb\fb\16b\u0587\13")
        buf.write("b\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\6c\u0594\nc\rc\16c")
        buf.write("\u0595\5c\u0598\nc\3d\3d\3d\3e\3e\3e\5e\u05a0\ne\3e\3")
        buf.write("e\3e\3e\3e\5e\u05a7\ne\3e\3e\3e\3e\7e\u05ad\ne\fe\16e")
        buf.write("\u05b0\13e\3f\5f\u05b3\nf\3f\3f\3f\3f\5f\u05b9\nf\3g\5")
        buf.write("g\u05bc\ng\3g\3g\3g\3g\3h\3h\5h\u05c4\nh\3h\3h\3h\3h\3")
        buf.write("h\7h\u05cb\nh\fh\16h\u05ce\13h\3h\3h\3i\3i\3i\5i\u05d5")
        buf.write("\ni\3i\3i\3j\3j\5j\u05db\nj\3j\3j\3j\3k\3k\3k\3k\3k\7")
        buf.write("k\u05e5\nk\fk\16k\u05e8\13k\3l\3l\3l\3m\3m\3m\3m\3m\7")
        buf.write("m\u05f2\nm\fm\16m\u05f5\13m\3n\3n\3n\3n\5n\u05fb\nn\3")
        buf.write("n\3n\3n\3n\3n\5n\u0602\nn\3o\3o\5o\u0606\no\3p\3p\5p\u060a")
        buf.write("\np\3q\3q\3q\3q\3q\3q\5q\u0612\nq\3r\3r\3r\3r\3r\3r\3")
        buf.write("r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3")
        buf.write("r\5r\u062d\nr\3s\3s\3s\3s\5s\u0633\ns\3t\3t\3u\3u\3v\5")
        buf.write("v\u063a\nv\3v\3v\5v\u063e\nv\3v\5v\u0641\nv\3v\3v\5v\u0645")
        buf.write("\nv\3v\5v\u0648\nv\5v\u064a\nv\3w\3w\3x\3x\3y\3y\3y\3")
        buf.write("y\3y\3y\3y\3y\3y\5y\u0659\ny\5y\u065b\ny\3y\3y\3y\3y\3")
        buf.write("y\3y\3y\5y\u0664\ny\3z\3z\3{\3{\3{\7{\u066b\n{\f{\16{")
        buf.write("\u066e\13{\3|\3|\3}\3}\3~\3~\3~\2\3\u00c8\177\2\4\6\b")
        buf.write("\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668")
        buf.write(":<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084")
        buf.write("\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096")
        buf.write("\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8")
        buf.write("\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba")
        buf.write("\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc")
        buf.write("\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de")
        buf.write("\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0")
        buf.write("\u00f2\u00f4\u00f6\u00f8\u00fa\2\t\4\2;;BB\13\2\21\21")
        buf.write("\31\31\61\6188FGJKMMSSXX\3\2\63\64\4\2\31\31..\3\2\66")
        buf.write("\67\3\2*+\3\2\24\27\2\u06f8\2\u00fc\3\2\2\2\4\u00fe\3")
        buf.write("\2\2\2\6\u0121\3\2\2\2\b\u0123\3\2\2\2\n\u0129\3\2\2\2")
        buf.write("\f\u012b\3\2\2\2\16\u012d\3\2\2\2\20\u012f\3\2\2\2\22")
        buf.write("\u0134\3\2\2\2\24\u0141\3\2\2\2\26\u0152\3\2\2\2\30\u015f")
        buf.write("\3\2\2\2\32\u016b\3\2\2\2\34\u0178\3\2\2\2\36\u0184\3")
        buf.write("\2\2\2 \u0189\3\2\2\2\"\u01a0\3\2\2\2$\u01f2\3\2\2\2&")
        buf.write("\u0202\3\2\2\2(\u0216\3\2\2\2*\u021c\3\2\2\2,\u0230\3")
        buf.write("\2\2\2.\u0232\3\2\2\2\60\u0234\3\2\2\2\62\u0236\3\2\2")
        buf.write("\2\64\u0242\3\2\2\2\66\u0250\3\2\2\28\u025e\3\2\2\2:\u0260")
        buf.write("\3\2\2\2<\u026b\3\2\2\2>\u0276\3\2\2\2@\u0281\3\2\2\2")
        buf.write("B\u0284\3\2\2\2D\u0287\3\2\2\2F\u0291\3\2\2\2H\u029a\3")
        buf.write("\2\2\2J\u02a8\3\2\2\2L\u02b6\3\2\2\2N\u02c4\3\2\2\2P\u02da")
        buf.write("\3\2\2\2R\u02e6\3\2\2\2T\u02f2\3\2\2\2V\u02fe\3\2\2\2")
        buf.write("X\u030a\3\2\2\2Z\u0316\3\2\2\2\\\u0322\3\2\2\2^\u032e")
        buf.write("\3\2\2\2`\u033a\3\2\2\2b\u0346\3\2\2\2d\u0352\3\2\2\2")
        buf.write("f\u0354\3\2\2\2h\u0373\3\2\2\2j\u0375\3\2\2\2l\u0382\3")
        buf.write("\2\2\2n\u0391\3\2\2\2p\u0393\3\2\2\2r\u0395\3\2\2\2t\u0397")
        buf.write("\3\2\2\2v\u0399\3\2\2\2x\u03ba\3\2\2\2z\u03c2\3\2\2\2")
        buf.write("|\u03c4\3\2\2\2~\u03df\3\2\2\2\u0080\u03e9\3\2\2\2\u0082")
        buf.write("\u03ef\3\2\2\2\u0084\u0407\3\2\2\2\u0086\u041f\3\2\2\2")
        buf.write("\u0088\u0430\3\2\2\2\u008a\u0440\3\2\2\2\u008c\u044a\3")
        buf.write("\2\2\2\u008e\u0450\3\2\2\2\u0090\u0459\3\2\2\2\u0092\u0476")
        buf.write("\3\2\2\2\u0094\u0493\3\2\2\2\u0096\u04ad\3\2\2\2\u0098")
        buf.write("\u04bf\3\2\2\2\u009a\u04c1\3\2\2\2\u009c\u04ca\3\2\2\2")
        buf.write("\u009e\u04cc\3\2\2\2\u00a0\u04d5\3\2\2\2\u00a2\u04dc\3")
        buf.write("\2\2\2\u00a4\u04f8\3\2\2\2\u00a6\u04fa\3\2\2\2\u00a8\u0503")
        buf.write("\3\2\2\2\u00aa\u0509\3\2\2\2\u00ac\u050d\3\2\2\2\u00ae")
        buf.write("\u052b\3\2\2\2\u00b0\u0538\3\2\2\2\u00b2\u0540\3\2\2\2")
        buf.write("\u00b4\u0546\3\2\2\2\u00b6\u0548\3\2\2\2\u00b8\u0555\3")
        buf.write("\2\2\2\u00ba\u055d\3\2\2\2\u00bc\u0563\3\2\2\2\u00be\u0565")
        buf.write("\3\2\2\2\u00c0\u057a\3\2\2\2\u00c2\u057f\3\2\2\2\u00c4")
        buf.write("\u0597\3\2\2\2\u00c6\u0599\3\2\2\2\u00c8\u05a6\3\2\2\2")
        buf.write("\u00ca\u05b2\3\2\2\2\u00cc\u05bb\3\2\2\2\u00ce\u05c1\3")
        buf.write("\2\2\2\u00d0\u05d1\3\2\2\2\u00d2\u05d8\3\2\2\2\u00d4\u05df")
        buf.write("\3\2\2\2\u00d6\u05e9\3\2\2\2\u00d8\u05ec\3\2\2\2\u00da")
        buf.write("\u05f6\3\2\2\2\u00dc\u0603\3\2\2\2\u00de\u0607\3\2\2\2")
        buf.write("\u00e0\u0611\3\2\2\2\u00e2\u062c\3\2\2\2\u00e4\u0632\3")
        buf.write("\2\2\2\u00e6\u0634\3\2\2\2\u00e8\u0636\3\2\2\2\u00ea\u0649")
        buf.write("\3\2\2\2\u00ec\u064b\3\2\2\2\u00ee\u064d\3\2\2\2\u00f0")
        buf.write("\u0663\3\2\2\2\u00f2\u0665\3\2\2\2\u00f4\u0667\3\2\2\2")
        buf.write("\u00f6\u066f\3\2\2\2\u00f8\u0671\3\2\2\2\u00fa\u0673\3")
        buf.write("\2\2\2\u00fc\u00fd\7b\2\2\u00fd\3\3\2\2\2\u00fe\u0106")
        buf.write("\7b\2\2\u00ff\u0101\7\3\2\2\u0100\u0102\5\u00e6t\2\u0101")
        buf.write("\u0100\3\2\2\2\u0101\u0102\3\2\2\2\u0102\u0103\3\2\2\2")
        buf.write("\u0103\u0105\7\4\2\2\u0104\u00ff\3\2\2\2\u0105\u0108\3")
        buf.write("\2\2\2\u0106\u0104\3\2\2\2\u0106\u0107\3\2\2\2\u0107\u0117")
        buf.write("\3\2\2\2\u0108\u0106\3\2\2\2\u0109\u010a\7\5\2\2\u010a")
        buf.write("\u0112\7b\2\2\u010b\u010d\7\3\2\2\u010c\u010e\5\u00e6")
        buf.write("t\2\u010d\u010c\3\2\2\2\u010d\u010e\3\2\2\2\u010e\u010f")
        buf.write("\3\2\2\2\u010f\u0111\7\4\2\2\u0110\u010b\3\2\2\2\u0111")
        buf.write("\u0114\3\2\2\2\u0112\u0110\3\2\2\2\u0112\u0113\3\2\2\2")
        buf.write("\u0113\u0116\3\2\2\2\u0114\u0112\3\2\2\2\u0115\u0109\3")
        buf.write("\2\2\2\u0116\u0119\3\2\2\2\u0117\u0115\3\2\2\2\u0117\u0118")
        buf.write("\3\2\2\2\u0118\u011e\3\2\2\2\u0119\u0117\3\2\2\2\u011a")
        buf.write("\u011b\7\5\2\2\u011b\u011d\7b\2\2\u011c\u011a\3\2\2\2")
        buf.write("\u011d\u0120\3\2\2\2\u011e\u011c\3\2\2\2\u011e\u011f\3")
        buf.write("\2\2\2\u011f\5\3\2\2\2\u0120\u011e\3\2\2\2\u0121\u0122")
        buf.write("\7b\2\2\u0122\7\3\2\2\2\u0123\u0124\7b\2\2\u0124\t\3\2")
        buf.write("\2\2\u0125\u0126\7\6\2\2\u0126\u0127\5\b\5\2\u0127\u0128")
        buf.write("\7\7\2\2\u0128\u012a\3\2\2\2\u0129\u0125\3\2\2\2\u0129")
        buf.write("\u012a\3\2\2\2\u012a\13\3\2\2\2\u012b\u012c\7b\2\2\u012c")
        buf.write("\r\3\2\2\2\u012d\u012e\7b\2\2\u012e\17\3\2\2\2\u012f\u0130")
        buf.write("\79\2\2\u0130\u0131\7\6\2\2\u0131\u0132\5\4\3\2\u0132")
        buf.write("\u0133\7\7\2\2\u0133\21\3\2\2\2\u0134\u0135\7:\2\2\u0135")
        buf.write("\u0136\7\6\2\2\u0136\u0138\5\4\3\2\u0137\u0139\7\b\2\2")
        buf.write("\u0138\u0137\3\2\2\2\u0138\u0139\3\2\2\2\u0139\u013d\3")
        buf.write("\2\2\2\u013a\u013b\7]\2\2\u013b\u013c\7\t\2\2\u013c\u013e")
        buf.write("\5\b\5\2\u013d\u013a\3\2\2\2\u013d\u013e\3\2\2\2\u013e")
        buf.write("\u013f\3\2\2\2\u013f\u0140\7\7\2\2\u0140\23\3\2\2\2\u0141")
        buf.write("\u0142\7;\2\2\u0142\u0143\7\6\2\2\u0143\u0145\5\4\3\2")
        buf.write("\u0144\u0146\7\b\2\2\u0145\u0144\3\2\2\2\u0145\u0146\3")
        buf.write("\2\2\2\u0146\u014a\3\2\2\2\u0147\u0148\7]\2\2\u0148\u0149")
        buf.write("\7\t\2\2\u0149\u014b\5\b\5\2\u014a\u0147\3\2\2\2\u014a")
        buf.write("\u014b\3\2\2\2\u014b\u014c\3\2\2\2\u014c\u014d\7\b\2\2")
        buf.write("\u014d\u014e\7^\2\2\u014e\u014f\7\t\2\2\u014f\u0150\t")
        buf.write("\2\2\2\u0150\u0151\7\7\2\2\u0151\25\3\2\2\2\u0152\u0153")
        buf.write("\7_\2\2\u0153\u0154\7\t\2\2\u0154\u0155\7\3\2\2\u0155")
        buf.write("\u015a\5\f\7\2\u0156\u0157\7\b\2\2\u0157\u0159\5\f\7\2")
        buf.write("\u0158\u0156\3\2\2\2\u0159\u015c\3\2\2\2\u015a\u0158\3")
        buf.write("\2\2\2\u015a\u015b\3\2\2\2\u015b\u015d\3\2\2\2\u015c\u015a")
        buf.write("\3\2\2\2\u015d\u015e\7\4\2\2\u015e\27\3\2\2\2\u015f\u0160")
        buf.write("\5\16\b\2\u0160\u0161\7\3\2\2\u0161\u0166\5\f\7\2\u0162")
        buf.write("\u0163\7\b\2\2\u0163\u0165\5\f\7\2\u0164\u0162\3\2\2\2")
        buf.write("\u0165\u0168\3\2\2\2\u0166\u0164\3\2\2\2\u0166\u0167\3")
        buf.write("\2\2\2\u0167\u0169\3\2\2\2\u0168\u0166\3\2\2\2\u0169\u016a")
        buf.write("\7\4\2\2\u016a\31\3\2\2\2\u016b\u016c\7`\2\2\u016c\u016d")
        buf.write("\7\t\2\2\u016d\u016e\7\3\2\2\u016e\u0173\5\30\r\2\u016f")
        buf.write("\u0170\7\b\2\2\u0170\u0172\5\30\r\2\u0171\u016f\3\2\2")
        buf.write("\2\u0172\u0175\3\2\2\2\u0173\u0171\3\2\2\2\u0173\u0174")
        buf.write("\3\2\2\2\u0174\u0176\3\2\2\2\u0175\u0173\3\2\2\2\u0176")
        buf.write("\u0177\7\4\2\2\u0177\33\3\2\2\2\u0178\u0179\7<\2\2\u0179")
        buf.write("\u017a\7\6\2\2\u017a\u017c\5\4\3\2\u017b\u017d\7\b\2\2")
        buf.write("\u017c\u017b\3\2\2\2\u017c\u017d\3\2\2\2\u017d\u0180\3")
        buf.write("\2\2\2\u017e\u0181\5\26\f\2\u017f\u0181\5\32\16\2\u0180")
        buf.write("\u017e\3\2\2\2\u0180\u017f\3\2\2\2\u0181\u0182\3\2\2\2")
        buf.write("\u0182\u0183\7\7\2\2\u0183\35\3\2\2\2\u0184\u0185\7=\2")
        buf.write("\2\u0185\u0186\7\6\2\2\u0186\u0187\5\4\3\2\u0187\u0188")
        buf.write("\7\7\2\2\u0188\37\3\2\2\2\u0189\u018a\7>\2\2\u018a\u018b")
        buf.write("\7\6\2\2\u018b\u018c\5\4\3\2\u018c\u018d\7\7\2\2\u018d")
        buf.write("!\3\2\2\2\u018e\u018f\7\23\2\2\u018f\u0190\7\6\2\2\u0190")
        buf.write("\u0191\5\4\3\2\u0191\u0192\7\7\2\2\u0192\u0193\7\5\2\2")
        buf.write("\u0193\u0194\5\u00ba^\2\u0194\u01a1\3\2\2\2\u0195\u0196")
        buf.write("\7\23\2\2\u0196\u0197\7\6\2\2\u0197\u019a\5\4\3\2\u0198")
        buf.write("\u0199\7\b\2\2\u0199\u019b\5\u00ba^\2\u019a\u0198\3\2")
        buf.write("\2\2\u019b\u019c\3\2\2\2\u019c\u019a\3\2\2\2\u019c\u019d")
        buf.write("\3\2\2\2\u019d\u019e\3\2\2\2\u019e\u019f\7\7\2\2\u019f")
        buf.write("\u01a1\3\2\2\2\u01a0\u018e\3\2\2\2\u01a0\u0195\3\2\2\2")
        buf.write("\u01a1#\3\2\2\2\u01a2\u01f3\79\2\2\u01a3\u01a4\7:\2\2")
        buf.write("\u01a4\u01a8\7\6\2\2\u01a5\u01a6\7]\2\2\u01a6\u01a7\7")
        buf.write("\t\2\2\u01a7\u01a9\5\b\5\2\u01a8\u01a5\3\2\2\2\u01a8\u01a9")
        buf.write("\3\2\2\2\u01a9\u01aa\3\2\2\2\u01aa\u01f3\7\7\2\2\u01ab")
        buf.write("\u01ac\7;\2\2\u01ac\u01b0\7\6\2\2\u01ad\u01ae\7]\2\2\u01ae")
        buf.write("\u01af\7\t\2\2\u01af\u01b1\5\b\5\2\u01b0\u01ad\3\2\2\2")
        buf.write("\u01b0\u01b1\3\2\2\2\u01b1\u01b3\3\2\2\2\u01b2\u01b4\7")
        buf.write("\b\2\2\u01b3\u01b2\3\2\2\2\u01b3\u01b4\3\2\2\2\u01b4\u01b5")
        buf.write("\3\2\2\2\u01b5\u01b6\7^\2\2\u01b6\u01b7\7\t\2\2\u01b7")
        buf.write("\u01b8\t\2\2\2\u01b8\u01f3\7\7\2\2\u01b9\u01ba\7<\2\2")
        buf.write("\u01ba\u01bb\7\6\2\2\u01bb\u01bc\5\26\f\2\u01bc\u01bd")
        buf.write("\7\7\2\2\u01bd\u01f3\3\2\2\2\u01be\u01bf\7<\2\2\u01bf")
        buf.write("\u01c0\7\6\2\2\u01c0\u01c1\5\32\16\2\u01c1\u01c2\7\7\2")
        buf.write("\2\u01c2\u01f3\3\2\2\2\u01c3\u01f3\7=\2\2\u01c4\u01f3")
        buf.write("\7>\2\2\u01c5\u01c6\7\23\2\2\u01c6\u01c7\7\5\2\2\u01c7")
        buf.write("\u01f3\5\u00ba^\2\u01c8\u01c9\7\23\2\2\u01c9\u01ca\7\6")
        buf.write("\2\2\u01ca\u01cf\5\u00ba^\2\u01cb\u01cc\7\b\2\2\u01cc")
        buf.write("\u01ce\5\u00ba^\2\u01cd\u01cb\3\2\2\2\u01ce\u01d1\3\2")
        buf.write("\2\2\u01cf\u01cd\3\2\2\2\u01cf\u01d0\3\2\2\2\u01d0\u01d2")
        buf.write("\3\2\2\2\u01d1\u01cf\3\2\2\2\u01d2\u01d3\7\7\2\2\u01d3")
        buf.write("\u01f3\3\2\2\2\u01d4\u01d5\7@\2\2\u01d5\u01d6\7\5\2\2")
        buf.write("\u01d6\u01f3\5\u00b8]\2\u01d7\u01d8\7@\2\2\u01d8\u01d9")
        buf.write("\7\6\2\2\u01d9\u01de\5\u00b8]\2\u01da\u01db\7\b\2\2\u01db")
        buf.write("\u01dd\5\u00b8]\2\u01dc\u01da\3\2\2\2\u01dd\u01e0\3\2")
        buf.write("\2\2\u01de\u01dc\3\2\2\2\u01de\u01df\3\2\2\2\u01df\u01e1")
        buf.write("\3\2\2\2\u01e0\u01de\3\2\2\2\u01e1\u01e2\7\7\2\2\u01e2")
        buf.write("\u01f3\3\2\2\2\u01e3\u01e4\7A\2\2\u01e4\u01e5\7\5\2\2")
        buf.write("\u01e5\u01f3\5*\26\2\u01e6\u01e7\7A\2\2\u01e7\u01e8\7")
        buf.write("\6\2\2\u01e8\u01ed\5*\26\2\u01e9\u01ea\7\b\2\2\u01ea\u01ec")
        buf.write("\5*\26\2\u01eb\u01e9\3\2\2\2\u01ec\u01ef\3\2\2\2\u01ed")
        buf.write("\u01eb\3\2\2\2\u01ed\u01ee\3\2\2\2\u01ee\u01f0\3\2\2\2")
        buf.write("\u01ef\u01ed\3\2\2\2\u01f0\u01f1\7\7\2\2\u01f1\u01f3\3")
        buf.write("\2\2\2\u01f2\u01a2\3\2\2\2\u01f2\u01a3\3\2\2\2\u01f2\u01ab")
        buf.write("\3\2\2\2\u01f2\u01b9\3\2\2\2\u01f2\u01be\3\2\2\2\u01f2")
        buf.write("\u01c3\3\2\2\2\u01f2\u01c4\3\2\2\2\u01f2\u01c5\3\2\2\2")
        buf.write("\u01f2\u01c8\3\2\2\2\u01f2\u01d4\3\2\2\2\u01f2\u01d7\3")
        buf.write("\2\2\2\u01f2\u01e3\3\2\2\2\u01f2\u01e6\3\2\2\2\u01f3%")
        buf.write("\3\2\2\2\u01f4\u01f5\7?\2\2\u01f5\u01f6\7\6\2\2\u01f6")
        buf.write("\u01f7\5\4\3\2\u01f7\u01f8\7\7\2\2\u01f8\u01f9\7\5\2\2")
        buf.write("\u01f9\u01fa\5$\23\2\u01fa\u0203\3\2\2\2\u01fb\u01fc\7")
        buf.write("?\2\2\u01fc\u01fd\7\6\2\2\u01fd\u01fe\5\4\3\2\u01fe\u01ff")
        buf.write("\7\b\2\2\u01ff\u0200\5$\23\2\u0200\u0201\7\7\2\2\u0201")
        buf.write("\u0203\3\2\2\2\u0202\u01f4\3\2\2\2\u0202\u01fb\3\2\2\2")
        buf.write("\u0203\'\3\2\2\2\u0204\u0205\7@\2\2\u0205\u0206\7\6\2")
        buf.write("\2\u0206\u0207\5\4\3\2\u0207\u0208\7\7\2\2\u0208\u0209")
        buf.write("\7\5\2\2\u0209\u020a\5\u00b8]\2\u020a\u0217\3\2\2\2\u020b")
        buf.write("\u020c\7@\2\2\u020c\u020d\7\6\2\2\u020d\u0210\5\4\3\2")
        buf.write("\u020e\u020f\7\b\2\2\u020f\u0211\5\u00b8]\2\u0210\u020e")
        buf.write("\3\2\2\2\u0211\u0212\3\2\2\2\u0212\u0210\3\2\2\2\u0212")
        buf.write("\u0213\3\2\2\2\u0213\u0214\3\2\2\2\u0214\u0215\7\7\2\2")
        buf.write("\u0215\u0217\3\2\2\2\u0216\u0204\3\2\2\2\u0216\u020b\3")
        buf.write("\2\2\2\u0217)\3\2\2\2\u0218\u021d\5\u00ba^\2\u0219\u021d")
        buf.write("\5\"\22\2\u021a\u021d\5&\24\2\u021b\u021d\5(\25\2\u021c")
        buf.write("\u0218\3\2\2\2\u021c\u0219\3\2\2\2\u021c\u021a\3\2\2\2")
        buf.write("\u021c\u021b\3\2\2\2\u021d+\3\2\2\2\u021e\u021f\7A\2\2")
        buf.write("\u021f\u0220\7\6\2\2\u0220\u0221\5\4\3\2\u0221\u0222\7")
        buf.write("\7\2\2\u0222\u0223\7\5\2\2\u0223\u0224\5*\26\2\u0224\u0231")
        buf.write("\3\2\2\2\u0225\u0226\7A\2\2\u0226\u0227\7\6\2\2\u0227")
        buf.write("\u022a\5\4\3\2\u0228\u0229\7\b\2\2\u0229\u022b\5*\26\2")
        buf.write("\u022a\u0228\3\2\2\2\u022b\u022c\3\2\2\2\u022c\u022a\3")
        buf.write("\2\2\2\u022c\u022d\3\2\2\2\u022d\u022e\3\2\2\2\u022e\u022f")
        buf.write("\7\7\2\2\u022f\u0231\3\2\2\2\u0230\u021e\3\2\2\2\u0230")
        buf.write("\u0225\3\2\2\2\u0231-\3\2\2\2\u0232\u0233\5\u00e4s\2\u0233")
        buf.write("/\3\2\2\2\u0234\u0235\5\u00e6t\2\u0235\61\3\2\2\2\u0236")
        buf.write("\u0237\7\6\2\2\u0237\u0238\5\u00e6t\2\u0238\u0239\7\b")
        buf.write("\2\2\u0239\u023a\5\u00e6t\2\u023a\u023b\7\7\2\2\u023b")
        buf.write("\63\3\2\2\2\u023c\u0243\5\f\7\2\u023d\u023e\5\16\b\2\u023e")
        buf.write("\u023f\7\6\2\2\u023f\u0240\5\f\7\2\u0240\u0241\7\7\2\2")
        buf.write("\u0241\u0243\3\2\2\2\u0242\u023c\3\2\2\2\u0242\u023d\3")
        buf.write("\2\2\2\u0243\65\3\2\2\2\u0244\u0251\5\u00fa~\2\u0245\u0246")
        buf.write("\7\6\2\2\u0246\u024b\5\u00fa~\2\u0247\u0248\7\b\2\2\u0248")
        buf.write("\u024a\5\u00fa~\2\u0249\u0247\3\2\2\2\u024a\u024d\3\2")
        buf.write("\2\2\u024b\u0249\3\2\2\2\u024b\u024c\3\2\2\2\u024c\u024e")
        buf.write("\3\2\2\2\u024d\u024b\3\2\2\2\u024e\u024f\7\7\2\2\u024f")
        buf.write("\u0251\3\2\2\2\u0250\u0244\3\2\2\2\u0250\u0245\3\2\2\2")
        buf.write("\u0251\67\3\2\2\2\u0252\u025f\5\u00fa~\2\u0253\u0254\7")
        buf.write("\6\2\2\u0254\u0259\5\u00fa~\2\u0255\u0256\7\b\2\2\u0256")
        buf.write("\u0258\5\u00fa~\2\u0257\u0255\3\2\2\2\u0258\u025b\3\2")
        buf.write("\2\2\u0259\u0257\3\2\2\2\u0259\u025a\3\2\2\2\u025a\u025c")
        buf.write("\3\2\2\2\u025b\u0259\3\2\2\2\u025c\u025d\7\7\2\2\u025d")
        buf.write("\u025f\3\2\2\2\u025e\u0252\3\2\2\2\u025e\u0253\3\2\2\2")
        buf.write("\u025f9\3\2\2\2\u0260\u0261\7\6\2\2\u0261\u0266\5L\'\2")
        buf.write("\u0262\u0263\7\b\2\2\u0263\u0265\5L\'\2\u0264\u0262\3")
        buf.write("\2\2\2\u0265\u0268\3\2\2\2\u0266\u0264\3\2\2\2\u0266\u0267")
        buf.write("\3\2\2\2\u0267\u0269\3\2\2\2\u0268\u0266\3\2\2\2\u0269")
        buf.write("\u026a\7\7\2\2\u026a;\3\2\2\2\u026b\u026c\7\6\2\2\u026c")
        buf.write("\u0271\5d\63\2\u026d\u026e\7\b\2\2\u026e\u0270\5d\63\2")
        buf.write("\u026f\u026d\3\2\2\2\u0270\u0273\3\2\2\2\u0271\u026f\3")
        buf.write("\2\2\2\u0271\u0272\3\2\2\2\u0272\u0274\3\2\2\2\u0273\u0271")
        buf.write("\3\2\2\2\u0274\u0275\7\7\2\2\u0275=\3\2\2\2\u0276\u0277")
        buf.write("\7\6\2\2\u0277\u027c\5h\65\2\u0278\u0279\7\b\2\2\u0279")
        buf.write("\u027b\5h\65\2\u027a\u0278\3\2\2\2\u027b\u027e\3\2\2\2")
        buf.write("\u027c\u027a\3\2\2\2\u027c\u027d\3\2\2\2\u027d\u027f\3")
        buf.write("\2\2\2\u027e\u027c\3\2\2\2\u027f\u0280\7\7\2\2\u0280?")
        buf.write("\3\2\2\2\u0281\u0282\79\2\2\u0282\u0283\5\u00e4s\2\u0283")
        buf.write("A\3\2\2\2\u0284\u0285\7:\2\2\u0285\u0286\5\u00e6t\2\u0286")
        buf.write("C\3\2\2\2\u0287\u0288\7;\2\2\u0288\u0289\7^\2\2\u0289")
        buf.write("\u028a\7\t\2\2\u028a\u028b\t\2\2\2\u028b\u028c\7\6\2\2")
        buf.write("\u028c\u028d\5\u00e6t\2\u028d\u028e\7\b\2\2\u028e\u028f")
        buf.write("\5\u00e6t\2\u028f\u0290\7\7\2\2\u0290E\3\2\2\2\u0291\u0298")
        buf.write("\7<\2\2\u0292\u0299\5\f\7\2\u0293\u0294\5\16\b\2\u0294")
        buf.write("\u0295\7\6\2\2\u0295\u0296\5\f\7\2\u0296\u0297\7\7\2\2")
        buf.write("\u0297\u0299\3\2\2\2\u0298\u0292\3\2\2\2\u0298\u0293\3")
        buf.write("\2\2\2\u0299G\3\2\2\2\u029a\u02a6\7=\2\2\u029b\u02a7\5")
        buf.write("\u00fa~\2\u029c\u029d\7\6\2\2\u029d\u02a0\5\u00fa~\2\u029e")
        buf.write("\u029f\7\b\2\2\u029f\u02a1\5\u00fa~\2\u02a0\u029e\3\2")
        buf.write("\2\2\u02a1\u02a2\3\2\2\2\u02a2\u02a0\3\2\2\2\u02a2\u02a3")
        buf.write("\3\2\2\2\u02a3\u02a4\3\2\2\2\u02a4\u02a5\7\7\2\2\u02a5")
        buf.write("\u02a7\3\2\2\2\u02a6\u029b\3\2\2\2\u02a6\u029c\3\2\2\2")
        buf.write("\u02a7I\3\2\2\2\u02a8\u02b4\7>\2\2\u02a9\u02b5\5\u00fa")
        buf.write("~\2\u02aa\u02ab\7\6\2\2\u02ab\u02ae\5\u00fa~\2\u02ac\u02ad")
        buf.write("\7\b\2\2\u02ad\u02af\5\u00fa~\2\u02ae\u02ac\3\2\2\2\u02af")
        buf.write("\u02b0\3\2\2\2\u02b0\u02ae\3\2\2\2\u02b0\u02b1\3\2\2\2")
        buf.write("\u02b1\u02b2\3\2\2\2\u02b2\u02b3\7\7\2\2\u02b3\u02b5\3")
        buf.write("\2\2\2\u02b4\u02a9\3\2\2\2\u02b4\u02aa\3\2\2\2\u02b5K")
        buf.write("\3\2\2\2\u02b6\u02b7\7\6\2\2\u02b7\u02bf\5\u00b2Z\2\u02b8")
        buf.write("\u02bb\7\b\2\2\u02b9\u02bc\5\u00b2Z\2\u02ba\u02bc\7(\2")
        buf.write("\2\u02bb\u02b9\3\2\2\2\u02bb\u02ba\3\2\2\2\u02bc\u02be")
        buf.write("\3\2\2\2\u02bd\u02b8\3\2\2\2\u02be\u02c1\3\2\2\2\u02bf")
        buf.write("\u02bd\3\2\2\2\u02bf\u02c0\3\2\2\2\u02c0\u02c2\3\2\2\2")
        buf.write("\u02c1\u02bf\3\2\2\2\u02c2\u02c3\7\7\2\2\u02c3M\3\2\2")
        buf.write("\2\u02c4\u02cd\7\23\2\2\u02c5\u02ca\5\4\3\2\u02c6\u02c7")
        buf.write("\7\b\2\2\u02c7\u02c9\5\4\3\2\u02c8\u02c6\3\2\2\2\u02c9")
        buf.write("\u02cc\3\2\2\2\u02ca\u02c8\3\2\2\2\u02ca\u02cb\3\2\2\2")
        buf.write("\u02cb\u02ce\3\2\2\2\u02cc\u02ca\3\2\2\2\u02cd\u02c5\3")
        buf.write("\2\2\2\u02cd\u02ce\3\2\2\2\u02ce\u02cf\3\2\2\2\u02cf\u02d0")
        buf.write("\7\6\2\2\u02d0\u02d5\5L\'\2\u02d1\u02d2\7\b\2\2\u02d2")
        buf.write("\u02d4\5L\'\2\u02d3\u02d1\3\2\2\2\u02d4\u02d7\3\2\2\2")
        buf.write("\u02d5\u02d3\3\2\2\2\u02d5\u02d6\3\2\2\2\u02d6\u02d8\3")
        buf.write("\2\2\2\u02d7\u02d5\3\2\2\2\u02d8\u02d9\7\7\2\2\u02d9O")
        buf.write("\3\2\2\2\u02da\u02db\79\2\2\u02db\u02dc\7\3\2\2\u02dc")
        buf.write("\u02e1\5.\30\2\u02dd\u02de\7\b\2\2\u02de\u02e0\5.\30\2")
        buf.write("\u02df\u02dd\3\2\2\2\u02e0\u02e3\3\2\2\2\u02e1\u02df\3")
        buf.write("\2\2\2\u02e1\u02e2\3\2\2\2\u02e2\u02e4\3\2\2\2\u02e3\u02e1")
        buf.write("\3\2\2\2\u02e4\u02e5\7\4\2\2\u02e5Q\3\2\2\2\u02e6\u02e7")
        buf.write("\7:\2\2\u02e7\u02e8\7\3\2\2\u02e8\u02ed\5\60\31\2\u02e9")
        buf.write("\u02ea\7\b\2\2\u02ea\u02ec\5\60\31\2\u02eb\u02e9\3\2\2")
        buf.write("\2\u02ec\u02ef\3\2\2\2\u02ed\u02eb\3\2\2\2\u02ed\u02ee")
        buf.write("\3\2\2\2\u02ee\u02f0\3\2\2\2\u02ef\u02ed\3\2\2\2\u02f0")
        buf.write("\u02f1\7\4\2\2\u02f1S\3\2\2\2\u02f2\u02f3\t\2\2\2\u02f3")
        buf.write("\u02f4\7\3\2\2\u02f4\u02f9\5\62\32\2\u02f5\u02f6\7\b\2")
        buf.write("\2\u02f6\u02f8\5\62\32\2\u02f7\u02f5\3\2\2\2\u02f8\u02fb")
        buf.write("\3\2\2\2\u02f9\u02f7\3\2\2\2\u02f9\u02fa\3\2\2\2\u02fa")
        buf.write("\u02fc\3\2\2\2\u02fb\u02f9\3\2\2\2\u02fc\u02fd\7\4\2\2")
        buf.write("\u02fdU\3\2\2\2\u02fe\u02ff\7<\2\2\u02ff\u0300\7\3\2\2")
        buf.write("\u0300\u0305\5\64\33\2\u0301\u0302\7\b\2\2\u0302\u0304")
        buf.write("\5\64\33\2\u0303\u0301\3\2\2\2\u0304\u0307\3\2\2\2\u0305")
        buf.write("\u0303\3\2\2\2\u0305\u0306\3\2\2\2\u0306\u0308\3\2\2\2")
        buf.write("\u0307\u0305\3\2\2\2\u0308\u0309\7\4\2\2\u0309W\3\2\2")
        buf.write("\2\u030a\u030b\7=\2\2\u030b\u030c\7\3\2\2\u030c\u0311")
        buf.write("\5\66\34\2\u030d\u030e\7\b\2\2\u030e\u0310\5\66\34\2\u030f")
        buf.write("\u030d\3\2\2\2\u0310\u0313\3\2\2\2\u0311\u030f\3\2\2\2")
        buf.write("\u0311\u0312\3\2\2\2\u0312\u0314\3\2\2\2\u0313\u0311\3")
        buf.write("\2\2\2\u0314\u0315\7\4\2\2\u0315Y\3\2\2\2\u0316\u0317")
        buf.write("\7>\2\2\u0317\u0318\7\3\2\2\u0318\u031d\58\35\2\u0319")
        buf.write("\u031a\7\b\2\2\u031a\u031c\58\35\2\u031b\u0319\3\2\2\2")
        buf.write("\u031c\u031f\3\2\2\2\u031d\u031b\3\2\2\2\u031d\u031e\3")
        buf.write("\2\2\2\u031e\u0320\3\2\2\2\u031f\u031d\3\2\2\2\u0320\u0321")
        buf.write("\7\4\2\2\u0321[\3\2\2\2\u0322\u0323\7\23\2\2\u0323\u0324")
        buf.write("\7\3\2\2\u0324\u0329\5:\36\2\u0325\u0326\7\b\2\2\u0326")
        buf.write("\u0328\5:\36\2\u0327\u0325\3\2\2\2\u0328\u032b\3\2\2\2")
        buf.write("\u0329\u0327\3\2\2\2\u0329\u032a\3\2\2\2\u032a\u032c\3")
        buf.write("\2\2\2\u032b\u0329\3\2\2\2\u032c\u032d\7\4\2\2\u032d]")
        buf.write("\3\2\2\2\u032e\u032f\7@\2\2\u032f\u0330\7\3\2\2\u0330")
        buf.write("\u0335\5<\37\2\u0331\u0332\7\b\2\2\u0332\u0334\5<\37\2")
        buf.write("\u0333\u0331\3\2\2\2\u0334\u0337\3\2\2\2\u0335\u0333\3")
        buf.write("\2\2\2\u0335\u0336\3\2\2\2\u0336\u0338\3\2\2\2\u0337\u0335")
        buf.write("\3\2\2\2\u0338\u0339\7\4\2\2\u0339_\3\2\2\2\u033a\u033b")
        buf.write("\7A\2\2\u033b\u033c\7\3\2\2\u033c\u0341\5> \2\u033d\u033e")
        buf.write("\7\b\2\2\u033e\u0340\5> \2\u033f\u033d\3\2\2\2\u0340\u0343")
        buf.write("\3\2\2\2\u0341\u033f\3\2\2\2\u0341\u0342\3\2\2\2\u0342")
        buf.write("\u0344\3\2\2\2\u0343\u0341\3\2\2\2\u0344\u0345\7\4\2\2")
        buf.write("\u0345a\3\2\2\2\u0346\u0350\7?\2\2\u0347\u0351\5P)\2\u0348")
        buf.write("\u0351\5R*\2\u0349\u0351\5T+\2\u034a\u0351\5V,\2\u034b")
        buf.write("\u0351\5X-\2\u034c\u0351\5Z.\2\u034d\u0351\5\\/\2\u034e")
        buf.write("\u0351\5^\60\2\u034f\u0351\5`\61\2\u0350\u0347\3\2\2\2")
        buf.write("\u0350\u0348\3\2\2\2\u0350\u0349\3\2\2\2\u0350\u034a\3")
        buf.write("\2\2\2\u0350\u034b\3\2\2\2\u0350\u034c\3\2\2\2\u0350\u034d")
        buf.write("\3\2\2\2\u0350\u034e\3\2\2\2\u0350\u034f\3\2\2\2\u0351")
        buf.write("c\3\2\2\2\u0352\u0353\5\u00b0Y\2\u0353e\3\2\2\2\u0354")
        buf.write("\u035d\7@\2\2\u0355\u035a\5\4\3\2\u0356\u0357\7\b\2\2")
        buf.write("\u0357\u0359\5\4\3\2\u0358\u0356\3\2\2\2\u0359\u035c\3")
        buf.write("\2\2\2\u035a\u0358\3\2\2\2\u035a\u035b\3\2\2\2\u035b\u035e")
        buf.write("\3\2\2\2\u035c\u035a\3\2\2\2\u035d\u0355\3\2\2\2\u035d")
        buf.write("\u035e\3\2\2\2\u035e\u035f\3\2\2\2\u035f\u0360\7\6\2\2")
        buf.write("\u0360\u0365\5d\63\2\u0361\u0362\7\b\2\2\u0362\u0364\5")
        buf.write("d\63\2\u0363\u0361\3\2\2\2\u0364\u0367\3\2\2\2\u0365\u0363")
        buf.write("\3\2\2\2\u0365\u0366\3\2\2\2\u0366\u0368\3\2\2\2\u0367")
        buf.write("\u0365\3\2\2\2\u0368\u0369\7\7\2\2\u0369g\3\2\2\2\u036a")
        buf.write("\u0374\5@!\2\u036b\u0374\5B\"\2\u036c\u0374\5D#\2\u036d")
        buf.write("\u0374\5F$\2\u036e\u0374\5H%\2\u036f\u0374\5J&\2\u0370")
        buf.write("\u0374\5N(\2\u0371\u0374\5b\62\2\u0372\u0374\5f\64\2\u0373")
        buf.write("\u036a\3\2\2\2\u0373\u036b\3\2\2\2\u0373\u036c\3\2\2\2")
        buf.write("\u0373\u036d\3\2\2\2\u0373\u036e\3\2\2\2\u0373\u036f\3")
        buf.write("\2\2\2\u0373\u0370\3\2\2\2\u0373\u0371\3\2\2\2\u0373\u0372")
        buf.write("\3\2\2\2\u0374i\3\2\2\2\u0375\u0376\7A\2\2\u0376\u0377")
        buf.write("\5\4\3\2\u0377\u0378\5h\65\2\u0378k\3\2\2\2\u0379\u0383")
        buf.write("\5\u00be`\2\u037a\u0383\5\u00c0a\2\u037b\u0383\5\u00b6")
        buf.write("\\\2\u037c\u0383\5\u00aaV\2\u037d\u0383\5\u00acW\2\u037e")
        buf.write("\u0383\5\u00a6T\2\u037f\u0383\5\u00a8U\2\u0380\u0383\5")
        buf.write("\u0096L\2\u0381\u0383\5n8\2\u0382\u0379\3\2\2\2\u0382")
        buf.write("\u037a\3\2\2\2\u0382\u037b\3\2\2\2\u0382\u037c\3\2\2\2")
        buf.write("\u0382\u037d\3\2\2\2\u0382\u037e\3\2\2\2\u0382\u037f\3")
        buf.write("\2\2\2\u0382\u0380\3\2\2\2\u0382\u0381\3\2\2\2\u0383m")
        buf.write("\3\2\2\2\u0384\u0392\5|?\2\u0385\u0392\5~@\2\u0386\u0392")
        buf.write("\5\u0080A\2\u0387\u0392\5\u0082B\2\u0388\u0392\5\u0084")
        buf.write("C\2\u0389\u0392\5\u0086D\2\u038a\u0392\5\u0088E\2\u038b")
        buf.write("\u0392\5\u008aF\2\u038c\u0392\5\u008cG\2\u038d\u0392\5")
        buf.write("\u008eH\2\u038e\u0392\5\u0090I\2\u038f\u0392\5\u0092J")
        buf.write("\2\u0390\u0392\5\u0094K\2\u0391\u0384\3\2\2\2\u0391\u0385")
        buf.write("\3\2\2\2\u0391\u0386\3\2\2\2\u0391\u0387\3\2\2\2\u0391")
        buf.write("\u0388\3\2\2\2\u0391\u0389\3\2\2\2\u0391\u038a\3\2\2\2")
        buf.write("\u0391\u038b\3\2\2\2\u0391\u038c\3\2\2\2\u0391\u038d\3")
        buf.write("\2\2\2\u0391\u038e\3\2\2\2\u0391\u038f\3\2\2\2\u0391\u0390")
        buf.write("\3\2\2\2\u0392o\3\2\2\2\u0393\u0394\7b\2\2\u0394q\3\2")
        buf.write("\2\2\u0395\u0396\7b\2\2\u0396s\3\2\2\2\u0397\u0398\7b")
        buf.write("\2\2\u0398u\3\2\2\2\u0399\u039a\t\3\2\2\u039aw\3\2\2\2")
        buf.write("\u039b\u039d\7D\2\2\u039c\u039e\5\2\2\2\u039d\u039c\3")
        buf.write("\2\2\2\u039d\u039e\3\2\2\2\u039e\u03bb\3\2\2\2\u039f\u03bb")
        buf.write("\7E\2\2\u03a0\u03a2\7V\2\2\u03a1\u03a3\5p9\2\u03a2\u03a1")
        buf.write("\3\2\2\2\u03a2\u03a3\3\2\2\2\u03a3\u03bb\3\2\2\2\u03a4")
        buf.write("\u03a7\7W\2\2\u03a5\u03a6\7Z\2\2\u03a6\u03a8\7O\2\2\u03a7")
        buf.write("\u03a5\3\2\2\2\u03a7\u03a8\3\2\2\2\u03a8\u03bb\3\2\2\2")
        buf.write("\u03a9\u03ab\7T\2\2\u03aa\u03ac\5r:\2\u03ab\u03aa\3\2")
        buf.write("\2\2\u03ab\u03ac\3\2\2\2\u03ac\u03b1\3\2\2\2\u03ad\u03ae")
        buf.write("\7Z\2\2\u03ae\u03b2\7V\2\2\u03af\u03b0\7Z\2\2\u03b0\u03b2")
        buf.write("\7Y\2\2\u03b1\u03ad\3\2\2\2\u03b1\u03af\3\2\2\2\u03b1")
        buf.write("\u03b2\3\2\2\2\u03b2\u03bb\3\2\2\2\u03b3\u03b8\7U\2\2")
        buf.write("\u03b4\u03b5\7Z\2\2\u03b5\u03b9\7V\2\2\u03b6\u03b7\7Z")
        buf.write("\2\2\u03b7\u03b9\7Y\2\2\u03b8\u03b4\3\2\2\2\u03b8\u03b6")
        buf.write("\3\2\2\2\u03b8\u03b9\3\2\2\2\u03b9\u03bb\3\2\2\2\u03ba")
        buf.write("\u039b\3\2\2\2\u03ba\u039f\3\2\2\2\u03ba\u03a0\3\2\2\2")
        buf.write("\u03ba\u03a4\3\2\2\2\u03ba\u03a9\3\2\2\2\u03ba\u03b3\3")
        buf.write("\2\2\2\u03bby\3\2\2\2\u03bc\u03bd\5v<\2\u03bd\u03be\7")
        buf.write("P\2\2\u03be\u03bf\5x=\2\u03bf\u03c3\3\2\2\2\u03c0\u03c1")
        buf.write("\7\31\2\2\u03c1\u03c3\7[\2\2\u03c2\u03bc\3\2\2\2\u03c2")
        buf.write("\u03c0\3\2\2\2\u03c3{\3\2\2\2\u03c4\u03c5\78\2\2\u03c5")
        buf.write("\u03c6\7V\2\2\u03c6\u03c7\5p9\2\u03c7\u03d0\7Z\2\2\u03c8")
        buf.write("\u03cd\5p9\2\u03c9\u03ca\7\b\2\2\u03ca\u03cc\5p9\2\u03cb")
        buf.write("\u03c9\3\2\2\2\u03cc\u03cf\3\2\2\2\u03cd\u03cb\3\2\2\2")
        buf.write("\u03cd\u03ce\3\2\2\2\u03ce\u03d1\3\2\2\2\u03cf\u03cd\3")
        buf.write("\2\2\2\u03d0\u03c8\3\2\2\2\u03d0\u03d1\3\2\2\2\u03d1\u03d3")
        buf.write("\3\2\2\2\u03d2\u03d4\7\b\2\2\u03d3\u03d2\3\2\2\2\u03d3")
        buf.write("\u03d4\3\2\2\2\u03d4\u03dd\3\2\2\2\u03d5\u03da\5z>\2\u03d6")
        buf.write("\u03d7\7\b\2\2\u03d7\u03d9\5z>\2\u03d8\u03d6\3\2\2\2\u03d9")
        buf.write("\u03dc\3\2\2\2\u03da\u03d8\3\2\2\2\u03da\u03db\3\2\2\2")
        buf.write("\u03db\u03de\3\2\2\2\u03dc\u03da\3\2\2\2\u03dd\u03d5\3")
        buf.write("\2\2\2\u03dd\u03de\3\2\2\2\u03de}\3\2\2\2\u03df\u03e0")
        buf.write("\7F\2\2\u03e0\u03e1\7V\2\2\u03e1\u03e6\5p9\2\u03e2\u03e3")
        buf.write("\7\b\2\2\u03e3\u03e5\5p9\2\u03e4\u03e2\3\2\2\2\u03e5\u03e8")
        buf.write("\3\2\2\2\u03e6\u03e4\3\2\2\2\u03e6\u03e7\3\2\2\2\u03e7")
        buf.write("\177\3\2\2\2\u03e8\u03e6\3\2\2\2\u03e9\u03ea\7X\2\2\u03ea")
        buf.write("\u03eb\7V\2\2\u03eb\u03ec\5p9\2\u03ec\u03ed\7\b\2\2\u03ed")
        buf.write("\u03ee\5p9\2\u03ee\u0081\3\2\2\2\u03ef\u0405\7O\2\2\u03f0")
        buf.write("\u03f5\5z>\2\u03f1\u03f2\7\b\2\2\u03f2\u03f4\5z>\2\u03f3")
        buf.write("\u03f1\3\2\2\2\u03f4\u03f7\3\2\2\2\u03f5\u03f3\3\2\2\2")
        buf.write("\u03f5\u03f6\3\2\2\2\u03f6\u03f8\3\2\2\2\u03f7\u03f5\3")
        buf.write("\2\2\2\u03f8\u03f9\7Q\2\2\u03f9\u03fa\5p9\2\u03fa\u0406")
        buf.write("\3\2\2\2\u03fb\u03fc\5z>\2\u03fc\u03fd\7Q\2\2\u03fd\u0402")
        buf.write("\5p9\2\u03fe\u03ff\7\b\2\2\u03ff\u0401\5p9\2\u0400\u03fe")
        buf.write("\3\2\2\2\u0401\u0404\3\2\2\2\u0402\u0400\3\2\2\2\u0402")
        buf.write("\u0403\3\2\2\2\u0403\u0406\3\2\2\2\u0404\u0402\3\2\2\2")
        buf.write("\u0405\u03f0\3\2\2\2\u0405\u03fb\3\2\2\2\u0406\u0083\3")
        buf.write("\2\2\2\u0407\u041d\7R\2\2\u0408\u040d\5z>\2\u0409\u040a")
        buf.write("\7\b\2\2\u040a\u040c\5z>\2\u040b\u0409\3\2\2\2\u040c\u040f")
        buf.write("\3\2\2\2\u040d\u040b\3\2\2\2\u040d\u040e\3\2\2\2\u040e")
        buf.write("\u0410\3\2\2\2\u040f\u040d\3\2\2\2\u0410\u0411\7\22\2")
        buf.write("\2\u0411\u0412\5p9\2\u0412\u041e\3\2\2\2\u0413\u0414\5")
        buf.write("z>\2\u0414\u0415\7\22\2\2\u0415\u041a\5p9\2\u0416\u0417")
        buf.write("\7\b\2\2\u0417\u0419\5p9\2\u0418\u0416\3\2\2\2\u0419\u041c")
        buf.write("\3\2\2\2\u041a\u0418\3\2\2\2\u041a\u041b\3\2\2\2\u041b")
        buf.write("\u041e\3\2\2\2\u041c\u041a\3\2\2\2\u041d\u0408\3\2\2\2")
        buf.write("\u041d\u0413\3\2\2\2\u041e\u0085\3\2\2\2\u041f\u042e\7")
        buf.write("S\2\2\u0420\u0421\7V\2\2\u0421\u0426\5p9\2\u0422\u0423")
        buf.write("\7\b\2\2\u0423\u0425\5p9\2\u0424\u0422\3\2\2\2\u0425\u0428")
        buf.write("\3\2\2\2\u0426\u0424\3\2\2\2\u0426\u0427\3\2\2\2\u0427")
        buf.write("\u042f\3\2\2\2\u0428\u0426\3\2\2\2\u0429\u042c\7W\2\2")
        buf.write("\u042a\u042b\7Z\2\2\u042b\u042d\7O\2\2\u042c\u042a\3\2")
        buf.write("\2\2\u042c\u042d\3\2\2\2\u042d\u042f\3\2\2\2\u042e\u0420")
        buf.write("\3\2\2\2\u042e\u0429\3\2\2\2\u042f\u0087\3\2\2\2\u0430")
        buf.write("\u0431\78\2\2\u0431\u0432\7T\2\2\u0432\u0433\5r:\2\u0433")
        buf.write("\u0434\7Z\2\2\u0434\u0435\7Y\2\2\u0435\u0436\5t;\2\u0436")
        buf.write("\u0437\7\b\2\2\u0437\u0438\7V\2\2\u0438\u043d\5p9\2\u0439")
        buf.write("\u043a\7\b\2\2\u043a\u043c\5p9\2\u043b\u0439\3\2\2\2\u043c")
        buf.write("\u043f\3\2\2\2\u043d\u043b\3\2\2\2\u043d\u043e\3\2\2\2")
        buf.write("\u043e\u0089\3\2\2\2\u043f\u043d\3\2\2\2\u0440\u0441\7")
        buf.write("F\2\2\u0441\u0442\7T\2\2\u0442\u0447\5r:\2\u0443\u0444")
        buf.write("\7\b\2\2\u0444\u0446\5r:\2\u0445\u0443\3\2\2\2\u0446\u0449")
        buf.write("\3\2\2\2\u0447\u0445\3\2\2\2\u0447\u0448\3\2\2\2\u0448")
        buf.write("\u008b\3\2\2\2\u0449\u0447\3\2\2\2\u044a\u044b\7X\2\2")
        buf.write("\u044b\u044c\7T\2\2\u044c\u044d\5r:\2\u044d\u044e\7\b")
        buf.write("\2\2\u044e\u044f\5r:\2\u044f\u008d\3\2\2\2\u0450\u0451")
        buf.write("\7K\2\2\u0451\u0452\7T\2\2\u0452\u0453\5r:\2\u0453\u0454")
        buf.write("\7Z\2\2\u0454\u0455\7Y\2\2\u0455\u0456\5t;\2\u0456\u0457")
        buf.write("\7\b\2\2\u0457\u0458\5t;\2\u0458\u008f\3\2\2\2\u0459\u0474")
        buf.write("\7O\2\2\u045a\u045f\5p9\2\u045b\u045c\7\b\2\2\u045c\u045e")
        buf.write("\5p9\2\u045d\u045b\3\2\2\2\u045e\u0461\3\2\2\2\u045f\u045d")
        buf.write("\3\2\2\2\u045f\u0460\3\2\2\2\u0460\u0462\3\2\2\2\u0461")
        buf.write("\u045f\3\2\2\2\u0462\u0465\7Q\2\2\u0463\u0466\5r:\2\u0464")
        buf.write("\u0466\7\\\2\2\u0465\u0463\3\2\2\2\u0465\u0464\3\2\2\2")
        buf.write("\u0466\u0475\3\2\2\2\u0467\u0468\5p9\2\u0468\u0472\7Q")
        buf.write("\2\2\u0469\u046e\5r:\2\u046a\u046b\7\b\2\2\u046b\u046d")
        buf.write("\5r:\2\u046c\u046a\3\2\2\2\u046d\u0470\3\2\2\2\u046e\u046c")
        buf.write("\3\2\2\2\u046e\u046f\3\2\2\2\u046f\u0473\3\2\2\2\u0470")
        buf.write("\u046e\3\2\2\2\u0471\u0473\7\\\2\2\u0472\u0469\3\2\2\2")
        buf.write("\u0472\u0471\3\2\2\2\u0473\u0475\3\2\2\2\u0474\u045a\3")
        buf.write("\2\2\2\u0474\u0467\3\2\2\2\u0475\u0091\3\2\2\2\u0476\u0491")
        buf.write("\7R\2\2\u0477\u047c\5p9\2\u0478\u0479\7\b\2\2\u0479\u047b")
        buf.write("\5p9\2\u047a\u0478\3\2\2\2\u047b\u047e\3\2\2\2\u047c\u047a")
        buf.write("\3\2\2\2\u047c\u047d\3\2\2\2\u047d\u047f\3\2\2\2\u047e")
        buf.write("\u047c\3\2\2\2\u047f\u0482\7\22\2\2\u0480\u0483\5r:\2")
        buf.write("\u0481\u0483\7\\\2\2\u0482\u0480\3\2\2\2\u0482\u0481\3")
        buf.write("\2\2\2\u0483\u0492\3\2\2\2\u0484\u0485\5p9\2\u0485\u048f")
        buf.write("\7\22\2\2\u0486\u048b\5r:\2\u0487\u0488\7\b\2\2\u0488")
        buf.write("\u048a\5r:\2\u0489\u0487\3\2\2\2\u048a\u048d\3\2\2\2\u048b")
        buf.write("\u0489\3\2\2\2\u048b\u048c\3\2\2\2\u048c\u0490\3\2\2\2")
        buf.write("\u048d\u048b\3\2\2\2\u048e\u0490\7\\\2\2\u048f\u0486\3")
        buf.write("\2\2\2\u048f\u048e\3\2\2\2\u0490\u0492\3\2\2\2\u0491\u0477")
        buf.write("\3\2\2\2\u0491\u0484\3\2\2\2\u0492\u0093\3\2\2\2\u0493")
        buf.write("\u049e\7S\2\2\u0494\u0495\7T\2\2\u0495\u049a\5r:\2\u0496")
        buf.write("\u0497\7\b\2\2\u0497\u0499\5r:\2\u0498\u0496\3\2\2\2\u0499")
        buf.write("\u049c\3\2\2\2\u049a\u0498\3\2\2\2\u049a\u049b\3\2\2\2")
        buf.write("\u049b\u049f\3\2\2\2\u049c\u049a\3\2\2\2\u049d\u049f\7")
        buf.write("U\2\2\u049e\u0494\3\2\2\2\u049e\u049d\3\2\2\2\u049f\u04a0")
        buf.write("\3\2\2\2\u04a0\u04ab\7Z\2\2\u04a1\u04a4\7Y\2\2\u04a2\u04a3")
        buf.write("\7\b\2\2\u04a3\u04a5\7V\2\2\u04a4\u04a2\3\2\2\2\u04a4")
        buf.write("\u04a5\3\2\2\2\u04a5\u04ac\3\2\2\2\u04a6\u04a9\7V\2\2")
        buf.write("\u04a7\u04a8\7\b\2\2\u04a8\u04aa\7Y\2\2\u04a9\u04a7\3")
        buf.write("\2\2\2\u04a9\u04aa\3\2\2\2\u04aa\u04ac\3\2\2\2\u04ab\u04a1")
        buf.write("\3\2\2\2\u04ab\u04a6\3\2\2\2\u04ac\u0095\3\2\2\2\u04ad")
        buf.write("\u04ae\7M\2\2\u04ae\u04af\7D\2\2\u04af\u04b2\5\2\2\2\u04b0")
        buf.write("\u04b1\7\b\2\2\u04b1\u04b3\5\2\2\2\u04b2\u04b0\3\2\2\2")
        buf.write("\u04b2\u04b3\3\2\2\2\u04b3\u04b4\3\2\2\2\u04b4\u04b9\5")
        buf.write("\u0098M\2\u04b5\u04b6\7\b\2\2\u04b6\u04b8\5\u0098M\2\u04b7")
        buf.write("\u04b5\3\2\2\2\u04b8\u04bb\3\2\2\2\u04b9\u04b7\3\2\2\2")
        buf.write("\u04b9\u04ba\3\2\2\2\u04ba\u0097\3\2\2\2\u04bb\u04b9\3")
        buf.write("\2\2\2\u04bc\u04c0\5\u009aN\2\u04bd\u04c0\5\u009eP\2\u04be")
        buf.write("\u04c0\5\u00a2R\2\u04bf\u04bc\3\2\2\2\u04bf\u04bd\3\2")
        buf.write("\2\2\u04bf\u04be\3\2\2\2\u04c0\u0099\3\2\2\2\u04c1\u04c2")
        buf.write("\7N\2\2\u04c2\u04c7\5\u009cO\2\u04c3\u04c4\7\b\2\2\u04c4")
        buf.write("\u04c6\5\u009cO\2\u04c5\u04c3\3\2\2\2\u04c6\u04c9\3\2")
        buf.write("\2\2\u04c7\u04c5\3\2\2\2\u04c7\u04c8\3\2\2\2\u04c8\u009b")
        buf.write("\3\2\2\2\u04c9\u04c7\3\2\2\2\u04ca\u04cb\5\u00b8]\2\u04cb")
        buf.write("\u009d\3\2\2\2\u04cc\u04cd\7F\2\2\u04cd\u04d2\5\u00a0")
        buf.write("Q\2\u04ce\u04cf\7\b\2\2\u04cf\u04d1\5\u00a0Q\2\u04d0\u04ce")
        buf.write("\3\2\2\2\u04d1\u04d4\3\2\2\2\u04d2\u04d0\3\2\2\2\u04d2")
        buf.write("\u04d3\3\2\2\2\u04d3\u009f\3\2\2\2\u04d4\u04d2\3\2\2\2")
        buf.write("\u04d5\u04d8\5\4\3\2\u04d6\u04d9\5\26\f\2\u04d7\u04d9")
        buf.write("\5\32\16\2\u04d8\u04d6\3\2\2\2\u04d8\u04d7\3\2\2\2\u04d8")
        buf.write("\u04d9\3\2\2\2\u04d9\u04da\3\2\2\2\u04da\u04db\5\n\6\2")
        buf.write("\u04db\u00a1\3\2\2\2\u04dc\u04dd\7M\2\2\u04dd\u04e2\5")
        buf.write("\u00a4S\2\u04de\u04df\7\b\2\2\u04df\u04e1\5\u00a4S\2\u04e0")
        buf.write("\u04de\3\2\2\2\u04e1\u04e4\3\2\2\2\u04e2\u04e0\3\2\2\2")
        buf.write("\u04e2\u04e3\3\2\2\2\u04e3\u00a3\3\2\2\2\u04e4\u04e2\3")
        buf.write("\2\2\2\u04e5\u04e6\5\4\3\2\u04e6\u04e7\7\b\2\2\u04e7\u04e8")
        buf.write("\5\4\3\2\u04e8\u04f9\3\2\2\2\u04e9\u04ea\5\4\3\2\u04ea")
        buf.write("\u04eb\5\n\6\2\u04eb\u04ec\7\b\2\2\u04ec\u04ed\5\n\6\2")
        buf.write("\u04ed\u04f9\3\2\2\2\u04ee\u04f1\5\4\3\2\u04ef\u04f2\5")
        buf.write("\26\f\2\u04f0\u04f2\5\32\16\2\u04f1\u04ef\3\2\2\2\u04f1")
        buf.write("\u04f0\3\2\2\2\u04f2\u04f3\3\2\2\2\u04f3\u04f6\7\b\2\2")
        buf.write("\u04f4\u04f7\5\26\f\2\u04f5\u04f7\5\32\16\2\u04f6\u04f4")
        buf.write("\3\2\2\2\u04f6\u04f5\3\2\2\2\u04f7\u04f9\3\2\2\2\u04f8")
        buf.write("\u04e5\3\2\2\2\u04f8\u04e9\3\2\2\2\u04f8\u04ee\3\2\2\2")
        buf.write("\u04f9\u00a5\3\2\2\2\u04fa\u04fb\7K\2\2\u04fb\u04fc\5")
        buf.write("\2\2\2\u04fc\u04fd\7L\2\2\u04fd\u04fe\5\4\3\2\u04fe\u04ff")
        buf.write("\7\t\2\2\u04ff\u0501\5\u00e4s\2\u0500\u0502\5\u00c6d\2")
        buf.write("\u0501\u0500\3\2\2\2\u0501\u0502\3\2\2\2\u0502\u00a7\3")
        buf.write("\2\2\2\u0503\u0504\7J\2\2\u0504\u0505\7\22\2\2\u0505\u0507")
        buf.write("\5\2\2\2\u0506\u0508\5\u00c6d\2\u0507\u0506\3\2\2\2\u0507")
        buf.write("\u0508\3\2\2\2\u0508\u00a9\3\2\2\2\u0509\u050a\7F\2\2")
        buf.write("\u050a\u050b\7D\2\2\u050b\u050c\5\2\2\2\u050c\u00ab\3")
        buf.write("\2\2\2\u050d\u050e\7G\2\2\u050e\u050f\7H\2\2\u050f\u051b")
        buf.write("\5\2\2\2\u0510\u0511\7\6\2\2\u0511\u0516\5\4\3\2\u0512")
        buf.write("\u0513\7\b\2\2\u0513\u0515\5\4\3\2\u0514\u0512\3\2\2\2")
        buf.write("\u0515\u0518\3\2\2\2\u0516\u0514\3\2\2\2\u0516\u0517\3")
        buf.write("\2\2\2\u0517\u0519\3\2\2\2\u0518\u0516\3\2\2\2\u0519\u051a")
        buf.write("\7\7\2\2\u051a\u051c\3\2\2\2\u051b\u0510\3\2\2\2\u051b")
        buf.write("\u051c\3\2\2\2\u051c\u051d\3\2\2\2\u051d\u051e\7I\2\2")
        buf.write("\u051e\u051f\7\6\2\2\u051f\u0520\5\u00aeX\2\u0520\u0528")
        buf.write("\7\7\2\2\u0521\u0522\7\b\2\2\u0522\u0523\7\6\2\2\u0523")
        buf.write("\u0524\5\u00aeX\2\u0524\u0525\7\7\2\2\u0525\u0527\3\2")
        buf.write("\2\2\u0526\u0521\3\2\2\2\u0527\u052a\3\2\2\2\u0528\u0526")
        buf.write("\3\2\2\2\u0528\u0529\3\2\2\2\u0529\u00ad\3\2\2\2\u052a")
        buf.write("\u0528\3\2\2\2\u052b\u0533\5\u00b0Y\2\u052c\u052f\7\b")
        buf.write("\2\2\u052d\u0530\5\u00b0Y\2\u052e\u0530\7(\2\2\u052f\u052d")
        buf.write("\3\2\2\2\u052f\u052e\3\2\2\2\u0530\u0532\3\2\2\2\u0531")
        buf.write("\u052c\3\2\2\2\u0532\u0535\3\2\2\2\u0533\u0531\3\2\2\2")
        buf.write("\u0533\u0534\3\2\2\2\u0534\u00af\3\2\2\2\u0535\u0533\3")
        buf.write("\2\2\2\u0536\u0539\5\u00b2Z\2\u0537\u0539\5\u00b4[\2\u0538")
        buf.write("\u0536\3\2\2\2\u0538\u0537\3\2\2\2\u0539\u00b1\3\2\2\2")
        buf.write("\u053a\u0541\5@!\2\u053b\u0541\5B\"\2\u053c\u0541\5D#")
        buf.write("\2\u053d\u0541\5F$\2\u053e\u0541\5H%\2\u053f\u0541\5J")
        buf.write("&\2\u0540\u053a\3\2\2\2\u0540\u053b\3\2\2\2\u0540\u053c")
        buf.write("\3\2\2\2\u0540\u053d\3\2\2\2\u0540\u053e\3\2\2\2\u0540")
        buf.write("\u053f\3\2\2\2\u0541\u00b3\3\2\2\2\u0542\u0547\5N(\2\u0543")
        buf.write("\u0547\5b\62\2\u0544\u0547\5f\64\2\u0545\u0547\5j\66\2")
        buf.write("\u0546\u0542\3\2\2\2\u0546\u0543\3\2\2\2\u0546\u0544\3")
        buf.write("\2\2\2\u0546\u0545\3\2\2\2\u0547\u00b5\3\2\2\2\u0548\u0549")
        buf.write("\78\2\2\u0549\u054a\7D\2\2\u054a\u054b\5\2\2\2\u054b\u0550")
        buf.write("\5\u00b8]\2\u054c\u054d\7\b\2\2\u054d\u054f\5\u00b8]\2")
        buf.write("\u054e\u054c\3\2\2\2\u054f\u0552\3\2\2\2\u0550\u054e\3")
        buf.write("\2\2\2\u0550\u0551\3\2\2\2\u0551\u00b7\3\2\2\2\u0552\u0550")
        buf.write("\3\2\2\2\u0553\u0556\5\u00ba^\2\u0554\u0556\5\u00bc_\2")
        buf.write("\u0555\u0553\3\2\2\2\u0555\u0554\3\2\2\2\u0556\u00b9\3")
        buf.write("\2\2\2\u0557\u055e\5\20\t\2\u0558\u055e\5\22\n\2\u0559")
        buf.write("\u055e\5\24\13\2\u055a\u055e\5\34\17\2\u055b\u055e\5\36")
        buf.write("\20\2\u055c\u055e\5 \21\2\u055d\u0557\3\2\2\2\u055d\u0558")
        buf.write("\3\2\2\2\u055d\u0559\3\2\2\2\u055d\u055a\3\2\2\2\u055d")
        buf.write("\u055b\3\2\2\2\u055d\u055c\3\2\2\2\u055e\u00bb\3\2\2\2")
        buf.write("\u055f\u0564\5\"\22\2\u0560\u0564\5&\24\2\u0561\u0564")
        buf.write("\5(\25\2\u0562\u0564\5,\27\2\u0563\u055f\3\2\2\2\u0563")
        buf.write("\u0560\3\2\2\2\u0563\u0561\3\2\2\2\u0563\u0562\3\2\2\2")
        buf.write("\u0564\u00bd\3\2\2\2\u0565\u0566\7\21\2\2\u0566\u0572")
        buf.write("\5\u00c2b\2\u0567\u0568\7\22\2\2\u0568\u056a\5\u00c4c")
        buf.write("\2\u0569\u056b\5\u00c6d\2\u056a\u0569\3\2\2\2\u056a\u056b")
        buf.write("\3\2\2\2\u056b\u056d\3\2\2\2\u056c\u056e\5\u00d4k\2\u056d")
        buf.write("\u056c\3\2\2\2\u056d\u056e\3\2\2\2\u056e\u0570\3\2\2\2")
        buf.write("\u056f\u0571\5\u00d6l\2\u0570\u056f\3\2\2\2\u0570\u0571")
        buf.write("\3\2\2\2\u0571\u0573\3\2\2\2\u0572\u0567\3\2\2\2\u0572")
        buf.write("\u0573\3\2\2\2\u0573\u0575\3\2\2\2\u0574\u0576\5\u00d8")
        buf.write("m\2\u0575\u0574\3\2\2\2\u0575\u0576\3\2\2\2\u0576\u0578")
        buf.write("\3\2\2\2\u0577\u0579\5\u00dan\2\u0578\u0577\3\2\2\2\u0578")
        buf.write("\u0579\3\2\2\2\u0579\u00bf\3\2\2\2\u057a\u057b\7\61\2")
        buf.write("\2\u057b\u057c\5\2\2\2\u057c\u00c1\3\2\2\2\u057d\u0580")
        buf.write("\7\n\2\2\u057e\u0580\5\u00eav\2\u057f\u057d\3\2\2\2\u057f")
        buf.write("\u057e\3\2\2\2\u0580\u0585\3\2\2\2\u0581\u0582\7\b\2\2")
        buf.write("\u0582\u0584\5\u00eav\2\u0583\u0581\3\2\2\2\u0584\u0587")
        buf.write("\3\2\2\2\u0585\u0583\3\2\2\2\u0585\u0586\3\2\2\2\u0586")
        buf.write("\u00c3\3\2\2\2\u0587\u0585\3\2\2\2\u0588\u0598\5\2\2\2")
        buf.write("\u0589\u058a\5\2\2\2\u058a\u058b\7\6\2\2\u058b\u058c\5")
        buf.write("\4\3\2\u058c\u0593\7\7\2\2\u058d\u058e\7\b\2\2\u058e\u058f")
        buf.write("\5\2\2\2\u058f\u0590\7\6\2\2\u0590\u0591\5\4\3\2\u0591")
        buf.write("\u0592\7\7\2\2\u0592\u0594\3\2\2\2\u0593\u058d\3\2\2\2")
        buf.write("\u0594\u0595\3\2\2\2\u0595\u0593\3\2\2\2\u0595\u0596\3")
        buf.write("\2\2\2\u0596\u0598\3\2\2\2\u0597\u0588\3\2\2\2\u0597\u0589")
        buf.write("\3\2\2\2\u0598\u00c5\3\2\2\2\u0599\u059a\7\33\2\2\u059a")
        buf.write("\u059b\5\u00c8e\2\u059b\u00c7\3\2\2\2\u059c\u059d\be\1")
        buf.write("\2\u059d\u05a7\5\u00caf\2\u059e\u05a0\t\4\2\2\u059f\u059e")
        buf.write("\3\2\2\2\u059f\u05a0\3\2\2\2\u05a0\u05a1\3\2\2\2\u05a1")
        buf.write("\u05a2\7\6\2\2\u05a2\u05a3\5\u00c8e\2\u05a3\u05a4\7\7")
        buf.write("\2\2\u05a4\u05a7\3\2\2\2\u05a5\u05a7\5\4\3\2\u05a6\u059c")
        buf.write("\3\2\2\2\u05a6\u059f\3\2\2\2\u05a6\u05a5\3\2\2\2\u05a7")
        buf.write("\u05ae\3\2\2\2\u05a8\u05a9\f\6\2\2\u05a9\u05aa\5\u00e0")
        buf.write("q\2\u05aa\u05ab\5\u00c8e\7\u05ab\u05ad\3\2\2\2\u05ac\u05a8")
        buf.write("\3\2\2\2\u05ad\u05b0\3\2\2\2\u05ae\u05ac\3\2\2\2\u05ae")
        buf.write("\u05af\3\2\2\2\u05af\u00c9\3\2\2\2\u05b0\u05ae\3\2\2\2")
        buf.write("\u05b1\u05b3\t\5\2\2\u05b2\u05b1\3\2\2\2\u05b2\u05b3\3")
        buf.write("\2\2\2\u05b3\u05b8\3\2\2\2\u05b4\u05b9\5\u00ccg\2\u05b5")
        buf.write("\u05b9\5\u00ceh\2\u05b6\u05b9\5\u00d0i\2\u05b7\u05b9\5")
        buf.write("\u00d2j\2\u05b8\u05b4\3\2\2\2\u05b8\u05b5\3\2\2\2\u05b8")
        buf.write("\u05b6\3\2\2\2\u05b8\u05b7\3\2\2\2\u05b9\u00cb\3\2\2\2")
        buf.write("\u05ba\u05bc\t\6\2\2\u05bb\u05ba\3\2\2\2\u05bb\u05bc\3")
        buf.write("\2\2\2\u05bc\u05bd\3\2\2\2\u05bd\u05be\5\u00ecw\2\u05be")
        buf.write("\u05bf\5\u00e2r\2\u05bf\u05c0\5\u00e4s\2\u05c0\u00cd\3")
        buf.write("\2\2\2\u05c1\u05c3\5\u00ecw\2\u05c2\u05c4\7 \2\2\u05c3")
        buf.write("\u05c2\3\2\2\2\u05c3\u05c4\3\2\2\2\u05c4\u05c5\3\2\2\2")
        buf.write("\u05c5\u05c6\5\u00e2r\2\u05c6\u05c7\7\6\2\2\u05c7\u05cc")
        buf.write("\5\u00e4s\2\u05c8\u05c9\7\b\2\2\u05c9\u05cb\5\u00e4s\2")
        buf.write("\u05ca\u05c8\3\2\2\2\u05cb\u05ce\3\2\2\2\u05cc\u05ca\3")
        buf.write("\2\2\2\u05cc\u05cd\3\2\2\2\u05cd\u05cf\3\2\2\2\u05ce\u05cc")
        buf.write("\3\2\2\2\u05cf\u05d0\7\7\2\2\u05d0\u00cf\3\2\2\2\u05d1")
        buf.write("\u05d2\5\4\3\2\u05d2\u05d4\7!\2\2\u05d3\u05d5\7 \2\2\u05d4")
        buf.write("\u05d3\3\2\2\2\u05d4\u05d5\3\2\2\2\u05d5\u05d6\3\2\2\2")
        buf.write("\u05d6\u05d7\5\u00e4s\2\u05d7\u00d1\3\2\2\2\u05d8\u05da")
        buf.write("\5\4\3\2\u05d9\u05db\7 \2\2\u05da\u05d9\3\2\2\2\u05da")
        buf.write("\u05db\3\2\2\2\u05db\u05dc\3\2\2\2\u05dc\u05dd\7\65\2")
        buf.write("\2\u05dd\u05de\5\u00e4s\2\u05de\u00d3\3\2\2\2\u05df\u05e0")
        buf.write("\7\34\2\2\u05e0\u05e1\7\35\2\2\u05e1\u05e6\5\u00dep\2")
        buf.write("\u05e2\u05e3\7\b\2\2\u05e3\u05e5\5\u00dep\2\u05e4\u05e2")
        buf.write("\3\2\2\2\u05e5\u05e8\3\2\2\2\u05e6\u05e4\3\2\2\2\u05e6")
        buf.write("\u05e7\3\2\2\2\u05e7\u00d5\3\2\2\2\u05e8\u05e6\3\2\2\2")
        buf.write("\u05e9\u05ea\7\37\2\2\u05ea\u05eb\5\u00c8e\2\u05eb\u00d7")
        buf.write("\3\2\2\2\u05ec\u05ed\7\36\2\2\u05ed\u05ee\7\35\2\2\u05ee")
        buf.write("\u05f3\5\u00dco\2\u05ef\u05f0\7\b\2\2\u05f0\u05f2\5\u00dc")
        buf.write("o\2\u05f1\u05ef\3\2\2\2\u05f2\u05f5\3\2\2\2\u05f3\u05f1")
        buf.write("\3\2\2\2\u05f3\u05f4\3\2\2\2\u05f4\u00d9\3\2\2\2\u05f5")
        buf.write("\u05f3\3\2\2\2\u05f6\u0601\7,\2\2\u05f7\u05f8\5\u00e6")
        buf.write("t\2\u05f8\u05f9\7\b\2\2\u05f9\u05fb\3\2\2\2\u05fa\u05f7")
        buf.write("\3\2\2\2\u05fa\u05fb\3\2\2\2\u05fb\u05fc\3\2\2\2\u05fc")
        buf.write("\u0602\5\u00e6t\2\u05fd\u05fe\5\u00e6t\2\u05fe\u05ff\7")
        buf.write("-\2\2\u05ff\u0600\5\u00e6t\2\u0600\u0602\3\2\2\2\u0601")
        buf.write("\u05fa\3\2\2\2\u0601\u05fd\3\2\2\2\u0602\u00db\3\2\2\2")
        buf.write("\u0603\u0605\5\u00ecw\2\u0604\u0606\t\7\2\2\u0605\u0604")
        buf.write("\3\2\2\2\u0605\u0606\3\2\2\2\u0606\u00dd\3\2\2\2\u0607")
        buf.write("\u0609\5\u00ecw\2\u0608\u060a\t\7\2\2\u0609\u0608\3\2")
        buf.write("\2\2\u0609\u060a\3\2\2\2\u060a\u00df\3\2\2\2\u060b\u0612")
        buf.write("\7&\2\2\u060c\u060d\7\13\2\2\u060d\u0612\7\13\2\2\u060e")
        buf.write("\u0612\7)\2\2\u060f\u0610\7\f\2\2\u0610\u0612\7\f\2\2")
        buf.write("\u0611\u060b\3\2\2\2\u0611\u060c\3\2\2\2\u0611\u060e\3")
        buf.write("\2\2\2\u0611\u060f\3\2\2\2\u0612\u00e1\3\2\2\2\u0613\u062d")
        buf.write("\7\t\2\2\u0614\u062d\7\r\2\2\u0615\u062d\7\16\2\2\u0616")
        buf.write("\u0617\7\16\2\2\u0617\u062d\7\t\2\2\u0618\u0619\7\r\2")
        buf.write("\2\u0619\u062d\7\t\2\2\u061a\u061b\7\16\2\2\u061b\u062d")
        buf.write("\7\r\2\2\u061c\u061d\7\17\2\2\u061d\u062d\7\t\2\2\u061e")
        buf.write("\u061f\7\16\2\2\u061f\u0620\7\t\2\2\u0620\u062d\7\r\2")
        buf.write("\2\u0621\u062d\7/\2\2\u0622\u062d\7\60\2\2\u0623\u062d")
        buf.write("\7\65\2\2\u0624\u062d\7!\2\2\u0625\u062d\7\'\2\2\u0626")
        buf.write("\u0627\7 \2\2\u0627\u062d\7\65\2\2\u0628\u0629\7 \2\2")
        buf.write("\u0629\u062d\7\'\2\2\u062a\u062b\7!\2\2\u062b\u062d\7")
        buf.write(" \2\2\u062c\u0613\3\2\2\2\u062c\u0614\3\2\2\2\u062c\u0615")
        buf.write("\3\2\2\2\u062c\u0616\3\2\2\2\u062c\u0618\3\2\2\2\u062c")
        buf.write("\u061a\3\2\2\2\u062c\u061c\3\2\2\2\u062c\u061e\3\2\2\2")
        buf.write("\u062c\u0621\3\2\2\2\u062c\u0622\3\2\2\2\u062c\u0623\3")
        buf.write("\2\2\2\u062c\u0624\3\2\2\2\u062c\u0625\3\2\2\2\u062c\u0626")
        buf.write("\3\2\2\2\u062c\u0628\3\2\2\2\u062c\u062a\3\2\2\2\u062d")
        buf.write("\u00e3\3\2\2\2\u062e\u0633\5\u00f6|\2\u062f\u0633\5\u00e8")
        buf.write("u\2\u0630\u0633\5\u00e6t\2\u0631\u0633\7(\2\2\u0632\u062e")
        buf.write("\3\2\2\2\u0632\u062f\3\2\2\2\u0632\u0630\3\2\2\2\u0632")
        buf.write("\u0631\3\2\2\2\u0633\u00e5\3\2\2\2\u0634\u0635\7f\2\2")
        buf.write("\u0635\u00e7\3\2\2\2\u0636\u0637\7c\2\2\u0637\u00e9\3")
        buf.write("\2\2\2\u0638\u063a\7b\2\2\u0639\u0638\3\2\2\2\u0639\u063a")
        buf.write("\3\2\2\2\u063a\u063b\3\2\2\2\u063b\u0640\5\u00ecw\2\u063c")
        buf.write("\u063e\7\20\2\2\u063d\u063c\3\2\2\2\u063d\u063e\3\2\2")
        buf.write("\2\u063e\u063f\3\2\2\2\u063f\u0641\5\u00f6|\2\u0640\u063d")
        buf.write("\3\2\2\2\u0640\u0641\3\2\2\2\u0641\u064a\3\2\2\2\u0642")
        buf.write("\u0647\5\u00eex\2\u0643\u0645\7\20\2\2\u0644\u0643\3\2")
        buf.write("\2\2\u0644\u0645\3\2\2\2\u0645\u0646\3\2\2\2\u0646\u0648")
        buf.write("\5\u00f6|\2\u0647\u0644\3\2\2\2\u0647\u0648\3\2\2\2\u0648")
        buf.write("\u064a\3\2\2\2\u0649\u0639\3\2\2\2\u0649\u0642\3\2\2\2")
        buf.write("\u064a\u00eb\3\2\2\2\u064b\u064c\5\4\3\2\u064c\u00ed\3")
        buf.write("\2\2\2\u064d\u064e\5\u00f0y\2\u064e\u00ef\3\2\2\2\u064f")
        buf.write("\u0650\t\b\2\2\u0650\u0651\7\6\2\2\u0651\u0652\5\u00f2")
        buf.write("z\2\u0652\u0653\7\7\2\2\u0653\u0664\3\2\2\2\u0654\u0655")
        buf.write("\7\30\2\2\u0655\u065a\7\6\2\2\u0656\u065b\7\n\2\2\u0657")
        buf.write("\u0659\5\u00f2z\2\u0658\u0657\3\2\2\2\u0658\u0659\3\2")
        buf.write("\2\2\u0659\u065b\3\2\2\2\u065a\u0656\3\2\2\2\u065a\u0658")
        buf.write("\3\2\2\2\u065b\u065c\3\2\2\2\u065c\u0664\7\7\2\2\u065d")
        buf.write("\u065e\7\30\2\2\u065e\u065f\7\6\2\2\u065f\u0660\7\32\2")
        buf.write("\2\u0660\u0661\5\u00f4{\2\u0661\u0662\7\7\2\2\u0662\u0664")
        buf.write("\3\2\2\2\u0663\u064f\3\2\2\2\u0663\u0654\3\2\2\2\u0663")
        buf.write("\u065d\3\2\2\2\u0664\u00f1\3\2\2\2\u0665\u0666\5\4\3\2")
        buf.write("\u0666\u00f3\3\2\2\2\u0667\u066c\5\4\3\2\u0668\u0669\7")
        buf.write("\b\2\2\u0669\u066b\5\4\3\2\u066a\u0668\3\2\2\2\u066b\u066e")
        buf.write("\3\2\2\2\u066c\u066a\3\2\2\2\u066c\u066d\3\2\2\2\u066d")
        buf.write("\u00f5\3\2\2\2\u066e\u066c\3\2\2\2\u066f\u0670\7b\2\2")
        buf.write("\u0670\u00f7\3\2\2\2\u0671\u0672\7a\2\2\u0672\u00f9\3")
        buf.write("\2\2\2\u0673\u0674\7a\2\2\u0674\u00fb\3\2\2\2\u00aa\u0101")
        buf.write("\u0106\u010d\u0112\u0117\u011e\u0129\u0138\u013d\u0145")
        buf.write("\u014a\u015a\u0166\u0173\u017c\u0180\u019c\u01a0\u01a8")
        buf.write("\u01b0\u01b3\u01cf\u01de\u01ed\u01f2\u0202\u0212\u0216")
        buf.write("\u021c\u022c\u0230\u0242\u024b\u0250\u0259\u025e\u0266")
        buf.write("\u0271\u027c\u0298\u02a2\u02a6\u02b0\u02b4\u02bb\u02bf")
        buf.write("\u02ca\u02cd\u02d5\u02e1\u02ed\u02f9\u0305\u0311\u031d")
        buf.write("\u0329\u0335\u0341\u0350\u035a\u035d\u0365\u0373\u0382")
        buf.write("\u0391\u039d\u03a2\u03a7\u03ab\u03b1\u03b8\u03ba\u03c2")
        buf.write("\u03cd\u03d0\u03d3\u03da\u03dd\u03e6\u03f5\u0402\u0405")
        buf.write("\u040d\u041a\u041d\u0426\u042c\u042e\u043d\u0447\u045f")
        buf.write("\u0465\u046e\u0472\u0474\u047c\u0482\u048b\u048f\u0491")
        buf.write("\u049a\u049e\u04a4\u04a9\u04ab\u04b2\u04b9\u04bf\u04c7")
        buf.write("\u04d2\u04d8\u04e2\u04f1\u04f6\u04f8\u0501\u0507\u0516")
        buf.write("\u051b\u0528\u052f\u0533\u0538\u0540\u0546\u0550\u0555")
        buf.write("\u055d\u0563\u056a\u056d\u0570\u0572\u0575\u0578\u057f")
        buf.write("\u0585\u0595\u0597\u059f\u05a6\u05ae\u05b2\u05b8\u05bb")
        buf.write("\u05c3\u05cc\u05d4\u05da\u05e6\u05f3\u05fa\u0601\u0605")
        buf.write("\u0609\u0611\u062c\u0632\u0639\u063d\u0640\u0644\u0647")
        buf.write("\u0649\u0658\u065a\u0663\u066c")
        return buf.getvalue()


class MysqlQueryParser ( Parser ):

    grammarFileName = "MysqlQuery.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'['", "']'", "'.'", "'('", "')'", "','", 
                     "'='", "'*'", "'&'", "'|'", "'>'", "'<'", "'!'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "AS", "SELECT", "FROM", 
                      "TABLE", "MAX", "SUM", "AVG", "MIN", "COUNT", "ALL", 
                      "DISTINCT", "WHERE", "GROUP", "BY", "ORDER", "HAVING", 
                      "NOT", "IS", "TRUE", "FALSE", "UNKNOWN", "BETWEEN", 
                      "AND", "IN", "NULL", "OR", "ASC", "DESC", "LIMIT", 
                      "OFFSET", "EXIST", "STARTWITH", "ENDWITH", "DESCRIBE", 
                      "PRETTY", "EVERY", "ANY", "LIKE", "TOP", "BOTTOM", 
                      "CREATE", "STRING", "NUMBER", "RANGE", "CHOICE", "IMAGE", 
                      "FILE", "ARRAY", "CONTAINER", "GENERATOR", "ERROR", 
                      "MULTIPLE", "TEMPLATE", "TEMPLATES", "DROP", "INSERT", 
                      "INTO", "VALUES", "DELETE", "UPDATE", "SET", "ALTER", 
                      "ADD", "GRANT", "ON", "TO", "REVOKE", "SHOW", "USER", 
                      "USERS", "ROLE", "ROLES", "RENAME", "PASSWORD", "WITH", 
                      "PRIVILEGES", "PUBLIC", "UNIT", "TYPE", "OPTION", 
                      "OPTIONGROUP", "STRING_CONTENT", "ID", "TEXT_STRING", 
                      "ID_LITERAL", "REVERSE_QUOTE_ID", "DECIMAL_LITERAL", 
                      "WS" ]

    RULE_templateName = 0
    RULE_column_name = 1
    RULE_function_name = 2
    RULE_unit_name = 3
    RULE_unit = 4
    RULE_option_name = 5
    RULE_option_group_name = 6
    RULE_create_string_type = 7
    RULE_create_number_type = 8
    RULE_create_range_type = 9
    RULE_choice_type = 10
    RULE_choice_type_remove = 11
    RULE_choice_group_type = 12
    RULE_create_choice_type = 13
    RULE_create_image_type = 14
    RULE_create_file_type = 15
    RULE_create_table_type = 16
    RULE_array_type = 17
    RULE_create_array_type = 18
    RULE_create_container_type = 19
    RULE_generator_type = 20
    RULE_create_generator_type = 21
    RULE_insert_string_value_remove = 22
    RULE_insert_number_value_remove = 23
    RULE_insert_range_value_remove = 24
    RULE_insert_choice_value_remove = 25
    RULE_insert_image_value_remove = 26
    RULE_insert_file_value_remove = 27
    RULE_insert_table_value_remove = 28
    RULE_insert_container_value_remove = 29
    RULE_insert_generator_value_remove = 30
    RULE_insert_string_value = 31
    RULE_insert_number_value = 32
    RULE_insert_range_value = 33
    RULE_insert_choice_value = 34
    RULE_insert_image_value = 35
    RULE_insert_file_value = 36
    RULE_table_row = 37
    RULE_insert_table_value = 38
    RULE_array_element_string = 39
    RULE_array_element_number = 40
    RULE_array_element_range = 41
    RULE_array_element_choice = 42
    RULE_array_element_image = 43
    RULE_array_element_file = 44
    RULE_array_element_table = 45
    RULE_array_element_container = 46
    RULE_array_element_generator = 47
    RULE_insert_array_value = 48
    RULE_container_element = 49
    RULE_insert_container_value = 50
    RULE_generator_element = 51
    RULE_insert_generator_value = 52
    RULE_simpleStatement = 53
    RULE_controlStatement = 54
    RULE_role_name = 55
    RULE_user_name = 56
    RULE_password = 57
    RULE_action = 58
    RULE_resource = 59
    RULE_privilege = 60
    RULE_create_role = 61
    RULE_drop_role = 62
    RULE_rename_role = 63
    RULE_grant_privilege_to_role = 64
    RULE_revoke_privilege_from_role = 65
    RULE_show_role = 66
    RULE_create_user = 67
    RULE_drop_user = 68
    RULE_rename_user = 69
    RULE_update_user_password = 70
    RULE_grant_role_to_user = 71
    RULE_revoke_role_from_user = 72
    RULE_show_user = 73
    RULE_alterStatement = 74
    RULE_alterStatements = 75
    RULE_add_content = 76
    RULE_add_contents = 77
    RULE_drop_content = 78
    RULE_drop_contents = 79
    RULE_alter_content = 80
    RULE_alter_contents = 81
    RULE_updateStatement = 82
    RULE_deleteStatement = 83
    RULE_dropStatement = 84
    RULE_insertStatement = 85
    RULE_insert_all_values = 86
    RULE_insert_all_value = 87
    RULE_insert_unnested_value = 88
    RULE_insert_nested_value = 89
    RULE_createStatement = 90
    RULE_create_all_type = 91
    RULE_create_unnested_type = 92
    RULE_create_nested_type = 93
    RULE_selectStatement = 94
    RULE_describeStatement = 95
    RULE_selectElements = 96
    RULE_tableSources = 97
    RULE_whereClause = 98
    RULE_logicExpression = 99
    RULE_leafLogicExpression = 100
    RULE_comparisonLeafLogicExpression = 101
    RULE_setLeafLogicExpression = 102
    RULE_judgeLeafLogicExpression = 103
    RULE_matchLeafLogicExpression = 104
    RULE_groupByCaluse = 105
    RULE_havingCaluse = 106
    RULE_orderByClause = 107
    RULE_limitClause = 108
    RULE_orderByExpression = 109
    RULE_groupByItem = 110
    RULE_logicalOperator = 111
    RULE_comparisonOperator = 112
    RULE_value = 113
    RULE_decimalLiteral = 114
    RULE_textLiteral = 115
    RULE_selectElement = 116
    RULE_fullColumnName = 117
    RULE_functionCall = 118
    RULE_aggregateWindowedFunction = 119
    RULE_functionArg = 120
    RULE_functionArgs = 121
    RULE_uid = 122
    RULE_stringText = 123
    RULE_pathText = 124

    ruleNames =  [ "templateName", "column_name", "function_name", "unit_name", 
                   "unit", "option_name", "option_group_name", "create_string_type", 
                   "create_number_type", "create_range_type", "choice_type", 
                   "choice_type_remove", "choice_group_type", "create_choice_type", 
                   "create_image_type", "create_file_type", "create_table_type", 
                   "array_type", "create_array_type", "create_container_type", 
                   "generator_type", "create_generator_type", "insert_string_value_remove", 
                   "insert_number_value_remove", "insert_range_value_remove", 
                   "insert_choice_value_remove", "insert_image_value_remove", 
                   "insert_file_value_remove", "insert_table_value_remove", 
                   "insert_container_value_remove", "insert_generator_value_remove", 
                   "insert_string_value", "insert_number_value", "insert_range_value", 
                   "insert_choice_value", "insert_image_value", "insert_file_value", 
                   "table_row", "insert_table_value", "array_element_string", 
                   "array_element_number", "array_element_range", "array_element_choice", 
                   "array_element_image", "array_element_file", "array_element_table", 
                   "array_element_container", "array_element_generator", 
                   "insert_array_value", "container_element", "insert_container_value", 
                   "generator_element", "insert_generator_value", "simpleStatement", 
                   "controlStatement", "role_name", "user_name", "password", 
                   "action", "resource", "privilege", "create_role", "drop_role", 
                   "rename_role", "grant_privilege_to_role", "revoke_privilege_from_role", 
                   "show_role", "create_user", "drop_user", "rename_user", 
                   "update_user_password", "grant_role_to_user", "revoke_role_from_user", 
                   "show_user", "alterStatement", "alterStatements", "add_content", 
                   "add_contents", "drop_content", "drop_contents", "alter_content", 
                   "alter_contents", "updateStatement", "deleteStatement", 
                   "dropStatement", "insertStatement", "insert_all_values", 
                   "insert_all_value", "insert_unnested_value", "insert_nested_value", 
                   "createStatement", "create_all_type", "create_unnested_type", 
                   "create_nested_type", "selectStatement", "describeStatement", 
                   "selectElements", "tableSources", "whereClause", "logicExpression", 
                   "leafLogicExpression", "comparisonLeafLogicExpression", 
                   "setLeafLogicExpression", "judgeLeafLogicExpression", 
                   "matchLeafLogicExpression", "groupByCaluse", "havingCaluse", 
                   "orderByClause", "limitClause", "orderByExpression", 
                   "groupByItem", "logicalOperator", "comparisonOperator", 
                   "value", "decimalLiteral", "textLiteral", "selectElement", 
                   "fullColumnName", "functionCall", "aggregateWindowedFunction", 
                   "functionArg", "functionArgs", "uid", "stringText", "pathText" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    AS=14
    SELECT=15
    FROM=16
    TABLE=17
    MAX=18
    SUM=19
    AVG=20
    MIN=21
    COUNT=22
    ALL=23
    DISTINCT=24
    WHERE=25
    GROUP=26
    BY=27
    ORDER=28
    HAVING=29
    NOT=30
    IS=31
    TRUE=32
    FALSE=33
    UNKNOWN=34
    BETWEEN=35
    AND=36
    IN=37
    NULL=38
    OR=39
    ASC=40
    DESC=41
    LIMIT=42
    OFFSET=43
    EXIST=44
    STARTWITH=45
    ENDWITH=46
    DESCRIBE=47
    PRETTY=48
    EVERY=49
    ANY=50
    LIKE=51
    TOP=52
    BOTTOM=53
    CREATE=54
    STRING=55
    NUMBER=56
    RANGE=57
    CHOICE=58
    IMAGE=59
    FILE=60
    ARRAY=61
    CONTAINER=62
    GENERATOR=63
    ERROR=64
    MULTIPLE=65
    TEMPLATE=66
    TEMPLATES=67
    DROP=68
    INSERT=69
    INTO=70
    VALUES=71
    DELETE=72
    UPDATE=73
    SET=74
    ALTER=75
    ADD=76
    GRANT=77
    ON=78
    TO=79
    REVOKE=80
    SHOW=81
    USER=82
    USERS=83
    ROLE=84
    ROLES=85
    RENAME=86
    PASSWORD=87
    WITH=88
    PRIVILEGES=89
    PUBLIC=90
    UNIT=91
    TYPE=92
    OPTION=93
    OPTIONGROUP=94
    STRING_CONTENT=95
    ID=96
    TEXT_STRING=97
    ID_LITERAL=98
    REVERSE_QUOTE_ID=99
    DECIMAL_LITERAL=100
    WS=101

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class TemplateNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.tmpName = None # Token

        def ID(self):
            return self.getToken(MysqlQueryParser.ID, 0)

        def getRuleIndex(self):
            return MysqlQueryParser.RULE_templateName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateName" ):
                return visitor.visitTemplateName(self)
            else:
                return visitor.visitChildren(self)




    def templateName(self):

        localctx = MysqlQueryParser.TemplateNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_templateName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 250
            localctx.tmpName = self.match(MysqlQueryParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(MysqlQueryParser.ID)
            else:
                return self.getToken(MysqlQueryParser.ID, i)

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.DecimalLiteralContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_column_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_name" ):
                return visitor.visitColumn_name(self)
            else:
                return visitor.visitChildren(self)




    def column_name(self):

        localctx = MysqlQueryParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_column_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 252
            self.match(MysqlQueryParser.ID)
            self.state = 260
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 253
                    self.match(MysqlQueryParser.T__0)
                    self.state = 255
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MysqlQueryParser.DECIMAL_LITERAL:
                        self.state = 254
                        self.decimalLiteral()


                    self.state = 257
                    self.match(MysqlQueryParser.T__1) 
                self.state = 262
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

            self.state = 277
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 263
                    self.match(MysqlQueryParser.T__2)
                    self.state = 264
                    self.match(MysqlQueryParser.ID)
                    self.state = 272
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 265
                            self.match(MysqlQueryParser.T__0)
                            self.state = 267
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==MysqlQueryParser.DECIMAL_LITERAL:
                                self.state = 266
                                self.decimalLiteral()


                            self.state = 269
                            self.match(MysqlQueryParser.T__1) 
                        self.state = 274
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
             
                self.state = 279
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

            self.state = 284
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 280
                    self.match(MysqlQueryParser.T__2)
                    self.state = 281
                    self.match(MysqlQueryParser.ID) 
                self.state = 286
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.tmpName = None # Token

        def ID(self):
            return self.getToken(MysqlQueryParser.ID, 0)

        def getRuleIndex(self):
            return MysqlQueryParser.RULE_function_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_name" ):
                return visitor.visitFunction_name(self)
            else:
                return visitor.visitChildren(self)




    def function_name(self):

        localctx = MysqlQueryParser.Function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 287
            localctx.tmpName = self.match(MysqlQueryParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unit_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MysqlQueryParser.ID, 0)

        def getRuleIndex(self):
            return MysqlQueryParser.RULE_unit_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnit_name" ):
                return visitor.visitUnit_name(self)
            else:
                return visitor.visitChildren(self)




    def unit_name(self):

        localctx = MysqlQueryParser.Unit_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_unit_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 289
            self.match(MysqlQueryParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unit_name(self):
            return self.getTypedRuleContext(MysqlQueryParser.Unit_nameContext,0)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_unit

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnit" ):
                return visitor.visitUnit(self)
            else:
                return visitor.visitChildren(self)




    def unit(self):

        localctx = MysqlQueryParser.UnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_unit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MysqlQueryParser.T__3:
                self.state = 291
                self.match(MysqlQueryParser.T__3)
                self.state = 292
                self.unit_name()
                self.state = 293
                self.match(MysqlQueryParser.T__4)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Option_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MysqlQueryParser.ID, 0)

        def getRuleIndex(self):
            return MysqlQueryParser.RULE_option_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOption_name" ):
                return visitor.visitOption_name(self)
            else:
                return visitor.visitChildren(self)




    def option_name(self):

        localctx = MysqlQueryParser.Option_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_option_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 297
            self.match(MysqlQueryParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Option_group_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MysqlQueryParser.ID, 0)

        def getRuleIndex(self):
            return MysqlQueryParser.RULE_option_group_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOption_group_name" ):
                return visitor.visitOption_group_name(self)
            else:
                return visitor.visitChildren(self)




    def option_group_name(self):

        localctx = MysqlQueryParser.Option_group_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_option_group_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 299
            self.match(MysqlQueryParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_string_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(MysqlQueryParser.STRING, 0)

        def column_name(self):
            return self.getTypedRuleContext(MysqlQueryParser.Column_nameContext,0)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_create_string_type

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_string_type" ):
                return visitor.visitCreate_string_type(self)
            else:
                return visitor.visitChildren(self)




    def create_string_type(self):

        localctx = MysqlQueryParser.Create_string_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_create_string_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 301
            self.match(MysqlQueryParser.STRING)
            self.state = 302
            self.match(MysqlQueryParser.T__3)
            self.state = 303
            self.column_name()
            self.state = 304
            self.match(MysqlQueryParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_number_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(MysqlQueryParser.NUMBER, 0)

        def column_name(self):
            return self.getTypedRuleContext(MysqlQueryParser.Column_nameContext,0)


        def UNIT(self):
            return self.getToken(MysqlQueryParser.UNIT, 0)

        def unit_name(self):
            return self.getTypedRuleContext(MysqlQueryParser.Unit_nameContext,0)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_create_number_type

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_number_type" ):
                return visitor.visitCreate_number_type(self)
            else:
                return visitor.visitChildren(self)




    def create_number_type(self):

        localctx = MysqlQueryParser.Create_number_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_create_number_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 306
            self.match(MysqlQueryParser.NUMBER)
            self.state = 307
            self.match(MysqlQueryParser.T__3)
            self.state = 308
            self.column_name()
            self.state = 310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MysqlQueryParser.T__5:
                self.state = 309
                self.match(MysqlQueryParser.T__5)


            self.state = 315
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MysqlQueryParser.UNIT:
                self.state = 312
                self.match(MysqlQueryParser.UNIT)
                self.state = 313
                self.match(MysqlQueryParser.T__6)
                self.state = 314
                self.unit_name()


            self.state = 317
            self.match(MysqlQueryParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_range_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RANGE(self, i:int=None):
            if i is None:
                return self.getTokens(MysqlQueryParser.RANGE)
            else:
                return self.getToken(MysqlQueryParser.RANGE, i)

        def column_name(self):
            return self.getTypedRuleContext(MysqlQueryParser.Column_nameContext,0)


        def TYPE(self):
            return self.getToken(MysqlQueryParser.TYPE, 0)

        def ERROR(self):
            return self.getToken(MysqlQueryParser.ERROR, 0)

        def UNIT(self):
            return self.getToken(MysqlQueryParser.UNIT, 0)

        def unit_name(self):
            return self.getTypedRuleContext(MysqlQueryParser.Unit_nameContext,0)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_create_range_type

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_range_type" ):
                return visitor.visitCreate_range_type(self)
            else:
                return visitor.visitChildren(self)




    def create_range_type(self):

        localctx = MysqlQueryParser.Create_range_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_create_range_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 319
            self.match(MysqlQueryParser.RANGE)
            self.state = 320
            self.match(MysqlQueryParser.T__3)
            self.state = 321
            self.column_name()
            self.state = 323
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 322
                self.match(MysqlQueryParser.T__5)


            self.state = 328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MysqlQueryParser.UNIT:
                self.state = 325
                self.match(MysqlQueryParser.UNIT)
                self.state = 326
                self.match(MysqlQueryParser.T__6)
                self.state = 327
                self.unit_name()


            self.state = 330
            self.match(MysqlQueryParser.T__5)
            self.state = 331
            self.match(MysqlQueryParser.TYPE)
            self.state = 332
            self.match(MysqlQueryParser.T__6)
            self.state = 333
            _la = self._input.LA(1)
            if not(_la==MysqlQueryParser.RANGE or _la==MysqlQueryParser.ERROR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 334
            self.match(MysqlQueryParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Choice_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTION(self):
            return self.getToken(MysqlQueryParser.OPTION, 0)

        def option_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Option_nameContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Option_nameContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_choice_type

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChoice_type" ):
                return visitor.visitChoice_type(self)
            else:
                return visitor.visitChildren(self)




    def choice_type(self):

        localctx = MysqlQueryParser.Choice_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_choice_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 336
            self.match(MysqlQueryParser.OPTION)
            self.state = 337
            self.match(MysqlQueryParser.T__6)
            self.state = 338
            self.match(MysqlQueryParser.T__0)
            self.state = 339
            self.option_name()
            self.state = 344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MysqlQueryParser.T__5:
                self.state = 340
                self.match(MysqlQueryParser.T__5)
                self.state = 341
                self.option_name()
                self.state = 346
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 347
            self.match(MysqlQueryParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Choice_type_removeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def option_group_name(self):
            return self.getTypedRuleContext(MysqlQueryParser.Option_group_nameContext,0)


        def option_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Option_nameContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Option_nameContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_choice_type_remove

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChoice_type_remove" ):
                return visitor.visitChoice_type_remove(self)
            else:
                return visitor.visitChildren(self)




    def choice_type_remove(self):

        localctx = MysqlQueryParser.Choice_type_removeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_choice_type_remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 349
            self.option_group_name()
            self.state = 350
            self.match(MysqlQueryParser.T__0)
            self.state = 351
            self.option_name()
            self.state = 356
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MysqlQueryParser.T__5:
                self.state = 352
                self.match(MysqlQueryParser.T__5)
                self.state = 353
                self.option_name()
                self.state = 358
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 359
            self.match(MysqlQueryParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Choice_group_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIONGROUP(self):
            return self.getToken(MysqlQueryParser.OPTIONGROUP, 0)

        def choice_type_remove(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Choice_type_removeContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Choice_type_removeContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_choice_group_type

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChoice_group_type" ):
                return visitor.visitChoice_group_type(self)
            else:
                return visitor.visitChildren(self)




    def choice_group_type(self):

        localctx = MysqlQueryParser.Choice_group_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_choice_group_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 361
            self.match(MysqlQueryParser.OPTIONGROUP)
            self.state = 362
            self.match(MysqlQueryParser.T__6)
            self.state = 363
            self.match(MysqlQueryParser.T__0)
            self.state = 364
            self.choice_type_remove()
            self.state = 369
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MysqlQueryParser.T__5:
                self.state = 365
                self.match(MysqlQueryParser.T__5)
                self.state = 366
                self.choice_type_remove()
                self.state = 371
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 372
            self.match(MysqlQueryParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_choice_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHOICE(self):
            return self.getToken(MysqlQueryParser.CHOICE, 0)

        def column_name(self):
            return self.getTypedRuleContext(MysqlQueryParser.Column_nameContext,0)


        def choice_type(self):
            return self.getTypedRuleContext(MysqlQueryParser.Choice_typeContext,0)


        def choice_group_type(self):
            return self.getTypedRuleContext(MysqlQueryParser.Choice_group_typeContext,0)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_create_choice_type

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_choice_type" ):
                return visitor.visitCreate_choice_type(self)
            else:
                return visitor.visitChildren(self)




    def create_choice_type(self):

        localctx = MysqlQueryParser.Create_choice_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_create_choice_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 374
            self.match(MysqlQueryParser.CHOICE)
            self.state = 375
            self.match(MysqlQueryParser.T__3)
            self.state = 376
            self.column_name()
            self.state = 378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MysqlQueryParser.T__5:
                self.state = 377
                self.match(MysqlQueryParser.T__5)


            self.state = 382
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MysqlQueryParser.OPTION]:
                self.state = 380
                self.choice_type()
                pass
            elif token in [MysqlQueryParser.OPTIONGROUP]:
                self.state = 381
                self.choice_group_type()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 384
            self.match(MysqlQueryParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_image_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMAGE(self):
            return self.getToken(MysqlQueryParser.IMAGE, 0)

        def column_name(self):
            return self.getTypedRuleContext(MysqlQueryParser.Column_nameContext,0)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_create_image_type

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_image_type" ):
                return visitor.visitCreate_image_type(self)
            else:
                return visitor.visitChildren(self)




    def create_image_type(self):

        localctx = MysqlQueryParser.Create_image_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_create_image_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 386
            self.match(MysqlQueryParser.IMAGE)
            self.state = 387
            self.match(MysqlQueryParser.T__3)
            self.state = 388
            self.column_name()
            self.state = 389
            self.match(MysqlQueryParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_file_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILE(self):
            return self.getToken(MysqlQueryParser.FILE, 0)

        def column_name(self):
            return self.getTypedRuleContext(MysqlQueryParser.Column_nameContext,0)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_create_file_type

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_file_type" ):
                return visitor.visitCreate_file_type(self)
            else:
                return visitor.visitChildren(self)




    def create_file_type(self):

        localctx = MysqlQueryParser.Create_file_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_create_file_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 391
            self.match(MysqlQueryParser.FILE)
            self.state = 392
            self.match(MysqlQueryParser.T__3)
            self.state = 393
            self.column_name()
            self.state = 394
            self.match(MysqlQueryParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_table_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(MysqlQueryParser.TABLE, 0)

        def column_name(self):
            return self.getTypedRuleContext(MysqlQueryParser.Column_nameContext,0)


        def create_unnested_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Create_unnested_typeContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Create_unnested_typeContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_create_table_type

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_table_type" ):
                return visitor.visitCreate_table_type(self)
            else:
                return visitor.visitChildren(self)




    def create_table_type(self):

        localctx = MysqlQueryParser.Create_table_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_create_table_type)
        self._la = 0 # Token type
        try:
            self.state = 414
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 396
                self.match(MysqlQueryParser.TABLE)
                self.state = 397
                self.match(MysqlQueryParser.T__3)
                self.state = 398
                self.column_name()
                self.state = 399
                self.match(MysqlQueryParser.T__4)
                self.state = 400
                self.match(MysqlQueryParser.T__2)
                self.state = 401
                self.create_unnested_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 403
                self.match(MysqlQueryParser.TABLE)
                self.state = 404
                self.match(MysqlQueryParser.T__3)
                self.state = 405
                self.column_name()
                self.state = 408 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 406
                    self.match(MysqlQueryParser.T__5)
                    self.state = 407
                    self.create_unnested_type()
                    self.state = 410 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==MysqlQueryParser.T__5):
                        break

                self.state = 412
                self.match(MysqlQueryParser.T__4)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(MysqlQueryParser.STRING, 0)

        def NUMBER(self):
            return self.getToken(MysqlQueryParser.NUMBER, 0)

        def UNIT(self):
            return self.getToken(MysqlQueryParser.UNIT, 0)

        def unit_name(self):
            return self.getTypedRuleContext(MysqlQueryParser.Unit_nameContext,0)


        def RANGE(self, i:int=None):
            if i is None:
                return self.getTokens(MysqlQueryParser.RANGE)
            else:
                return self.getToken(MysqlQueryParser.RANGE, i)

        def TYPE(self):
            return self.getToken(MysqlQueryParser.TYPE, 0)

        def ERROR(self):
            return self.getToken(MysqlQueryParser.ERROR, 0)

        def CHOICE(self):
            return self.getToken(MysqlQueryParser.CHOICE, 0)

        def choice_type(self):
            return self.getTypedRuleContext(MysqlQueryParser.Choice_typeContext,0)


        def choice_group_type(self):
            return self.getTypedRuleContext(MysqlQueryParser.Choice_group_typeContext,0)


        def IMAGE(self):
            return self.getToken(MysqlQueryParser.IMAGE, 0)

        def FILE(self):
            return self.getToken(MysqlQueryParser.FILE, 0)

        def TABLE(self):
            return self.getToken(MysqlQueryParser.TABLE, 0)

        def create_unnested_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Create_unnested_typeContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Create_unnested_typeContext,i)


        def CONTAINER(self):
            return self.getToken(MysqlQueryParser.CONTAINER, 0)

        def create_all_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Create_all_typeContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Create_all_typeContext,i)


        def GENERATOR(self):
            return self.getToken(MysqlQueryParser.GENERATOR, 0)

        def generator_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Generator_typeContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Generator_typeContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_array_type

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArray_type" ):
                return visitor.visitArray_type(self)
            else:
                return visitor.visitChildren(self)




    def array_type(self):

        localctx = MysqlQueryParser.Array_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_array_type)
        self._la = 0 # Token type
        try:
            self.state = 496
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 416
                self.match(MysqlQueryParser.STRING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 417
                self.match(MysqlQueryParser.NUMBER)
                self.state = 418
                self.match(MysqlQueryParser.T__3)
                self.state = 422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MysqlQueryParser.UNIT:
                    self.state = 419
                    self.match(MysqlQueryParser.UNIT)
                    self.state = 420
                    self.match(MysqlQueryParser.T__6)
                    self.state = 421
                    self.unit_name()


                self.state = 424
                self.match(MysqlQueryParser.T__4)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 425
                self.match(MysqlQueryParser.RANGE)
                self.state = 426
                self.match(MysqlQueryParser.T__3)
                self.state = 430
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MysqlQueryParser.UNIT:
                    self.state = 427
                    self.match(MysqlQueryParser.UNIT)
                    self.state = 428
                    self.match(MysqlQueryParser.T__6)
                    self.state = 429
                    self.unit_name()


                self.state = 433
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MysqlQueryParser.T__5:
                    self.state = 432
                    self.match(MysqlQueryParser.T__5)


                self.state = 435
                self.match(MysqlQueryParser.TYPE)
                self.state = 436
                self.match(MysqlQueryParser.T__6)
                self.state = 437
                _la = self._input.LA(1)
                if not(_la==MysqlQueryParser.RANGE or _la==MysqlQueryParser.ERROR):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 438
                self.match(MysqlQueryParser.T__4)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 439
                self.match(MysqlQueryParser.CHOICE)
                self.state = 440
                self.match(MysqlQueryParser.T__3)
                self.state = 441
                self.choice_type()
                self.state = 442
                self.match(MysqlQueryParser.T__4)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 444
                self.match(MysqlQueryParser.CHOICE)
                self.state = 445
                self.match(MysqlQueryParser.T__3)
                self.state = 446
                self.choice_group_type()
                self.state = 447
                self.match(MysqlQueryParser.T__4)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 449
                self.match(MysqlQueryParser.IMAGE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 450
                self.match(MysqlQueryParser.FILE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 451
                self.match(MysqlQueryParser.TABLE)
                self.state = 452
                self.match(MysqlQueryParser.T__2)
                self.state = 453
                self.create_unnested_type()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 454
                self.match(MysqlQueryParser.TABLE)
                self.state = 455
                self.match(MysqlQueryParser.T__3)
                self.state = 456
                self.create_unnested_type()
                self.state = 461
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MysqlQueryParser.T__5:
                    self.state = 457
                    self.match(MysqlQueryParser.T__5)
                    self.state = 458
                    self.create_unnested_type()
                    self.state = 463
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 464
                self.match(MysqlQueryParser.T__4)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 466
                self.match(MysqlQueryParser.CONTAINER)
                self.state = 467
                self.match(MysqlQueryParser.T__2)
                self.state = 468
                self.create_all_type()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 469
                self.match(MysqlQueryParser.CONTAINER)
                self.state = 470
                self.match(MysqlQueryParser.T__3)
                self.state = 471
                self.create_all_type()
                self.state = 476
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MysqlQueryParser.T__5:
                    self.state = 472
                    self.match(MysqlQueryParser.T__5)
                    self.state = 473
                    self.create_all_type()
                    self.state = 478
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 479
                self.match(MysqlQueryParser.T__4)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 481
                self.match(MysqlQueryParser.GENERATOR)
                self.state = 482
                self.match(MysqlQueryParser.T__2)
                self.state = 483
                self.generator_type()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 484
                self.match(MysqlQueryParser.GENERATOR)
                self.state = 485
                self.match(MysqlQueryParser.T__3)
                self.state = 486
                self.generator_type()
                self.state = 491
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MysqlQueryParser.T__5:
                    self.state = 487
                    self.match(MysqlQueryParser.T__5)
                    self.state = 488
                    self.generator_type()
                    self.state = 493
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 494
                self.match(MysqlQueryParser.T__4)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_array_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY(self):
            return self.getToken(MysqlQueryParser.ARRAY, 0)

        def column_name(self):
            return self.getTypedRuleContext(MysqlQueryParser.Column_nameContext,0)


        def array_type(self):
            return self.getTypedRuleContext(MysqlQueryParser.Array_typeContext,0)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_create_array_type

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_array_type" ):
                return visitor.visitCreate_array_type(self)
            else:
                return visitor.visitChildren(self)




    def create_array_type(self):

        localctx = MysqlQueryParser.Create_array_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_create_array_type)
        try:
            self.state = 512
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 498
                self.match(MysqlQueryParser.ARRAY)
                self.state = 499
                self.match(MysqlQueryParser.T__3)
                self.state = 500
                self.column_name()
                self.state = 501
                self.match(MysqlQueryParser.T__4)
                self.state = 502
                self.match(MysqlQueryParser.T__2)
                self.state = 503
                self.array_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 505
                self.match(MysqlQueryParser.ARRAY)
                self.state = 506
                self.match(MysqlQueryParser.T__3)
                self.state = 507
                self.column_name()
                self.state = 508
                self.match(MysqlQueryParser.T__5)
                self.state = 509
                self.array_type()
                self.state = 510
                self.match(MysqlQueryParser.T__4)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_container_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTAINER(self):
            return self.getToken(MysqlQueryParser.CONTAINER, 0)

        def column_name(self):
            return self.getTypedRuleContext(MysqlQueryParser.Column_nameContext,0)


        def create_all_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Create_all_typeContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Create_all_typeContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_create_container_type

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_container_type" ):
                return visitor.visitCreate_container_type(self)
            else:
                return visitor.visitChildren(self)




    def create_container_type(self):

        localctx = MysqlQueryParser.Create_container_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_create_container_type)
        self._la = 0 # Token type
        try:
            self.state = 532
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 514
                self.match(MysqlQueryParser.CONTAINER)
                self.state = 515
                self.match(MysqlQueryParser.T__3)
                self.state = 516
                self.column_name()
                self.state = 517
                self.match(MysqlQueryParser.T__4)
                self.state = 518
                self.match(MysqlQueryParser.T__2)
                self.state = 519
                self.create_all_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 521
                self.match(MysqlQueryParser.CONTAINER)
                self.state = 522
                self.match(MysqlQueryParser.T__3)
                self.state = 523
                self.column_name()
                self.state = 526 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 524
                    self.match(MysqlQueryParser.T__5)
                    self.state = 525
                    self.create_all_type()
                    self.state = 528 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==MysqlQueryParser.T__5):
                        break

                self.state = 530
                self.match(MysqlQueryParser.T__4)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generator_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def create_unnested_type(self):
            return self.getTypedRuleContext(MysqlQueryParser.Create_unnested_typeContext,0)


        def create_table_type(self):
            return self.getTypedRuleContext(MysqlQueryParser.Create_table_typeContext,0)


        def create_array_type(self):
            return self.getTypedRuleContext(MysqlQueryParser.Create_array_typeContext,0)


        def create_container_type(self):
            return self.getTypedRuleContext(MysqlQueryParser.Create_container_typeContext,0)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_generator_type

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenerator_type" ):
                return visitor.visitGenerator_type(self)
            else:
                return visitor.visitChildren(self)




    def generator_type(self):

        localctx = MysqlQueryParser.Generator_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_generator_type)
        try:
            self.state = 538
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MysqlQueryParser.STRING, MysqlQueryParser.NUMBER, MysqlQueryParser.RANGE, MysqlQueryParser.CHOICE, MysqlQueryParser.IMAGE, MysqlQueryParser.FILE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 534
                self.create_unnested_type()
                pass
            elif token in [MysqlQueryParser.TABLE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 535
                self.create_table_type()
                pass
            elif token in [MysqlQueryParser.ARRAY]:
                self.enterOuterAlt(localctx, 3)
                self.state = 536
                self.create_array_type()
                pass
            elif token in [MysqlQueryParser.CONTAINER]:
                self.enterOuterAlt(localctx, 4)
                self.state = 537
                self.create_container_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_generator_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GENERATOR(self):
            return self.getToken(MysqlQueryParser.GENERATOR, 0)

        def column_name(self):
            return self.getTypedRuleContext(MysqlQueryParser.Column_nameContext,0)


        def generator_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Generator_typeContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Generator_typeContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_create_generator_type

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_generator_type" ):
                return visitor.visitCreate_generator_type(self)
            else:
                return visitor.visitChildren(self)




    def create_generator_type(self):

        localctx = MysqlQueryParser.Create_generator_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_create_generator_type)
        self._la = 0 # Token type
        try:
            self.state = 558
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 540
                self.match(MysqlQueryParser.GENERATOR)
                self.state = 541
                self.match(MysqlQueryParser.T__3)
                self.state = 542
                self.column_name()
                self.state = 543
                self.match(MysqlQueryParser.T__4)
                self.state = 544
                self.match(MysqlQueryParser.T__2)
                self.state = 545
                self.generator_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 547
                self.match(MysqlQueryParser.GENERATOR)
                self.state = 548
                self.match(MysqlQueryParser.T__3)
                self.state = 549
                self.column_name()
                self.state = 552 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 550
                    self.match(MysqlQueryParser.T__5)
                    self.state = 551
                    self.generator_type()
                    self.state = 554 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==MysqlQueryParser.T__5):
                        break

                self.state = 556
                self.match(MysqlQueryParser.T__4)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_string_value_removeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value(self):
            return self.getTypedRuleContext(MysqlQueryParser.ValueContext,0)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_insert_string_value_remove

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_string_value_remove" ):
                return visitor.visitInsert_string_value_remove(self)
            else:
                return visitor.visitChildren(self)




    def insert_string_value_remove(self):

        localctx = MysqlQueryParser.Insert_string_value_removeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_insert_string_value_remove)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 560
            self.value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_number_value_removeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decimalLiteral(self):
            return self.getTypedRuleContext(MysqlQueryParser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_insert_number_value_remove

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_number_value_remove" ):
                return visitor.visitInsert_number_value_remove(self)
            else:
                return visitor.visitChildren(self)




    def insert_number_value_remove(self):

        localctx = MysqlQueryParser.Insert_number_value_removeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_insert_number_value_remove)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 562
            self.decimalLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_range_value_removeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.DecimalLiteralContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_insert_range_value_remove

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_range_value_remove" ):
                return visitor.visitInsert_range_value_remove(self)
            else:
                return visitor.visitChildren(self)




    def insert_range_value_remove(self):

        localctx = MysqlQueryParser.Insert_range_value_removeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_insert_range_value_remove)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 564
            self.match(MysqlQueryParser.T__3)
            self.state = 565
            self.decimalLiteral()
            self.state = 566
            self.match(MysqlQueryParser.T__5)
            self.state = 567
            self.decimalLiteral()
            self.state = 568
            self.match(MysqlQueryParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_choice_value_removeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def option_name(self):
            return self.getTypedRuleContext(MysqlQueryParser.Option_nameContext,0)


        def option_group_name(self):
            return self.getTypedRuleContext(MysqlQueryParser.Option_group_nameContext,0)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_insert_choice_value_remove

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_choice_value_remove" ):
                return visitor.visitInsert_choice_value_remove(self)
            else:
                return visitor.visitChildren(self)




    def insert_choice_value_remove(self):

        localctx = MysqlQueryParser.Insert_choice_value_removeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_insert_choice_value_remove)
        try:
            self.state = 576
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 570
                self.option_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 571
                self.option_group_name()
                self.state = 572
                self.match(MysqlQueryParser.T__3)
                self.state = 573
                self.option_name()
                self.state = 574
                self.match(MysqlQueryParser.T__4)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_image_value_removeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathText(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.PathTextContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.PathTextContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_insert_image_value_remove

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_image_value_remove" ):
                return visitor.visitInsert_image_value_remove(self)
            else:
                return visitor.visitChildren(self)




    def insert_image_value_remove(self):

        localctx = MysqlQueryParser.Insert_image_value_removeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_insert_image_value_remove)
        self._la = 0 # Token type
        try:
            self.state = 590
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MysqlQueryParser.STRING_CONTENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 578
                self.pathText()
                pass
            elif token in [MysqlQueryParser.T__3]:
                self.enterOuterAlt(localctx, 2)
                self.state = 579
                self.match(MysqlQueryParser.T__3)
                self.state = 580
                self.pathText()
                self.state = 585
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MysqlQueryParser.T__5:
                    self.state = 581
                    self.match(MysqlQueryParser.T__5)
                    self.state = 582
                    self.pathText()
                    self.state = 587
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 588
                self.match(MysqlQueryParser.T__4)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_file_value_removeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathText(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.PathTextContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.PathTextContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_insert_file_value_remove

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_file_value_remove" ):
                return visitor.visitInsert_file_value_remove(self)
            else:
                return visitor.visitChildren(self)




    def insert_file_value_remove(self):

        localctx = MysqlQueryParser.Insert_file_value_removeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_insert_file_value_remove)
        self._la = 0 # Token type
        try:
            self.state = 604
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MysqlQueryParser.STRING_CONTENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 592
                self.pathText()
                pass
            elif token in [MysqlQueryParser.T__3]:
                self.enterOuterAlt(localctx, 2)
                self.state = 593
                self.match(MysqlQueryParser.T__3)
                self.state = 594
                self.pathText()
                self.state = 599
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MysqlQueryParser.T__5:
                    self.state = 595
                    self.match(MysqlQueryParser.T__5)
                    self.state = 596
                    self.pathText()
                    self.state = 601
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 602
                self.match(MysqlQueryParser.T__4)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_table_value_removeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_row(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Table_rowContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Table_rowContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_insert_table_value_remove

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_table_value_remove" ):
                return visitor.visitInsert_table_value_remove(self)
            else:
                return visitor.visitChildren(self)




    def insert_table_value_remove(self):

        localctx = MysqlQueryParser.Insert_table_value_removeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_insert_table_value_remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 606
            self.match(MysqlQueryParser.T__3)
            self.state = 607
            self.table_row()
            self.state = 612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MysqlQueryParser.T__5:
                self.state = 608
                self.match(MysqlQueryParser.T__5)
                self.state = 609
                self.table_row()
                self.state = 614
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 615
            self.match(MysqlQueryParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_container_value_removeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def container_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Container_elementContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Container_elementContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_insert_container_value_remove

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_container_value_remove" ):
                return visitor.visitInsert_container_value_remove(self)
            else:
                return visitor.visitChildren(self)




    def insert_container_value_remove(self):

        localctx = MysqlQueryParser.Insert_container_value_removeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_insert_container_value_remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 617
            self.match(MysqlQueryParser.T__3)
            self.state = 618
            self.container_element()
            self.state = 623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MysqlQueryParser.T__5:
                self.state = 619
                self.match(MysqlQueryParser.T__5)
                self.state = 620
                self.container_element()
                self.state = 625
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 626
            self.match(MysqlQueryParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_generator_value_removeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generator_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Generator_elementContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Generator_elementContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_insert_generator_value_remove

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_generator_value_remove" ):
                return visitor.visitInsert_generator_value_remove(self)
            else:
                return visitor.visitChildren(self)




    def insert_generator_value_remove(self):

        localctx = MysqlQueryParser.Insert_generator_value_removeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_insert_generator_value_remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 628
            self.match(MysqlQueryParser.T__3)
            self.state = 629
            self.generator_element()
            self.state = 634
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MysqlQueryParser.T__5:
                self.state = 630
                self.match(MysqlQueryParser.T__5)
                self.state = 631
                self.generator_element()
                self.state = 636
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 637
            self.match(MysqlQueryParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_string_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(MysqlQueryParser.STRING, 0)

        def value(self):
            return self.getTypedRuleContext(MysqlQueryParser.ValueContext,0)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_insert_string_value

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_string_value" ):
                return visitor.visitInsert_string_value(self)
            else:
                return visitor.visitChildren(self)




    def insert_string_value(self):

        localctx = MysqlQueryParser.Insert_string_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_insert_string_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 639
            self.match(MysqlQueryParser.STRING)
            self.state = 640
            self.value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_number_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(MysqlQueryParser.NUMBER, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MysqlQueryParser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_insert_number_value

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_number_value" ):
                return visitor.visitInsert_number_value(self)
            else:
                return visitor.visitChildren(self)




    def insert_number_value(self):

        localctx = MysqlQueryParser.Insert_number_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_insert_number_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642
            self.match(MysqlQueryParser.NUMBER)
            self.state = 643
            self.decimalLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_range_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RANGE(self, i:int=None):
            if i is None:
                return self.getTokens(MysqlQueryParser.RANGE)
            else:
                return self.getToken(MysqlQueryParser.RANGE, i)

        def TYPE(self):
            return self.getToken(MysqlQueryParser.TYPE, 0)

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.DecimalLiteralContext,i)


        def ERROR(self):
            return self.getToken(MysqlQueryParser.ERROR, 0)

        def getRuleIndex(self):
            return MysqlQueryParser.RULE_insert_range_value

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_range_value" ):
                return visitor.visitInsert_range_value(self)
            else:
                return visitor.visitChildren(self)




    def insert_range_value(self):

        localctx = MysqlQueryParser.Insert_range_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_insert_range_value)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 645
            self.match(MysqlQueryParser.RANGE)
            self.state = 646
            self.match(MysqlQueryParser.TYPE)
            self.state = 647
            self.match(MysqlQueryParser.T__6)
            self.state = 648
            _la = self._input.LA(1)
            if not(_la==MysqlQueryParser.RANGE or _la==MysqlQueryParser.ERROR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 649
            self.match(MysqlQueryParser.T__3)
            self.state = 650
            self.decimalLiteral()
            self.state = 651
            self.match(MysqlQueryParser.T__5)
            self.state = 652
            self.decimalLiteral()
            self.state = 653
            self.match(MysqlQueryParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_choice_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHOICE(self):
            return self.getToken(MysqlQueryParser.CHOICE, 0)

        def option_name(self):
            return self.getTypedRuleContext(MysqlQueryParser.Option_nameContext,0)


        def option_group_name(self):
            return self.getTypedRuleContext(MysqlQueryParser.Option_group_nameContext,0)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_insert_choice_value

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_choice_value" ):
                return visitor.visitInsert_choice_value(self)
            else:
                return visitor.visitChildren(self)




    def insert_choice_value(self):

        localctx = MysqlQueryParser.Insert_choice_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_insert_choice_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 655
            self.match(MysqlQueryParser.CHOICE)
            self.state = 662
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 656
                self.option_name()
                pass

            elif la_ == 2:
                self.state = 657
                self.option_group_name()
                self.state = 658
                self.match(MysqlQueryParser.T__3)
                self.state = 659
                self.option_name()
                self.state = 660
                self.match(MysqlQueryParser.T__4)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_image_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMAGE(self):
            return self.getToken(MysqlQueryParser.IMAGE, 0)

        def pathText(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.PathTextContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.PathTextContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_insert_image_value

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_image_value" ):
                return visitor.visitInsert_image_value(self)
            else:
                return visitor.visitChildren(self)




    def insert_image_value(self):

        localctx = MysqlQueryParser.Insert_image_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_insert_image_value)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 664
            self.match(MysqlQueryParser.IMAGE)
            self.state = 676
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MysqlQueryParser.STRING_CONTENT]:
                self.state = 665
                self.pathText()
                pass
            elif token in [MysqlQueryParser.T__3]:
                self.state = 666
                self.match(MysqlQueryParser.T__3)
                self.state = 667
                self.pathText()
                self.state = 670 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 668
                    self.match(MysqlQueryParser.T__5)
                    self.state = 669
                    self.pathText()
                    self.state = 672 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==MysqlQueryParser.T__5):
                        break

                self.state = 674
                self.match(MysqlQueryParser.T__4)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_file_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILE(self):
            return self.getToken(MysqlQueryParser.FILE, 0)

        def pathText(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.PathTextContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.PathTextContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_insert_file_value

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_file_value" ):
                return visitor.visitInsert_file_value(self)
            else:
                return visitor.visitChildren(self)




    def insert_file_value(self):

        localctx = MysqlQueryParser.Insert_file_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_insert_file_value)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 678
            self.match(MysqlQueryParser.FILE)
            self.state = 690
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MysqlQueryParser.STRING_CONTENT]:
                self.state = 679
                self.pathText()
                pass
            elif token in [MysqlQueryParser.T__3]:
                self.state = 680
                self.match(MysqlQueryParser.T__3)
                self.state = 681
                self.pathText()
                self.state = 684 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 682
                    self.match(MysqlQueryParser.T__5)
                    self.state = 683
                    self.pathText()
                    self.state = 686 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==MysqlQueryParser.T__5):
                        break

                self.state = 688
                self.match(MysqlQueryParser.T__4)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_rowContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insert_unnested_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Insert_unnested_valueContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Insert_unnested_valueContext,i)


        def NULL(self, i:int=None):
            if i is None:
                return self.getTokens(MysqlQueryParser.NULL)
            else:
                return self.getToken(MysqlQueryParser.NULL, i)

        def getRuleIndex(self):
            return MysqlQueryParser.RULE_table_row

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_row" ):
                return visitor.visitTable_row(self)
            else:
                return visitor.visitChildren(self)




    def table_row(self):

        localctx = MysqlQueryParser.Table_rowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_table_row)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 692
            self.match(MysqlQueryParser.T__3)
            self.state = 693
            self.insert_unnested_value()
            self.state = 701
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MysqlQueryParser.T__5:
                self.state = 694
                self.match(MysqlQueryParser.T__5)
                self.state = 697
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MysqlQueryParser.STRING, MysqlQueryParser.NUMBER, MysqlQueryParser.RANGE, MysqlQueryParser.CHOICE, MysqlQueryParser.IMAGE, MysqlQueryParser.FILE]:
                    self.state = 695
                    self.insert_unnested_value()
                    pass
                elif token in [MysqlQueryParser.NULL]:
                    self.state = 696
                    self.match(MysqlQueryParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 703
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 704
            self.match(MysqlQueryParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_table_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(MysqlQueryParser.TABLE, 0)

        def table_row(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Table_rowContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Table_rowContext,i)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Column_nameContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_insert_table_value

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_table_value" ):
                return visitor.visitInsert_table_value(self)
            else:
                return visitor.visitChildren(self)




    def insert_table_value(self):

        localctx = MysqlQueryParser.Insert_table_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_insert_table_value)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 706
            self.match(MysqlQueryParser.TABLE)
            self.state = 715
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MysqlQueryParser.ID:
                self.state = 707
                self.column_name()
                self.state = 712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MysqlQueryParser.T__5:
                    self.state = 708
                    self.match(MysqlQueryParser.T__5)
                    self.state = 709
                    self.column_name()
                    self.state = 714
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 717
            self.match(MysqlQueryParser.T__3)
            self.state = 718
            self.table_row()
            self.state = 723
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MysqlQueryParser.T__5:
                self.state = 719
                self.match(MysqlQueryParser.T__5)
                self.state = 720
                self.table_row()
                self.state = 725
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 726
            self.match(MysqlQueryParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_element_stringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(MysqlQueryParser.STRING, 0)

        def insert_string_value_remove(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Insert_string_value_removeContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Insert_string_value_removeContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_array_element_string

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArray_element_string" ):
                return visitor.visitArray_element_string(self)
            else:
                return visitor.visitChildren(self)




    def array_element_string(self):

        localctx = MysqlQueryParser.Array_element_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_array_element_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 728
            self.match(MysqlQueryParser.STRING)
            self.state = 729
            self.match(MysqlQueryParser.T__0)
            self.state = 730
            self.insert_string_value_remove()
            self.state = 735
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MysqlQueryParser.T__5:
                self.state = 731
                self.match(MysqlQueryParser.T__5)
                self.state = 732
                self.insert_string_value_remove()
                self.state = 737
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 738
            self.match(MysqlQueryParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_element_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(MysqlQueryParser.NUMBER, 0)

        def insert_number_value_remove(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Insert_number_value_removeContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Insert_number_value_removeContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_array_element_number

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArray_element_number" ):
                return visitor.visitArray_element_number(self)
            else:
                return visitor.visitChildren(self)




    def array_element_number(self):

        localctx = MysqlQueryParser.Array_element_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_array_element_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 740
            self.match(MysqlQueryParser.NUMBER)
            self.state = 741
            self.match(MysqlQueryParser.T__0)
            self.state = 742
            self.insert_number_value_remove()
            self.state = 747
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MysqlQueryParser.T__5:
                self.state = 743
                self.match(MysqlQueryParser.T__5)
                self.state = 744
                self.insert_number_value_remove()
                self.state = 749
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 750
            self.match(MysqlQueryParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_element_rangeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insert_range_value_remove(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Insert_range_value_removeContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Insert_range_value_removeContext,i)


        def RANGE(self):
            return self.getToken(MysqlQueryParser.RANGE, 0)

        def ERROR(self):
            return self.getToken(MysqlQueryParser.ERROR, 0)

        def getRuleIndex(self):
            return MysqlQueryParser.RULE_array_element_range

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArray_element_range" ):
                return visitor.visitArray_element_range(self)
            else:
                return visitor.visitChildren(self)




    def array_element_range(self):

        localctx = MysqlQueryParser.Array_element_rangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_array_element_range)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 752
            _la = self._input.LA(1)
            if not(_la==MysqlQueryParser.RANGE or _la==MysqlQueryParser.ERROR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 753
            self.match(MysqlQueryParser.T__0)
            self.state = 754
            self.insert_range_value_remove()
            self.state = 759
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MysqlQueryParser.T__5:
                self.state = 755
                self.match(MysqlQueryParser.T__5)
                self.state = 756
                self.insert_range_value_remove()
                self.state = 761
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 762
            self.match(MysqlQueryParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_element_choiceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHOICE(self):
            return self.getToken(MysqlQueryParser.CHOICE, 0)

        def insert_choice_value_remove(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Insert_choice_value_removeContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Insert_choice_value_removeContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_array_element_choice

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArray_element_choice" ):
                return visitor.visitArray_element_choice(self)
            else:
                return visitor.visitChildren(self)




    def array_element_choice(self):

        localctx = MysqlQueryParser.Array_element_choiceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_array_element_choice)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 764
            self.match(MysqlQueryParser.CHOICE)
            self.state = 765
            self.match(MysqlQueryParser.T__0)
            self.state = 766
            self.insert_choice_value_remove()
            self.state = 771
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MysqlQueryParser.T__5:
                self.state = 767
                self.match(MysqlQueryParser.T__5)
                self.state = 768
                self.insert_choice_value_remove()
                self.state = 773
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 774
            self.match(MysqlQueryParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_element_imageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMAGE(self):
            return self.getToken(MysqlQueryParser.IMAGE, 0)

        def insert_image_value_remove(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Insert_image_value_removeContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Insert_image_value_removeContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_array_element_image

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArray_element_image" ):
                return visitor.visitArray_element_image(self)
            else:
                return visitor.visitChildren(self)




    def array_element_image(self):

        localctx = MysqlQueryParser.Array_element_imageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_array_element_image)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 776
            self.match(MysqlQueryParser.IMAGE)
            self.state = 777
            self.match(MysqlQueryParser.T__0)
            self.state = 778
            self.insert_image_value_remove()
            self.state = 783
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MysqlQueryParser.T__5:
                self.state = 779
                self.match(MysqlQueryParser.T__5)
                self.state = 780
                self.insert_image_value_remove()
                self.state = 785
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 786
            self.match(MysqlQueryParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_element_fileContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILE(self):
            return self.getToken(MysqlQueryParser.FILE, 0)

        def insert_file_value_remove(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Insert_file_value_removeContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Insert_file_value_removeContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_array_element_file

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArray_element_file" ):
                return visitor.visitArray_element_file(self)
            else:
                return visitor.visitChildren(self)




    def array_element_file(self):

        localctx = MysqlQueryParser.Array_element_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_array_element_file)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 788
            self.match(MysqlQueryParser.FILE)
            self.state = 789
            self.match(MysqlQueryParser.T__0)
            self.state = 790
            self.insert_file_value_remove()
            self.state = 795
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MysqlQueryParser.T__5:
                self.state = 791
                self.match(MysqlQueryParser.T__5)
                self.state = 792
                self.insert_file_value_remove()
                self.state = 797
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 798
            self.match(MysqlQueryParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_element_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(MysqlQueryParser.TABLE, 0)

        def insert_table_value_remove(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Insert_table_value_removeContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Insert_table_value_removeContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_array_element_table

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArray_element_table" ):
                return visitor.visitArray_element_table(self)
            else:
                return visitor.visitChildren(self)




    def array_element_table(self):

        localctx = MysqlQueryParser.Array_element_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_array_element_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 800
            self.match(MysqlQueryParser.TABLE)
            self.state = 801
            self.match(MysqlQueryParser.T__0)
            self.state = 802
            self.insert_table_value_remove()
            self.state = 807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MysqlQueryParser.T__5:
                self.state = 803
                self.match(MysqlQueryParser.T__5)
                self.state = 804
                self.insert_table_value_remove()
                self.state = 809
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 810
            self.match(MysqlQueryParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_element_containerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTAINER(self):
            return self.getToken(MysqlQueryParser.CONTAINER, 0)

        def insert_container_value_remove(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Insert_container_value_removeContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Insert_container_value_removeContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_array_element_container

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArray_element_container" ):
                return visitor.visitArray_element_container(self)
            else:
                return visitor.visitChildren(self)




    def array_element_container(self):

        localctx = MysqlQueryParser.Array_element_containerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_array_element_container)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 812
            self.match(MysqlQueryParser.CONTAINER)
            self.state = 813
            self.match(MysqlQueryParser.T__0)
            self.state = 814
            self.insert_container_value_remove()
            self.state = 819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MysqlQueryParser.T__5:
                self.state = 815
                self.match(MysqlQueryParser.T__5)
                self.state = 816
                self.insert_container_value_remove()
                self.state = 821
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 822
            self.match(MysqlQueryParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_element_generatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GENERATOR(self):
            return self.getToken(MysqlQueryParser.GENERATOR, 0)

        def insert_generator_value_remove(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Insert_generator_value_removeContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Insert_generator_value_removeContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_array_element_generator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArray_element_generator" ):
                return visitor.visitArray_element_generator(self)
            else:
                return visitor.visitChildren(self)




    def array_element_generator(self):

        localctx = MysqlQueryParser.Array_element_generatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_array_element_generator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 824
            self.match(MysqlQueryParser.GENERATOR)
            self.state = 825
            self.match(MysqlQueryParser.T__0)
            self.state = 826
            self.insert_generator_value_remove()
            self.state = 831
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MysqlQueryParser.T__5:
                self.state = 827
                self.match(MysqlQueryParser.T__5)
                self.state = 828
                self.insert_generator_value_remove()
                self.state = 833
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 834
            self.match(MysqlQueryParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_array_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY(self):
            return self.getToken(MysqlQueryParser.ARRAY, 0)

        def array_element_string(self):
            return self.getTypedRuleContext(MysqlQueryParser.Array_element_stringContext,0)


        def array_element_number(self):
            return self.getTypedRuleContext(MysqlQueryParser.Array_element_numberContext,0)


        def array_element_range(self):
            return self.getTypedRuleContext(MysqlQueryParser.Array_element_rangeContext,0)


        def array_element_choice(self):
            return self.getTypedRuleContext(MysqlQueryParser.Array_element_choiceContext,0)


        def array_element_image(self):
            return self.getTypedRuleContext(MysqlQueryParser.Array_element_imageContext,0)


        def array_element_file(self):
            return self.getTypedRuleContext(MysqlQueryParser.Array_element_fileContext,0)


        def array_element_table(self):
            return self.getTypedRuleContext(MysqlQueryParser.Array_element_tableContext,0)


        def array_element_container(self):
            return self.getTypedRuleContext(MysqlQueryParser.Array_element_containerContext,0)


        def array_element_generator(self):
            return self.getTypedRuleContext(MysqlQueryParser.Array_element_generatorContext,0)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_insert_array_value

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_array_value" ):
                return visitor.visitInsert_array_value(self)
            else:
                return visitor.visitChildren(self)




    def insert_array_value(self):

        localctx = MysqlQueryParser.Insert_array_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_insert_array_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 836
            self.match(MysqlQueryParser.ARRAY)
            self.state = 846
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MysqlQueryParser.STRING]:
                self.state = 837
                self.array_element_string()
                pass
            elif token in [MysqlQueryParser.NUMBER]:
                self.state = 838
                self.array_element_number()
                pass
            elif token in [MysqlQueryParser.RANGE, MysqlQueryParser.ERROR]:
                self.state = 839
                self.array_element_range()
                pass
            elif token in [MysqlQueryParser.CHOICE]:
                self.state = 840
                self.array_element_choice()
                pass
            elif token in [MysqlQueryParser.IMAGE]:
                self.state = 841
                self.array_element_image()
                pass
            elif token in [MysqlQueryParser.FILE]:
                self.state = 842
                self.array_element_file()
                pass
            elif token in [MysqlQueryParser.TABLE]:
                self.state = 843
                self.array_element_table()
                pass
            elif token in [MysqlQueryParser.CONTAINER]:
                self.state = 844
                self.array_element_container()
                pass
            elif token in [MysqlQueryParser.GENERATOR]:
                self.state = 845
                self.array_element_generator()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Container_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insert_all_value(self):
            return self.getTypedRuleContext(MysqlQueryParser.Insert_all_valueContext,0)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_container_element

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContainer_element" ):
                return visitor.visitContainer_element(self)
            else:
                return visitor.visitChildren(self)




    def container_element(self):

        localctx = MysqlQueryParser.Container_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_container_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 848
            self.insert_all_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_container_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTAINER(self):
            return self.getToken(MysqlQueryParser.CONTAINER, 0)

        def container_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Container_elementContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Container_elementContext,i)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Column_nameContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_insert_container_value

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_container_value" ):
                return visitor.visitInsert_container_value(self)
            else:
                return visitor.visitChildren(self)




    def insert_container_value(self):

        localctx = MysqlQueryParser.Insert_container_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_insert_container_value)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 850
            self.match(MysqlQueryParser.CONTAINER)
            self.state = 859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MysqlQueryParser.ID:
                self.state = 851
                self.column_name()
                self.state = 856
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MysqlQueryParser.T__5:
                    self.state = 852
                    self.match(MysqlQueryParser.T__5)
                    self.state = 853
                    self.column_name()
                    self.state = 858
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 861
            self.match(MysqlQueryParser.T__3)
            self.state = 862
            self.container_element()
            self.state = 867
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MysqlQueryParser.T__5:
                self.state = 863
                self.match(MysqlQueryParser.T__5)
                self.state = 864
                self.container_element()
                self.state = 869
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 870
            self.match(MysqlQueryParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generator_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insert_string_value(self):
            return self.getTypedRuleContext(MysqlQueryParser.Insert_string_valueContext,0)


        def insert_number_value(self):
            return self.getTypedRuleContext(MysqlQueryParser.Insert_number_valueContext,0)


        def insert_range_value(self):
            return self.getTypedRuleContext(MysqlQueryParser.Insert_range_valueContext,0)


        def insert_choice_value(self):
            return self.getTypedRuleContext(MysqlQueryParser.Insert_choice_valueContext,0)


        def insert_image_value(self):
            return self.getTypedRuleContext(MysqlQueryParser.Insert_image_valueContext,0)


        def insert_file_value(self):
            return self.getTypedRuleContext(MysqlQueryParser.Insert_file_valueContext,0)


        def insert_table_value(self):
            return self.getTypedRuleContext(MysqlQueryParser.Insert_table_valueContext,0)


        def insert_array_value(self):
            return self.getTypedRuleContext(MysqlQueryParser.Insert_array_valueContext,0)


        def insert_container_value(self):
            return self.getTypedRuleContext(MysqlQueryParser.Insert_container_valueContext,0)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_generator_element

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenerator_element" ):
                return visitor.visitGenerator_element(self)
            else:
                return visitor.visitChildren(self)




    def generator_element(self):

        localctx = MysqlQueryParser.Generator_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_generator_element)
        try:
            self.state = 881
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MysqlQueryParser.STRING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 872
                self.insert_string_value()
                pass
            elif token in [MysqlQueryParser.NUMBER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 873
                self.insert_number_value()
                pass
            elif token in [MysqlQueryParser.RANGE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 874
                self.insert_range_value()
                pass
            elif token in [MysqlQueryParser.CHOICE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 875
                self.insert_choice_value()
                pass
            elif token in [MysqlQueryParser.IMAGE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 876
                self.insert_image_value()
                pass
            elif token in [MysqlQueryParser.FILE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 877
                self.insert_file_value()
                pass
            elif token in [MysqlQueryParser.TABLE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 878
                self.insert_table_value()
                pass
            elif token in [MysqlQueryParser.ARRAY]:
                self.enterOuterAlt(localctx, 8)
                self.state = 879
                self.insert_array_value()
                pass
            elif token in [MysqlQueryParser.CONTAINER]:
                self.enterOuterAlt(localctx, 9)
                self.state = 880
                self.insert_container_value()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_generator_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GENERATOR(self):
            return self.getToken(MysqlQueryParser.GENERATOR, 0)

        def column_name(self):
            return self.getTypedRuleContext(MysqlQueryParser.Column_nameContext,0)


        def generator_element(self):
            return self.getTypedRuleContext(MysqlQueryParser.Generator_elementContext,0)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_insert_generator_value

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_generator_value" ):
                return visitor.visitInsert_generator_value(self)
            else:
                return visitor.visitChildren(self)




    def insert_generator_value(self):

        localctx = MysqlQueryParser.Insert_generator_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_insert_generator_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 883
            self.match(MysqlQueryParser.GENERATOR)
            self.state = 884
            self.column_name()
            self.state = 885
            self.generator_element()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStatement(self):
            return self.getTypedRuleContext(MysqlQueryParser.SelectStatementContext,0)


        def describeStatement(self):
            return self.getTypedRuleContext(MysqlQueryParser.DescribeStatementContext,0)


        def createStatement(self):
            return self.getTypedRuleContext(MysqlQueryParser.CreateStatementContext,0)


        def dropStatement(self):
            return self.getTypedRuleContext(MysqlQueryParser.DropStatementContext,0)


        def insertStatement(self):
            return self.getTypedRuleContext(MysqlQueryParser.InsertStatementContext,0)


        def updateStatement(self):
            return self.getTypedRuleContext(MysqlQueryParser.UpdateStatementContext,0)


        def deleteStatement(self):
            return self.getTypedRuleContext(MysqlQueryParser.DeleteStatementContext,0)


        def alterStatement(self):
            return self.getTypedRuleContext(MysqlQueryParser.AlterStatementContext,0)


        def controlStatement(self):
            return self.getTypedRuleContext(MysqlQueryParser.ControlStatementContext,0)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_simpleStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleStatement" ):
                return visitor.visitSimpleStatement(self)
            else:
                return visitor.visitChildren(self)




    def simpleStatement(self):

        localctx = MysqlQueryParser.SimpleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_simpleStatement)
        try:
            self.state = 896
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 887
                self.selectStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 888
                self.describeStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 889
                self.createStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 890
                self.dropStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 891
                self.insertStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 892
                self.updateStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 893
                self.deleteStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 894
                self.alterStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 895
                self.controlStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ControlStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def create_role(self):
            return self.getTypedRuleContext(MysqlQueryParser.Create_roleContext,0)


        def drop_role(self):
            return self.getTypedRuleContext(MysqlQueryParser.Drop_roleContext,0)


        def rename_role(self):
            return self.getTypedRuleContext(MysqlQueryParser.Rename_roleContext,0)


        def grant_privilege_to_role(self):
            return self.getTypedRuleContext(MysqlQueryParser.Grant_privilege_to_roleContext,0)


        def revoke_privilege_from_role(self):
            return self.getTypedRuleContext(MysqlQueryParser.Revoke_privilege_from_roleContext,0)


        def show_role(self):
            return self.getTypedRuleContext(MysqlQueryParser.Show_roleContext,0)


        def create_user(self):
            return self.getTypedRuleContext(MysqlQueryParser.Create_userContext,0)


        def drop_user(self):
            return self.getTypedRuleContext(MysqlQueryParser.Drop_userContext,0)


        def rename_user(self):
            return self.getTypedRuleContext(MysqlQueryParser.Rename_userContext,0)


        def update_user_password(self):
            return self.getTypedRuleContext(MysqlQueryParser.Update_user_passwordContext,0)


        def grant_role_to_user(self):
            return self.getTypedRuleContext(MysqlQueryParser.Grant_role_to_userContext,0)


        def revoke_role_from_user(self):
            return self.getTypedRuleContext(MysqlQueryParser.Revoke_role_from_userContext,0)


        def show_user(self):
            return self.getTypedRuleContext(MysqlQueryParser.Show_userContext,0)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_controlStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitControlStatement" ):
                return visitor.visitControlStatement(self)
            else:
                return visitor.visitChildren(self)




    def controlStatement(self):

        localctx = MysqlQueryParser.ControlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_controlStatement)
        try:
            self.state = 911
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 898
                self.create_role()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 899
                self.drop_role()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 900
                self.rename_role()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 901
                self.grant_privilege_to_role()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 902
                self.revoke_privilege_from_role()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 903
                self.show_role()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 904
                self.create_user()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 905
                self.drop_user()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 906
                self.rename_user()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 907
                self.update_user_password()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 908
                self.grant_role_to_user()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 909
                self.revoke_role_from_user()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 910
                self.show_user()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Role_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MysqlQueryParser.ID, 0)

        def getRuleIndex(self):
            return MysqlQueryParser.RULE_role_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRole_name" ):
                return visitor.visitRole_name(self)
            else:
                return visitor.visitChildren(self)




    def role_name(self):

        localctx = MysqlQueryParser.Role_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_role_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 913
            self.match(MysqlQueryParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class User_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MysqlQueryParser.ID, 0)

        def getRuleIndex(self):
            return MysqlQueryParser.RULE_user_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUser_name" ):
                return visitor.visitUser_name(self)
            else:
                return visitor.visitChildren(self)




    def user_name(self):

        localctx = MysqlQueryParser.User_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_user_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 915
            self.match(MysqlQueryParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PasswordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MysqlQueryParser.ID, 0)

        def getRuleIndex(self):
            return MysqlQueryParser.RULE_password

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPassword" ):
                return visitor.visitPassword(self)
            else:
                return visitor.visitChildren(self)




    def password(self):

        localctx = MysqlQueryParser.PasswordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_password)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 917
            self.match(MysqlQueryParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ActionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(MysqlQueryParser.CREATE, 0)

        def DROP(self):
            return self.getToken(MysqlQueryParser.DROP, 0)

        def ALTER(self):
            return self.getToken(MysqlQueryParser.ALTER, 0)

        def DESCRIBE(self):
            return self.getToken(MysqlQueryParser.DESCRIBE, 0)

        def INSERT(self):
            return self.getToken(MysqlQueryParser.INSERT, 0)

        def DELETE(self):
            return self.getToken(MysqlQueryParser.DELETE, 0)

        def UPDATE(self):
            return self.getToken(MysqlQueryParser.UPDATE, 0)

        def SELECT(self):
            return self.getToken(MysqlQueryParser.SELECT, 0)

        def RENAME(self):
            return self.getToken(MysqlQueryParser.RENAME, 0)

        def SHOW(self):
            return self.getToken(MysqlQueryParser.SHOW, 0)

        def ALL(self):
            return self.getToken(MysqlQueryParser.ALL, 0)

        def getRuleIndex(self):
            return MysqlQueryParser.RULE_action

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAction" ):
                return visitor.visitAction(self)
            else:
                return visitor.visitChildren(self)




    def action(self):

        localctx = MysqlQueryParser.ActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_action)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 919
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MysqlQueryParser.SELECT) | (1 << MysqlQueryParser.ALL) | (1 << MysqlQueryParser.DESCRIBE) | (1 << MysqlQueryParser.CREATE))) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (MysqlQueryParser.DROP - 68)) | (1 << (MysqlQueryParser.INSERT - 68)) | (1 << (MysqlQueryParser.DELETE - 68)) | (1 << (MysqlQueryParser.UPDATE - 68)) | (1 << (MysqlQueryParser.ALTER - 68)) | (1 << (MysqlQueryParser.SHOW - 68)) | (1 << (MysqlQueryParser.RENAME - 68)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TEMPLATE(self):
            return self.getToken(MysqlQueryParser.TEMPLATE, 0)

        def templateName(self):
            return self.getTypedRuleContext(MysqlQueryParser.TemplateNameContext,0)


        def TEMPLATES(self):
            return self.getToken(MysqlQueryParser.TEMPLATES, 0)

        def ROLE(self):
            return self.getToken(MysqlQueryParser.ROLE, 0)

        def role_name(self):
            return self.getTypedRuleContext(MysqlQueryParser.Role_nameContext,0)


        def ROLES(self):
            return self.getToken(MysqlQueryParser.ROLES, 0)

        def WITH(self):
            return self.getToken(MysqlQueryParser.WITH, 0)

        def GRANT(self):
            return self.getToken(MysqlQueryParser.GRANT, 0)

        def USER(self):
            return self.getToken(MysqlQueryParser.USER, 0)

        def user_name(self):
            return self.getTypedRuleContext(MysqlQueryParser.User_nameContext,0)


        def PASSWORD(self):
            return self.getToken(MysqlQueryParser.PASSWORD, 0)

        def USERS(self):
            return self.getToken(MysqlQueryParser.USERS, 0)

        def getRuleIndex(self):
            return MysqlQueryParser.RULE_resource

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResource" ):
                return visitor.visitResource(self)
            else:
                return visitor.visitChildren(self)




    def resource(self):

        localctx = MysqlQueryParser.ResourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_resource)
        self._la = 0 # Token type
        try:
            self.state = 952
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MysqlQueryParser.TEMPLATE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 921
                self.match(MysqlQueryParser.TEMPLATE)
                self.state = 923
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MysqlQueryParser.ID:
                    self.state = 922
                    self.templateName()


                pass
            elif token in [MysqlQueryParser.TEMPLATES]:
                self.enterOuterAlt(localctx, 2)
                self.state = 925
                self.match(MysqlQueryParser.TEMPLATES)
                pass
            elif token in [MysqlQueryParser.ROLE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 926
                self.match(MysqlQueryParser.ROLE)
                self.state = 928
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MysqlQueryParser.ID:
                    self.state = 927
                    self.role_name()


                pass
            elif token in [MysqlQueryParser.ROLES]:
                self.enterOuterAlt(localctx, 4)
                self.state = 930
                self.match(MysqlQueryParser.ROLES)
                self.state = 933
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MysqlQueryParser.WITH:
                    self.state = 931
                    self.match(MysqlQueryParser.WITH)
                    self.state = 932
                    self.match(MysqlQueryParser.GRANT)


                pass
            elif token in [MysqlQueryParser.USER]:
                self.enterOuterAlt(localctx, 5)
                self.state = 935
                self.match(MysqlQueryParser.USER)
                self.state = 937
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MysqlQueryParser.ID:
                    self.state = 936
                    self.user_name()


                self.state = 943
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                if la_ == 1:
                    self.state = 939
                    self.match(MysqlQueryParser.WITH)
                    self.state = 940
                    self.match(MysqlQueryParser.ROLE)

                elif la_ == 2:
                    self.state = 941
                    self.match(MysqlQueryParser.WITH)
                    self.state = 942
                    self.match(MysqlQueryParser.PASSWORD)


                pass
            elif token in [MysqlQueryParser.USERS]:
                self.enterOuterAlt(localctx, 6)
                self.state = 945
                self.match(MysqlQueryParser.USERS)
                self.state = 950
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
                if la_ == 1:
                    self.state = 946
                    self.match(MysqlQueryParser.WITH)
                    self.state = 947
                    self.match(MysqlQueryParser.ROLE)

                elif la_ == 2:
                    self.state = 948
                    self.match(MysqlQueryParser.WITH)
                    self.state = 949
                    self.match(MysqlQueryParser.PASSWORD)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def action(self):
            return self.getTypedRuleContext(MysqlQueryParser.ActionContext,0)


        def ON(self):
            return self.getToken(MysqlQueryParser.ON, 0)

        def resource(self):
            return self.getTypedRuleContext(MysqlQueryParser.ResourceContext,0)


        def ALL(self):
            return self.getToken(MysqlQueryParser.ALL, 0)

        def PRIVILEGES(self):
            return self.getToken(MysqlQueryParser.PRIVILEGES, 0)

        def getRuleIndex(self):
            return MysqlQueryParser.RULE_privilege

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivilege" ):
                return visitor.visitPrivilege(self)
            else:
                return visitor.visitChildren(self)




    def privilege(self):

        localctx = MysqlQueryParser.PrivilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_privilege)
        try:
            self.state = 960
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 954
                self.action()
                self.state = 955
                self.match(MysqlQueryParser.ON)
                self.state = 956
                self.resource()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 958
                self.match(MysqlQueryParser.ALL)
                self.state = 959
                self.match(MysqlQueryParser.PRIVILEGES)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_roleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(MysqlQueryParser.CREATE, 0)

        def ROLE(self):
            return self.getToken(MysqlQueryParser.ROLE, 0)

        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Role_nameContext,i)


        def WITH(self):
            return self.getToken(MysqlQueryParser.WITH, 0)

        def privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.PrivilegeContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.PrivilegeContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_create_role

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_role" ):
                return visitor.visitCreate_role(self)
            else:
                return visitor.visitChildren(self)




    def create_role(self):

        localctx = MysqlQueryParser.Create_roleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_create_role)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 962
            self.match(MysqlQueryParser.CREATE)
            self.state = 963
            self.match(MysqlQueryParser.ROLE)
            self.state = 964
            self.role_name()
            self.state = 965
            self.match(MysqlQueryParser.WITH)
            self.state = 974
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MysqlQueryParser.ID:
                self.state = 966
                self.role_name()
                self.state = 971
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,73,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 967
                        self.match(MysqlQueryParser.T__5)
                        self.state = 968
                        self.role_name() 
                    self.state = 973
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,73,self._ctx)



            self.state = 977
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MysqlQueryParser.T__5:
                self.state = 976
                self.match(MysqlQueryParser.T__5)


            self.state = 987
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MysqlQueryParser.SELECT) | (1 << MysqlQueryParser.ALL) | (1 << MysqlQueryParser.DESCRIBE) | (1 << MysqlQueryParser.CREATE))) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (MysqlQueryParser.DROP - 68)) | (1 << (MysqlQueryParser.INSERT - 68)) | (1 << (MysqlQueryParser.DELETE - 68)) | (1 << (MysqlQueryParser.UPDATE - 68)) | (1 << (MysqlQueryParser.ALTER - 68)) | (1 << (MysqlQueryParser.SHOW - 68)) | (1 << (MysqlQueryParser.RENAME - 68)))) != 0):
                self.state = 979
                self.privilege()
                self.state = 984
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MysqlQueryParser.T__5:
                    self.state = 980
                    self.match(MysqlQueryParser.T__5)
                    self.state = 981
                    self.privilege()
                    self.state = 986
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_roleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(MysqlQueryParser.DROP, 0)

        def ROLE(self):
            return self.getToken(MysqlQueryParser.ROLE, 0)

        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Role_nameContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_drop_role

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_role" ):
                return visitor.visitDrop_role(self)
            else:
                return visitor.visitChildren(self)




    def drop_role(self):

        localctx = MysqlQueryParser.Drop_roleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_drop_role)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 989
            self.match(MysqlQueryParser.DROP)
            self.state = 990
            self.match(MysqlQueryParser.ROLE)
            self.state = 991
            self.role_name()
            self.state = 996
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MysqlQueryParser.T__5:
                self.state = 992
                self.match(MysqlQueryParser.T__5)
                self.state = 993
                self.role_name()
                self.state = 998
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rename_roleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME(self):
            return self.getToken(MysqlQueryParser.RENAME, 0)

        def ROLE(self):
            return self.getToken(MysqlQueryParser.ROLE, 0)

        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Role_nameContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_rename_role

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRename_role" ):
                return visitor.visitRename_role(self)
            else:
                return visitor.visitChildren(self)




    def rename_role(self):

        localctx = MysqlQueryParser.Rename_roleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_rename_role)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 999
            self.match(MysqlQueryParser.RENAME)
            self.state = 1000
            self.match(MysqlQueryParser.ROLE)
            self.state = 1001
            self.role_name()
            self.state = 1002
            self.match(MysqlQueryParser.T__5)
            self.state = 1003
            self.role_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_privilege_to_roleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRANT(self):
            return self.getToken(MysqlQueryParser.GRANT, 0)

        def privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.PrivilegeContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.PrivilegeContext,i)


        def TO(self):
            return self.getToken(MysqlQueryParser.TO, 0)

        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Role_nameContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_grant_privilege_to_role

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrant_privilege_to_role" ):
                return visitor.visitGrant_privilege_to_role(self)
            else:
                return visitor.visitChildren(self)




    def grant_privilege_to_role(self):

        localctx = MysqlQueryParser.Grant_privilege_to_roleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_grant_privilege_to_role)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1005
            self.match(MysqlQueryParser.GRANT)
            self.state = 1027
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.state = 1006
                self.privilege()
                self.state = 1011
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MysqlQueryParser.T__5:
                    self.state = 1007
                    self.match(MysqlQueryParser.T__5)
                    self.state = 1008
                    self.privilege()
                    self.state = 1013
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1014
                self.match(MysqlQueryParser.TO)
                self.state = 1015
                self.role_name()
                pass

            elif la_ == 2:
                self.state = 1017
                self.privilege()
                self.state = 1018
                self.match(MysqlQueryParser.TO)
                self.state = 1019
                self.role_name()
                self.state = 1024
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MysqlQueryParser.T__5:
                    self.state = 1020
                    self.match(MysqlQueryParser.T__5)
                    self.state = 1021
                    self.role_name()
                    self.state = 1026
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Revoke_privilege_from_roleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REVOKE(self):
            return self.getToken(MysqlQueryParser.REVOKE, 0)

        def privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.PrivilegeContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.PrivilegeContext,i)


        def FROM(self):
            return self.getToken(MysqlQueryParser.FROM, 0)

        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Role_nameContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_revoke_privilege_from_role

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRevoke_privilege_from_role" ):
                return visitor.visitRevoke_privilege_from_role(self)
            else:
                return visitor.visitChildren(self)




    def revoke_privilege_from_role(self):

        localctx = MysqlQueryParser.Revoke_privilege_from_roleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_revoke_privilege_from_role)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1029
            self.match(MysqlQueryParser.REVOKE)
            self.state = 1051
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.state = 1030
                self.privilege()
                self.state = 1035
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MysqlQueryParser.T__5:
                    self.state = 1031
                    self.match(MysqlQueryParser.T__5)
                    self.state = 1032
                    self.privilege()
                    self.state = 1037
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1038
                self.match(MysqlQueryParser.FROM)
                self.state = 1039
                self.role_name()
                pass

            elif la_ == 2:
                self.state = 1041
                self.privilege()
                self.state = 1042
                self.match(MysqlQueryParser.FROM)
                self.state = 1043
                self.role_name()
                self.state = 1048
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MysqlQueryParser.T__5:
                    self.state = 1044
                    self.match(MysqlQueryParser.T__5)
                    self.state = 1045
                    self.role_name()
                    self.state = 1050
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_roleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(MysqlQueryParser.SHOW, 0)

        def ROLE(self):
            return self.getToken(MysqlQueryParser.ROLE, 0)

        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Role_nameContext,i)


        def ROLES(self):
            return self.getToken(MysqlQueryParser.ROLES, 0)

        def WITH(self):
            return self.getToken(MysqlQueryParser.WITH, 0)

        def GRANT(self):
            return self.getToken(MysqlQueryParser.GRANT, 0)

        def getRuleIndex(self):
            return MysqlQueryParser.RULE_show_role

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShow_role" ):
                return visitor.visitShow_role(self)
            else:
                return visitor.visitChildren(self)




    def show_role(self):

        localctx = MysqlQueryParser.Show_roleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_show_role)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1053
            self.match(MysqlQueryParser.SHOW)
            self.state = 1068
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MysqlQueryParser.ROLE]:
                self.state = 1054
                self.match(MysqlQueryParser.ROLE)
                self.state = 1055
                self.role_name()
                self.state = 1060
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MysqlQueryParser.T__5:
                    self.state = 1056
                    self.match(MysqlQueryParser.T__5)
                    self.state = 1057
                    self.role_name()
                    self.state = 1062
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [MysqlQueryParser.ROLES]:
                self.state = 1063
                self.match(MysqlQueryParser.ROLES)
                self.state = 1066
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MysqlQueryParser.WITH:
                    self.state = 1064
                    self.match(MysqlQueryParser.WITH)
                    self.state = 1065
                    self.match(MysqlQueryParser.GRANT)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_userContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(MysqlQueryParser.CREATE, 0)

        def USER(self):
            return self.getToken(MysqlQueryParser.USER, 0)

        def user_name(self):
            return self.getTypedRuleContext(MysqlQueryParser.User_nameContext,0)


        def WITH(self):
            return self.getToken(MysqlQueryParser.WITH, 0)

        def PASSWORD(self):
            return self.getToken(MysqlQueryParser.PASSWORD, 0)

        def password(self):
            return self.getTypedRuleContext(MysqlQueryParser.PasswordContext,0)


        def ROLE(self):
            return self.getToken(MysqlQueryParser.ROLE, 0)

        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Role_nameContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_create_user

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_user" ):
                return visitor.visitCreate_user(self)
            else:
                return visitor.visitChildren(self)




    def create_user(self):

        localctx = MysqlQueryParser.Create_userContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_create_user)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1070
            self.match(MysqlQueryParser.CREATE)
            self.state = 1071
            self.match(MysqlQueryParser.USER)
            self.state = 1072
            self.user_name()
            self.state = 1073
            self.match(MysqlQueryParser.WITH)
            self.state = 1074
            self.match(MysqlQueryParser.PASSWORD)
            self.state = 1075
            self.password()
            self.state = 1076
            self.match(MysqlQueryParser.T__5)
            self.state = 1077
            self.match(MysqlQueryParser.ROLE)
            self.state = 1078
            self.role_name()
            self.state = 1083
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MysqlQueryParser.T__5:
                self.state = 1079
                self.match(MysqlQueryParser.T__5)
                self.state = 1080
                self.role_name()
                self.state = 1085
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_userContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(MysqlQueryParser.DROP, 0)

        def USER(self):
            return self.getToken(MysqlQueryParser.USER, 0)

        def user_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.User_nameContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.User_nameContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_drop_user

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_user" ):
                return visitor.visitDrop_user(self)
            else:
                return visitor.visitChildren(self)




    def drop_user(self):

        localctx = MysqlQueryParser.Drop_userContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_drop_user)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1086
            self.match(MysqlQueryParser.DROP)
            self.state = 1087
            self.match(MysqlQueryParser.USER)
            self.state = 1088
            self.user_name()
            self.state = 1093
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MysqlQueryParser.T__5:
                self.state = 1089
                self.match(MysqlQueryParser.T__5)
                self.state = 1090
                self.user_name()
                self.state = 1095
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rename_userContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME(self):
            return self.getToken(MysqlQueryParser.RENAME, 0)

        def USER(self):
            return self.getToken(MysqlQueryParser.USER, 0)

        def user_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.User_nameContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.User_nameContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_rename_user

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRename_user" ):
                return visitor.visitRename_user(self)
            else:
                return visitor.visitChildren(self)




    def rename_user(self):

        localctx = MysqlQueryParser.Rename_userContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_rename_user)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1096
            self.match(MysqlQueryParser.RENAME)
            self.state = 1097
            self.match(MysqlQueryParser.USER)
            self.state = 1098
            self.user_name()
            self.state = 1099
            self.match(MysqlQueryParser.T__5)
            self.state = 1100
            self.user_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_user_passwordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(MysqlQueryParser.UPDATE, 0)

        def USER(self):
            return self.getToken(MysqlQueryParser.USER, 0)

        def user_name(self):
            return self.getTypedRuleContext(MysqlQueryParser.User_nameContext,0)


        def WITH(self):
            return self.getToken(MysqlQueryParser.WITH, 0)

        def PASSWORD(self):
            return self.getToken(MysqlQueryParser.PASSWORD, 0)

        def password(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.PasswordContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.PasswordContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_update_user_password

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate_user_password" ):
                return visitor.visitUpdate_user_password(self)
            else:
                return visitor.visitChildren(self)




    def update_user_password(self):

        localctx = MysqlQueryParser.Update_user_passwordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_update_user_password)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1102
            self.match(MysqlQueryParser.UPDATE)
            self.state = 1103
            self.match(MysqlQueryParser.USER)
            self.state = 1104
            self.user_name()
            self.state = 1105
            self.match(MysqlQueryParser.WITH)
            self.state = 1106
            self.match(MysqlQueryParser.PASSWORD)
            self.state = 1107
            self.password()
            self.state = 1108
            self.match(MysqlQueryParser.T__5)
            self.state = 1109
            self.password()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_role_to_userContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRANT(self):
            return self.getToken(MysqlQueryParser.GRANT, 0)

        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Role_nameContext,i)


        def TO(self):
            return self.getToken(MysqlQueryParser.TO, 0)

        def user_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.User_nameContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.User_nameContext,i)


        def PUBLIC(self):
            return self.getToken(MysqlQueryParser.PUBLIC, 0)

        def getRuleIndex(self):
            return MysqlQueryParser.RULE_grant_role_to_user

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrant_role_to_user" ):
                return visitor.visitGrant_role_to_user(self)
            else:
                return visitor.visitChildren(self)




    def grant_role_to_user(self):

        localctx = MysqlQueryParser.Grant_role_to_userContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_grant_role_to_user)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1111
            self.match(MysqlQueryParser.GRANT)
            self.state = 1138
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.state = 1112
                self.role_name()
                self.state = 1117
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MysqlQueryParser.T__5:
                    self.state = 1113
                    self.match(MysqlQueryParser.T__5)
                    self.state = 1114
                    self.role_name()
                    self.state = 1119
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1120
                self.match(MysqlQueryParser.TO)
                self.state = 1123
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MysqlQueryParser.ID]:
                    self.state = 1121
                    self.user_name()
                    pass
                elif token in [MysqlQueryParser.PUBLIC]:
                    self.state = 1122
                    self.match(MysqlQueryParser.PUBLIC)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.state = 1125
                self.role_name()
                self.state = 1126
                self.match(MysqlQueryParser.TO)
                self.state = 1136
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MysqlQueryParser.ID]:
                    self.state = 1127
                    self.user_name()
                    self.state = 1132
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==MysqlQueryParser.T__5:
                        self.state = 1128
                        self.match(MysqlQueryParser.T__5)
                        self.state = 1129
                        self.user_name()
                        self.state = 1134
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [MysqlQueryParser.PUBLIC]:
                    self.state = 1135
                    self.match(MysqlQueryParser.PUBLIC)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Revoke_role_from_userContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REVOKE(self):
            return self.getToken(MysqlQueryParser.REVOKE, 0)

        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Role_nameContext,i)


        def FROM(self):
            return self.getToken(MysqlQueryParser.FROM, 0)

        def user_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.User_nameContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.User_nameContext,i)


        def PUBLIC(self):
            return self.getToken(MysqlQueryParser.PUBLIC, 0)

        def getRuleIndex(self):
            return MysqlQueryParser.RULE_revoke_role_from_user

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRevoke_role_from_user" ):
                return visitor.visitRevoke_role_from_user(self)
            else:
                return visitor.visitChildren(self)




    def revoke_role_from_user(self):

        localctx = MysqlQueryParser.Revoke_role_from_userContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_revoke_role_from_user)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1140
            self.match(MysqlQueryParser.REVOKE)
            self.state = 1167
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.state = 1141
                self.role_name()
                self.state = 1146
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MysqlQueryParser.T__5:
                    self.state = 1142
                    self.match(MysqlQueryParser.T__5)
                    self.state = 1143
                    self.role_name()
                    self.state = 1148
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1149
                self.match(MysqlQueryParser.FROM)
                self.state = 1152
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MysqlQueryParser.ID]:
                    self.state = 1150
                    self.user_name()
                    pass
                elif token in [MysqlQueryParser.PUBLIC]:
                    self.state = 1151
                    self.match(MysqlQueryParser.PUBLIC)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.state = 1154
                self.role_name()
                self.state = 1155
                self.match(MysqlQueryParser.FROM)
                self.state = 1165
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MysqlQueryParser.ID]:
                    self.state = 1156
                    self.user_name()
                    self.state = 1161
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==MysqlQueryParser.T__5:
                        self.state = 1157
                        self.match(MysqlQueryParser.T__5)
                        self.state = 1158
                        self.user_name()
                        self.state = 1163
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [MysqlQueryParser.PUBLIC]:
                    self.state = 1164
                    self.match(MysqlQueryParser.PUBLIC)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_userContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(MysqlQueryParser.SHOW, 0)

        def WITH(self):
            return self.getToken(MysqlQueryParser.WITH, 0)

        def USER(self):
            return self.getToken(MysqlQueryParser.USER, 0)

        def user_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.User_nameContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.User_nameContext,i)


        def USERS(self):
            return self.getToken(MysqlQueryParser.USERS, 0)

        def PASSWORD(self):
            return self.getToken(MysqlQueryParser.PASSWORD, 0)

        def ROLE(self):
            return self.getToken(MysqlQueryParser.ROLE, 0)

        def getRuleIndex(self):
            return MysqlQueryParser.RULE_show_user

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShow_user" ):
                return visitor.visitShow_user(self)
            else:
                return visitor.visitChildren(self)




    def show_user(self):

        localctx = MysqlQueryParser.Show_userContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_show_user)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1169
            self.match(MysqlQueryParser.SHOW)
            self.state = 1180
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MysqlQueryParser.USER]:
                self.state = 1170
                self.match(MysqlQueryParser.USER)
                self.state = 1171
                self.user_name()
                self.state = 1176
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MysqlQueryParser.T__5:
                    self.state = 1172
                    self.match(MysqlQueryParser.T__5)
                    self.state = 1173
                    self.user_name()
                    self.state = 1178
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [MysqlQueryParser.USERS]:
                self.state = 1179
                self.match(MysqlQueryParser.USERS)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1182
            self.match(MysqlQueryParser.WITH)
            self.state = 1193
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MysqlQueryParser.PASSWORD]:
                self.state = 1183
                self.match(MysqlQueryParser.PASSWORD)
                self.state = 1186
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MysqlQueryParser.T__5:
                    self.state = 1184
                    self.match(MysqlQueryParser.T__5)
                    self.state = 1185
                    self.match(MysqlQueryParser.ROLE)


                pass
            elif token in [MysqlQueryParser.ROLE]:
                self.state = 1188
                self.match(MysqlQueryParser.ROLE)
                self.state = 1191
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MysqlQueryParser.T__5:
                    self.state = 1189
                    self.match(MysqlQueryParser.T__5)
                    self.state = 1190
                    self.match(MysqlQueryParser.PASSWORD)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(MysqlQueryParser.ALTER, 0)

        def TEMPLATE(self):
            return self.getToken(MysqlQueryParser.TEMPLATE, 0)

        def templateName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.TemplateNameContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.TemplateNameContext,i)


        def alterStatements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.AlterStatementsContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.AlterStatementsContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_alterStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterStatement" ):
                return visitor.visitAlterStatement(self)
            else:
                return visitor.visitChildren(self)




    def alterStatement(self):

        localctx = MysqlQueryParser.AlterStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_alterStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1195
            self.match(MysqlQueryParser.ALTER)
            self.state = 1196
            self.match(MysqlQueryParser.TEMPLATE)
            self.state = 1197
            self.templateName()
            self.state = 1200
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MysqlQueryParser.T__5:
                self.state = 1198
                self.match(MysqlQueryParser.T__5)
                self.state = 1199
                self.templateName()


            self.state = 1202
            self.alterStatements()
            self.state = 1207
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MysqlQueryParser.T__5:
                self.state = 1203
                self.match(MysqlQueryParser.T__5)
                self.state = 1204
                self.alterStatements()
                self.state = 1209
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def add_content(self):
            return self.getTypedRuleContext(MysqlQueryParser.Add_contentContext,0)


        def drop_content(self):
            return self.getTypedRuleContext(MysqlQueryParser.Drop_contentContext,0)


        def alter_content(self):
            return self.getTypedRuleContext(MysqlQueryParser.Alter_contentContext,0)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_alterStatements

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterStatements" ):
                return visitor.visitAlterStatements(self)
            else:
                return visitor.visitChildren(self)




    def alterStatements(self):

        localctx = MysqlQueryParser.AlterStatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_alterStatements)
        try:
            self.state = 1213
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MysqlQueryParser.ADD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1210
                self.add_content()
                pass
            elif token in [MysqlQueryParser.DROP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1211
                self.drop_content()
                pass
            elif token in [MysqlQueryParser.ALTER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1212
                self.alter_content()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_contentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(MysqlQueryParser.ADD, 0)

        def add_contents(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Add_contentsContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Add_contentsContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_add_content

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdd_content" ):
                return visitor.visitAdd_content(self)
            else:
                return visitor.visitChildren(self)




    def add_content(self):

        localctx = MysqlQueryParser.Add_contentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_add_content)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1215
            self.match(MysqlQueryParser.ADD)
            self.state = 1216
            self.add_contents()
            self.state = 1221
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,108,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1217
                    self.match(MysqlQueryParser.T__5)
                    self.state = 1218
                    self.add_contents() 
                self.state = 1223
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,108,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_contentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def create_all_type(self):
            return self.getTypedRuleContext(MysqlQueryParser.Create_all_typeContext,0)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_add_contents

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdd_contents" ):
                return visitor.visitAdd_contents(self)
            else:
                return visitor.visitChildren(self)




    def add_contents(self):

        localctx = MysqlQueryParser.Add_contentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_add_contents)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1224
            self.create_all_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_contentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(MysqlQueryParser.DROP, 0)

        def drop_contents(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Drop_contentsContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Drop_contentsContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_drop_content

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_content" ):
                return visitor.visitDrop_content(self)
            else:
                return visitor.visitChildren(self)




    def drop_content(self):

        localctx = MysqlQueryParser.Drop_contentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_drop_content)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1226
            self.match(MysqlQueryParser.DROP)
            self.state = 1227
            self.drop_contents()
            self.state = 1232
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1228
                    self.match(MysqlQueryParser.T__5)
                    self.state = 1229
                    self.drop_contents() 
                self.state = 1234
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_contentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(MysqlQueryParser.Column_nameContext,0)


        def unit(self):
            return self.getTypedRuleContext(MysqlQueryParser.UnitContext,0)


        def choice_type(self):
            return self.getTypedRuleContext(MysqlQueryParser.Choice_typeContext,0)


        def choice_group_type(self):
            return self.getTypedRuleContext(MysqlQueryParser.Choice_group_typeContext,0)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_drop_contents

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_contents" ):
                return visitor.visitDrop_contents(self)
            else:
                return visitor.visitChildren(self)




    def drop_contents(self):

        localctx = MysqlQueryParser.Drop_contentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_drop_contents)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1235
            self.column_name()
            self.state = 1238
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MysqlQueryParser.OPTION]:
                self.state = 1236
                self.choice_type()
                pass
            elif token in [MysqlQueryParser.OPTIONGROUP]:
                self.state = 1237
                self.choice_group_type()
                pass
            elif token in [MysqlQueryParser.EOF, MysqlQueryParser.T__3, MysqlQueryParser.T__5]:
                pass
            else:
                pass
            self.state = 1240
            self.unit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_contentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(MysqlQueryParser.ALTER, 0)

        def alter_contents(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Alter_contentsContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Alter_contentsContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_alter_content

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_content" ):
                return visitor.visitAlter_content(self)
            else:
                return visitor.visitChildren(self)




    def alter_content(self):

        localctx = MysqlQueryParser.Alter_contentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_alter_content)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1242
            self.match(MysqlQueryParser.ALTER)
            self.state = 1243
            self.alter_contents()
            self.state = 1248
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,111,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1244
                    self.match(MysqlQueryParser.T__5)
                    self.state = 1245
                    self.alter_contents() 
                self.state = 1250
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,111,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_contentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Column_nameContext,i)


        def unit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.UnitContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.UnitContext,i)


        def choice_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Choice_typeContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Choice_typeContext,i)


        def choice_group_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Choice_group_typeContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Choice_group_typeContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_alter_contents

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_contents" ):
                return visitor.visitAlter_contents(self)
            else:
                return visitor.visitChildren(self)




    def alter_contents(self):

        localctx = MysqlQueryParser.Alter_contentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_alter_contents)
        try:
            self.state = 1270
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1251
                self.column_name()
                self.state = 1252
                self.match(MysqlQueryParser.T__5)
                self.state = 1253
                self.column_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1255
                self.column_name()
                self.state = 1256
                self.unit()
                self.state = 1257
                self.match(MysqlQueryParser.T__5)
                self.state = 1258
                self.unit()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1260
                self.column_name()
                self.state = 1263
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MysqlQueryParser.OPTION]:
                    self.state = 1261
                    self.choice_type()
                    pass
                elif token in [MysqlQueryParser.OPTIONGROUP]:
                    self.state = 1262
                    self.choice_group_type()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1265
                self.match(MysqlQueryParser.T__5)
                self.state = 1268
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MysqlQueryParser.OPTION]:
                    self.state = 1266
                    self.choice_type()
                    pass
                elif token in [MysqlQueryParser.OPTIONGROUP]:
                    self.state = 1267
                    self.choice_group_type()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(MysqlQueryParser.UPDATE, 0)

        def templateName(self):
            return self.getTypedRuleContext(MysqlQueryParser.TemplateNameContext,0)


        def SET(self):
            return self.getToken(MysqlQueryParser.SET, 0)

        def column_name(self):
            return self.getTypedRuleContext(MysqlQueryParser.Column_nameContext,0)


        def value(self):
            return self.getTypedRuleContext(MysqlQueryParser.ValueContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(MysqlQueryParser.WhereClauseContext,0)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_updateStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdateStatement" ):
                return visitor.visitUpdateStatement(self)
            else:
                return visitor.visitChildren(self)




    def updateStatement(self):

        localctx = MysqlQueryParser.UpdateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_updateStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1272
            self.match(MysqlQueryParser.UPDATE)
            self.state = 1273
            self.templateName()
            self.state = 1274
            self.match(MysqlQueryParser.SET)
            self.state = 1275
            self.column_name()
            self.state = 1276
            self.match(MysqlQueryParser.T__6)
            self.state = 1277
            self.value()
            self.state = 1279
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MysqlQueryParser.WHERE:
                self.state = 1278
                self.whereClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(MysqlQueryParser.DELETE, 0)

        def FROM(self):
            return self.getToken(MysqlQueryParser.FROM, 0)

        def templateName(self):
            return self.getTypedRuleContext(MysqlQueryParser.TemplateNameContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(MysqlQueryParser.WhereClauseContext,0)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_deleteStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeleteStatement" ):
                return visitor.visitDeleteStatement(self)
            else:
                return visitor.visitChildren(self)




    def deleteStatement(self):

        localctx = MysqlQueryParser.DeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_deleteStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1281
            self.match(MysqlQueryParser.DELETE)
            self.state = 1282
            self.match(MysqlQueryParser.FROM)
            self.state = 1283
            self.templateName()
            self.state = 1285
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MysqlQueryParser.WHERE:
                self.state = 1284
                self.whereClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(MysqlQueryParser.DROP, 0)

        def TEMPLATE(self):
            return self.getToken(MysqlQueryParser.TEMPLATE, 0)

        def templateName(self):
            return self.getTypedRuleContext(MysqlQueryParser.TemplateNameContext,0)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_dropStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropStatement" ):
                return visitor.visitDropStatement(self)
            else:
                return visitor.visitChildren(self)




    def dropStatement(self):

        localctx = MysqlQueryParser.DropStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_dropStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1287
            self.match(MysqlQueryParser.DROP)
            self.state = 1288
            self.match(MysqlQueryParser.TEMPLATE)
            self.state = 1289
            self.templateName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(MysqlQueryParser.INSERT, 0)

        def INTO(self):
            return self.getToken(MysqlQueryParser.INTO, 0)

        def templateName(self):
            return self.getTypedRuleContext(MysqlQueryParser.TemplateNameContext,0)


        def VALUES(self):
            return self.getToken(MysqlQueryParser.VALUES, 0)

        def insert_all_values(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Insert_all_valuesContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Insert_all_valuesContext,i)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Column_nameContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_insertStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertStatement" ):
                return visitor.visitInsertStatement(self)
            else:
                return visitor.visitChildren(self)




    def insertStatement(self):

        localctx = MysqlQueryParser.InsertStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_insertStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1291
            self.match(MysqlQueryParser.INSERT)
            self.state = 1292
            self.match(MysqlQueryParser.INTO)
            self.state = 1293
            self.templateName()
            self.state = 1305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MysqlQueryParser.T__3:
                self.state = 1294
                self.match(MysqlQueryParser.T__3)
                self.state = 1295
                self.column_name()
                self.state = 1300
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MysqlQueryParser.T__5:
                    self.state = 1296
                    self.match(MysqlQueryParser.T__5)
                    self.state = 1297
                    self.column_name()
                    self.state = 1302
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1303
                self.match(MysqlQueryParser.T__4)


            self.state = 1307
            self.match(MysqlQueryParser.VALUES)
            self.state = 1308
            self.match(MysqlQueryParser.T__3)
            self.state = 1309
            self.insert_all_values()
            self.state = 1310
            self.match(MysqlQueryParser.T__4)
            self.state = 1318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MysqlQueryParser.T__5:
                self.state = 1311
                self.match(MysqlQueryParser.T__5)
                self.state = 1312
                self.match(MysqlQueryParser.T__3)
                self.state = 1313
                self.insert_all_values()
                self.state = 1314
                self.match(MysqlQueryParser.T__4)
                self.state = 1320
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_all_valuesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.insert_attribute = None # Token

        def insert_all_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Insert_all_valueContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Insert_all_valueContext,i)


        def NULL(self, i:int=None):
            if i is None:
                return self.getTokens(MysqlQueryParser.NULL)
            else:
                return self.getToken(MysqlQueryParser.NULL, i)

        def getRuleIndex(self):
            return MysqlQueryParser.RULE_insert_all_values

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_all_values" ):
                return visitor.visitInsert_all_values(self)
            else:
                return visitor.visitChildren(self)




    def insert_all_values(self):

        localctx = MysqlQueryParser.Insert_all_valuesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_insert_all_values)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1321
            self.insert_all_value()
            self.state = 1329
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MysqlQueryParser.T__5:
                self.state = 1322
                self.match(MysqlQueryParser.T__5)
                self.state = 1325
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MysqlQueryParser.TABLE, MysqlQueryParser.STRING, MysqlQueryParser.NUMBER, MysqlQueryParser.RANGE, MysqlQueryParser.CHOICE, MysqlQueryParser.IMAGE, MysqlQueryParser.FILE, MysqlQueryParser.ARRAY, MysqlQueryParser.CONTAINER, MysqlQueryParser.GENERATOR]:
                    self.state = 1323
                    self.insert_all_value()
                    pass
                elif token in [MysqlQueryParser.NULL]:
                    self.state = 1324
                    localctx.insert_attribute = self.match(MysqlQueryParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1331
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_all_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insert_unnested_value(self):
            return self.getTypedRuleContext(MysqlQueryParser.Insert_unnested_valueContext,0)


        def insert_nested_value(self):
            return self.getTypedRuleContext(MysqlQueryParser.Insert_nested_valueContext,0)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_insert_all_value

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_all_value" ):
                return visitor.visitInsert_all_value(self)
            else:
                return visitor.visitChildren(self)




    def insert_all_value(self):

        localctx = MysqlQueryParser.Insert_all_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_insert_all_value)
        try:
            self.state = 1334
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MysqlQueryParser.STRING, MysqlQueryParser.NUMBER, MysqlQueryParser.RANGE, MysqlQueryParser.CHOICE, MysqlQueryParser.IMAGE, MysqlQueryParser.FILE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1332
                self.insert_unnested_value()
                pass
            elif token in [MysqlQueryParser.TABLE, MysqlQueryParser.ARRAY, MysqlQueryParser.CONTAINER, MysqlQueryParser.GENERATOR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1333
                self.insert_nested_value()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_unnested_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insert_string_value(self):
            return self.getTypedRuleContext(MysqlQueryParser.Insert_string_valueContext,0)


        def insert_number_value(self):
            return self.getTypedRuleContext(MysqlQueryParser.Insert_number_valueContext,0)


        def insert_range_value(self):
            return self.getTypedRuleContext(MysqlQueryParser.Insert_range_valueContext,0)


        def insert_choice_value(self):
            return self.getTypedRuleContext(MysqlQueryParser.Insert_choice_valueContext,0)


        def insert_image_value(self):
            return self.getTypedRuleContext(MysqlQueryParser.Insert_image_valueContext,0)


        def insert_file_value(self):
            return self.getTypedRuleContext(MysqlQueryParser.Insert_file_valueContext,0)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_insert_unnested_value

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_unnested_value" ):
                return visitor.visitInsert_unnested_value(self)
            else:
                return visitor.visitChildren(self)




    def insert_unnested_value(self):

        localctx = MysqlQueryParser.Insert_unnested_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_insert_unnested_value)
        try:
            self.state = 1342
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MysqlQueryParser.STRING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1336
                self.insert_string_value()
                pass
            elif token in [MysqlQueryParser.NUMBER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1337
                self.insert_number_value()
                pass
            elif token in [MysqlQueryParser.RANGE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1338
                self.insert_range_value()
                pass
            elif token in [MysqlQueryParser.CHOICE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1339
                self.insert_choice_value()
                pass
            elif token in [MysqlQueryParser.IMAGE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1340
                self.insert_image_value()
                pass
            elif token in [MysqlQueryParser.FILE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1341
                self.insert_file_value()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_nested_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insert_table_value(self):
            return self.getTypedRuleContext(MysqlQueryParser.Insert_table_valueContext,0)


        def insert_array_value(self):
            return self.getTypedRuleContext(MysqlQueryParser.Insert_array_valueContext,0)


        def insert_container_value(self):
            return self.getTypedRuleContext(MysqlQueryParser.Insert_container_valueContext,0)


        def insert_generator_value(self):
            return self.getTypedRuleContext(MysqlQueryParser.Insert_generator_valueContext,0)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_insert_nested_value

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_nested_value" ):
                return visitor.visitInsert_nested_value(self)
            else:
                return visitor.visitChildren(self)




    def insert_nested_value(self):

        localctx = MysqlQueryParser.Insert_nested_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_insert_nested_value)
        try:
            self.state = 1348
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MysqlQueryParser.TABLE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1344
                self.insert_table_value()
                pass
            elif token in [MysqlQueryParser.ARRAY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1345
                self.insert_array_value()
                pass
            elif token in [MysqlQueryParser.CONTAINER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1346
                self.insert_container_value()
                pass
            elif token in [MysqlQueryParser.GENERATOR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1347
                self.insert_generator_value()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(MysqlQueryParser.CREATE, 0)

        def TEMPLATE(self):
            return self.getToken(MysqlQueryParser.TEMPLATE, 0)

        def templateName(self):
            return self.getTypedRuleContext(MysqlQueryParser.TemplateNameContext,0)


        def create_all_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Create_all_typeContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Create_all_typeContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_createStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateStatement" ):
                return visitor.visitCreateStatement(self)
            else:
                return visitor.visitChildren(self)




    def createStatement(self):

        localctx = MysqlQueryParser.CreateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_createStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1350
            self.match(MysqlQueryParser.CREATE)
            self.state = 1351
            self.match(MysqlQueryParser.TEMPLATE)
            self.state = 1352
            self.templateName()
            self.state = 1353
            self.create_all_type()
            self.state = 1358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MysqlQueryParser.T__5:
                self.state = 1354
                self.match(MysqlQueryParser.T__5)
                self.state = 1355
                self.create_all_type()
                self.state = 1360
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_all_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def create_unnested_type(self):
            return self.getTypedRuleContext(MysqlQueryParser.Create_unnested_typeContext,0)


        def create_nested_type(self):
            return self.getTypedRuleContext(MysqlQueryParser.Create_nested_typeContext,0)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_create_all_type

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_all_type" ):
                return visitor.visitCreate_all_type(self)
            else:
                return visitor.visitChildren(self)




    def create_all_type(self):

        localctx = MysqlQueryParser.Create_all_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_create_all_type)
        try:
            self.state = 1363
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MysqlQueryParser.STRING, MysqlQueryParser.NUMBER, MysqlQueryParser.RANGE, MysqlQueryParser.CHOICE, MysqlQueryParser.IMAGE, MysqlQueryParser.FILE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1361
                self.create_unnested_type()
                pass
            elif token in [MysqlQueryParser.TABLE, MysqlQueryParser.ARRAY, MysqlQueryParser.CONTAINER, MysqlQueryParser.GENERATOR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1362
                self.create_nested_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_unnested_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def create_string_type(self):
            return self.getTypedRuleContext(MysqlQueryParser.Create_string_typeContext,0)


        def create_number_type(self):
            return self.getTypedRuleContext(MysqlQueryParser.Create_number_typeContext,0)


        def create_range_type(self):
            return self.getTypedRuleContext(MysqlQueryParser.Create_range_typeContext,0)


        def create_choice_type(self):
            return self.getTypedRuleContext(MysqlQueryParser.Create_choice_typeContext,0)


        def create_image_type(self):
            return self.getTypedRuleContext(MysqlQueryParser.Create_image_typeContext,0)


        def create_file_type(self):
            return self.getTypedRuleContext(MysqlQueryParser.Create_file_typeContext,0)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_create_unnested_type

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_unnested_type" ):
                return visitor.visitCreate_unnested_type(self)
            else:
                return visitor.visitChildren(self)




    def create_unnested_type(self):

        localctx = MysqlQueryParser.Create_unnested_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_create_unnested_type)
        try:
            self.state = 1371
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MysqlQueryParser.STRING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1365
                self.create_string_type()
                pass
            elif token in [MysqlQueryParser.NUMBER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1366
                self.create_number_type()
                pass
            elif token in [MysqlQueryParser.RANGE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1367
                self.create_range_type()
                pass
            elif token in [MysqlQueryParser.CHOICE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1368
                self.create_choice_type()
                pass
            elif token in [MysqlQueryParser.IMAGE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1369
                self.create_image_type()
                pass
            elif token in [MysqlQueryParser.FILE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1370
                self.create_file_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_nested_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def create_table_type(self):
            return self.getTypedRuleContext(MysqlQueryParser.Create_table_typeContext,0)


        def create_array_type(self):
            return self.getTypedRuleContext(MysqlQueryParser.Create_array_typeContext,0)


        def create_container_type(self):
            return self.getTypedRuleContext(MysqlQueryParser.Create_container_typeContext,0)


        def create_generator_type(self):
            return self.getTypedRuleContext(MysqlQueryParser.Create_generator_typeContext,0)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_create_nested_type

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_nested_type" ):
                return visitor.visitCreate_nested_type(self)
            else:
                return visitor.visitChildren(self)




    def create_nested_type(self):

        localctx = MysqlQueryParser.Create_nested_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_create_nested_type)
        try:
            self.state = 1377
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MysqlQueryParser.TABLE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1373
                self.create_table_type()
                pass
            elif token in [MysqlQueryParser.ARRAY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1374
                self.create_array_type()
                pass
            elif token in [MysqlQueryParser.CONTAINER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1375
                self.create_container_type()
                pass
            elif token in [MysqlQueryParser.GENERATOR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1376
                self.create_generator_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(MysqlQueryParser.SELECT, 0)

        def selectElements(self):
            return self.getTypedRuleContext(MysqlQueryParser.SelectElementsContext,0)


        def FROM(self):
            return self.getToken(MysqlQueryParser.FROM, 0)

        def tableSources(self):
            return self.getTypedRuleContext(MysqlQueryParser.TableSourcesContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(MysqlQueryParser.OrderByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(MysqlQueryParser.LimitClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(MysqlQueryParser.WhereClauseContext,0)


        def groupByCaluse(self):
            return self.getTypedRuleContext(MysqlQueryParser.GroupByCaluseContext,0)


        def havingCaluse(self):
            return self.getTypedRuleContext(MysqlQueryParser.HavingCaluseContext,0)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_selectStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectStatement" ):
                return visitor.visitSelectStatement(self)
            else:
                return visitor.visitChildren(self)




    def selectStatement(self):

        localctx = MysqlQueryParser.SelectStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_selectStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1379
            self.match(MysqlQueryParser.SELECT)
            self.state = 1380
            self.selectElements()
            self.state = 1392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MysqlQueryParser.FROM:
                self.state = 1381
                self.match(MysqlQueryParser.FROM)
                self.state = 1382
                self.tableSources()
                self.state = 1384
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MysqlQueryParser.WHERE:
                    self.state = 1383
                    self.whereClause()


                self.state = 1387
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MysqlQueryParser.GROUP:
                    self.state = 1386
                    self.groupByCaluse()


                self.state = 1390
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MysqlQueryParser.HAVING:
                    self.state = 1389
                    self.havingCaluse()




            self.state = 1395
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MysqlQueryParser.ORDER:
                self.state = 1394
                self.orderByClause()


            self.state = 1398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MysqlQueryParser.LIMIT:
                self.state = 1397
                self.limitClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescribeStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DESCRIBE(self):
            return self.getToken(MysqlQueryParser.DESCRIBE, 0)

        def templateName(self):
            return self.getTypedRuleContext(MysqlQueryParser.TemplateNameContext,0)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_describeStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeStatement" ):
                return visitor.visitDescribeStatement(self)
            else:
                return visitor.visitChildren(self)




    def describeStatement(self):

        localctx = MysqlQueryParser.DescribeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_describeStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1400
            self.match(MysqlQueryParser.DESCRIBE)
            self.state = 1401
            self.templateName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectElementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.star = None # Token

        def selectElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.SelectElementContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.SelectElementContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_selectElements

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectElements" ):
                return visitor.visitSelectElements(self)
            else:
                return visitor.visitChildren(self)




    def selectElements(self):

        localctx = MysqlQueryParser.SelectElementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_selectElements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1405
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MysqlQueryParser.T__7]:
                self.state = 1403
                localctx.star = self.match(MysqlQueryParser.T__7)
                pass
            elif token in [MysqlQueryParser.MAX, MysqlQueryParser.SUM, MysqlQueryParser.AVG, MysqlQueryParser.MIN, MysqlQueryParser.COUNT, MysqlQueryParser.ID]:
                self.state = 1404
                self.selectElement()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MysqlQueryParser.T__5:
                self.state = 1407
                self.match(MysqlQueryParser.T__5)
                self.state = 1408
                self.selectElement()
                self.state = 1413
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableSourcesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def templateName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.TemplateNameContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.TemplateNameContext,i)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Column_nameContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_tableSources

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableSources" ):
                return visitor.visitTableSources(self)
            else:
                return visitor.visitChildren(self)




    def tableSources(self):

        localctx = MysqlQueryParser.TableSourcesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_tableSources)
        self._la = 0 # Token type
        try:
            self.state = 1429
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1414
                self.templateName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1415
                self.templateName()
                self.state = 1416
                self.match(MysqlQueryParser.T__3)
                self.state = 1417
                self.column_name()
                self.state = 1418
                self.match(MysqlQueryParser.T__4)
                self.state = 1425 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1419
                    self.match(MysqlQueryParser.T__5)
                    self.state = 1420
                    self.templateName()
                    self.state = 1421
                    self.match(MysqlQueryParser.T__3)
                    self.state = 1422
                    self.column_name()
                    self.state = 1423
                    self.match(MysqlQueryParser.T__4)
                    self.state = 1427 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==MysqlQueryParser.T__5):
                        break

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(MysqlQueryParser.WHERE, 0)

        def logicExpression(self):
            return self.getTypedRuleContext(MysqlQueryParser.LogicExpressionContext,0)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_whereClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhereClause" ):
                return visitor.visitWhereClause(self)
            else:
                return visitor.visitChildren(self)




    def whereClause(self):

        localctx = MysqlQueryParser.WhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_whereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1431
            self.match(MysqlQueryParser.WHERE)
            self.state = 1432
            self.logicExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def leafLogicExpression(self):
            return self.getTypedRuleContext(MysqlQueryParser.LeafLogicExpressionContext,0)


        def logicExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.LogicExpressionContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.LogicExpressionContext,i)


        def EVERY(self):
            return self.getToken(MysqlQueryParser.EVERY, 0)

        def ANY(self):
            return self.getToken(MysqlQueryParser.ANY, 0)

        def column_name(self):
            return self.getTypedRuleContext(MysqlQueryParser.Column_nameContext,0)


        def logicalOperator(self):
            return self.getTypedRuleContext(MysqlQueryParser.LogicalOperatorContext,0)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_logicExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicExpression" ):
                return visitor.visitLogicExpression(self)
            else:
                return visitor.visitChildren(self)



    def logicExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MysqlQueryParser.LogicExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 198
        self.enterRecursionRule(localctx, 198, self.RULE_logicExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1444
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.state = 1435
                self.leafLogicExpression()
                pass

            elif la_ == 2:
                self.state = 1437
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MysqlQueryParser.EVERY or _la==MysqlQueryParser.ANY:
                    self.state = 1436
                    _la = self._input.LA(1)
                    if not(_la==MysqlQueryParser.EVERY or _la==MysqlQueryParser.ANY):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1439
                self.match(MysqlQueryParser.T__3)
                self.state = 1440
                self.logicExpression(0)
                self.state = 1441
                self.match(MysqlQueryParser.T__4)
                pass

            elif la_ == 3:
                self.state = 1443
                self.column_name()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1452
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,141,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MysqlQueryParser.LogicExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logicExpression)
                    self.state = 1446
                    if not self.precpred(self._ctx, 4):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                    self.state = 1447
                    self.logicalOperator()
                    self.state = 1448
                    self.logicExpression(5) 
                self.state = 1454
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,141,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LeafLogicExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comparisonLeafLogicExpression(self):
            return self.getTypedRuleContext(MysqlQueryParser.ComparisonLeafLogicExpressionContext,0)


        def setLeafLogicExpression(self):
            return self.getTypedRuleContext(MysqlQueryParser.SetLeafLogicExpressionContext,0)


        def judgeLeafLogicExpression(self):
            return self.getTypedRuleContext(MysqlQueryParser.JudgeLeafLogicExpressionContext,0)


        def matchLeafLogicExpression(self):
            return self.getTypedRuleContext(MysqlQueryParser.MatchLeafLogicExpressionContext,0)


        def ALL(self):
            return self.getToken(MysqlQueryParser.ALL, 0)

        def EXIST(self):
            return self.getToken(MysqlQueryParser.EXIST, 0)

        def getRuleIndex(self):
            return MysqlQueryParser.RULE_leafLogicExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLeafLogicExpression" ):
                return visitor.visitLeafLogicExpression(self)
            else:
                return visitor.visitChildren(self)




    def leafLogicExpression(self):

        localctx = MysqlQueryParser.LeafLogicExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_leafLogicExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MysqlQueryParser.ALL or _la==MysqlQueryParser.EXIST:
                self.state = 1455
                _la = self._input.LA(1)
                if not(_la==MysqlQueryParser.ALL or _la==MysqlQueryParser.EXIST):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1462
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
            if la_ == 1:
                self.state = 1458
                self.comparisonLeafLogicExpression()
                pass

            elif la_ == 2:
                self.state = 1459
                self.setLeafLogicExpression()
                pass

            elif la_ == 3:
                self.state = 1460
                self.judgeLeafLogicExpression()
                pass

            elif la_ == 4:
                self.state = 1461
                self.matchLeafLogicExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonLeafLogicExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fullColumnName(self):
            return self.getTypedRuleContext(MysqlQueryParser.FullColumnNameContext,0)


        def comparisonOperator(self):
            return self.getTypedRuleContext(MysqlQueryParser.ComparisonOperatorContext,0)


        def value(self):
            return self.getTypedRuleContext(MysqlQueryParser.ValueContext,0)


        def TOP(self):
            return self.getToken(MysqlQueryParser.TOP, 0)

        def BOTTOM(self):
            return self.getToken(MysqlQueryParser.BOTTOM, 0)

        def getRuleIndex(self):
            return MysqlQueryParser.RULE_comparisonLeafLogicExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonLeafLogicExpression" ):
                return visitor.visitComparisonLeafLogicExpression(self)
            else:
                return visitor.visitChildren(self)




    def comparisonLeafLogicExpression(self):

        localctx = MysqlQueryParser.ComparisonLeafLogicExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_comparisonLeafLogicExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1465
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MysqlQueryParser.TOP or _la==MysqlQueryParser.BOTTOM:
                self.state = 1464
                _la = self._input.LA(1)
                if not(_la==MysqlQueryParser.TOP or _la==MysqlQueryParser.BOTTOM):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1467
            self.fullColumnName()
            self.state = 1468
            self.comparisonOperator()
            self.state = 1469
            self.value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetLeafLogicExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fullColumnName(self):
            return self.getTypedRuleContext(MysqlQueryParser.FullColumnNameContext,0)


        def comparisonOperator(self):
            return self.getTypedRuleContext(MysqlQueryParser.ComparisonOperatorContext,0)


        def value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.ValueContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.ValueContext,i)


        def NOT(self):
            return self.getToken(MysqlQueryParser.NOT, 0)

        def getRuleIndex(self):
            return MysqlQueryParser.RULE_setLeafLogicExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetLeafLogicExpression" ):
                return visitor.visitSetLeafLogicExpression(self)
            else:
                return visitor.visitChildren(self)




    def setLeafLogicExpression(self):

        localctx = MysqlQueryParser.SetLeafLogicExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_setLeafLogicExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1471
            self.fullColumnName()
            self.state = 1473
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                self.state = 1472
                self.match(MysqlQueryParser.NOT)


            self.state = 1475
            self.comparisonOperator()
            self.state = 1476
            self.match(MysqlQueryParser.T__3)
            self.state = 1477
            self.value()
            self.state = 1482
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MysqlQueryParser.T__5:
                self.state = 1478
                self.match(MysqlQueryParser.T__5)
                self.state = 1479
                self.value()
                self.state = 1484
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1485
            self.match(MysqlQueryParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JudgeLeafLogicExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(MysqlQueryParser.Column_nameContext,0)


        def IS(self):
            return self.getToken(MysqlQueryParser.IS, 0)

        def value(self):
            return self.getTypedRuleContext(MysqlQueryParser.ValueContext,0)


        def NOT(self):
            return self.getToken(MysqlQueryParser.NOT, 0)

        def getRuleIndex(self):
            return MysqlQueryParser.RULE_judgeLeafLogicExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJudgeLeafLogicExpression" ):
                return visitor.visitJudgeLeafLogicExpression(self)
            else:
                return visitor.visitChildren(self)




    def judgeLeafLogicExpression(self):

        localctx = MysqlQueryParser.JudgeLeafLogicExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_judgeLeafLogicExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1487
            self.column_name()
            self.state = 1488
            self.match(MysqlQueryParser.IS)
            self.state = 1490
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MysqlQueryParser.NOT:
                self.state = 1489
                self.match(MysqlQueryParser.NOT)


            self.state = 1492
            self.value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchLeafLogicExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(MysqlQueryParser.Column_nameContext,0)


        def LIKE(self):
            return self.getToken(MysqlQueryParser.LIKE, 0)

        def value(self):
            return self.getTypedRuleContext(MysqlQueryParser.ValueContext,0)


        def NOT(self):
            return self.getToken(MysqlQueryParser.NOT, 0)

        def getRuleIndex(self):
            return MysqlQueryParser.RULE_matchLeafLogicExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchLeafLogicExpression" ):
                return visitor.visitMatchLeafLogicExpression(self)
            else:
                return visitor.visitChildren(self)




    def matchLeafLogicExpression(self):

        localctx = MysqlQueryParser.MatchLeafLogicExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_matchLeafLogicExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1494
            self.column_name()
            self.state = 1496
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MysqlQueryParser.NOT:
                self.state = 1495
                self.match(MysqlQueryParser.NOT)


            self.state = 1498
            self.match(MysqlQueryParser.LIKE)
            self.state = 1499
            self.value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByCaluseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(MysqlQueryParser.GROUP, 0)

        def BY(self):
            return self.getToken(MysqlQueryParser.BY, 0)

        def groupByItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.GroupByItemContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.GroupByItemContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_groupByCaluse

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupByCaluse" ):
                return visitor.visitGroupByCaluse(self)
            else:
                return visitor.visitChildren(self)




    def groupByCaluse(self):

        localctx = MysqlQueryParser.GroupByCaluseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_groupByCaluse)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1501
            self.match(MysqlQueryParser.GROUP)
            self.state = 1502
            self.match(MysqlQueryParser.BY)
            self.state = 1503
            self.groupByItem()
            self.state = 1508
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MysqlQueryParser.T__5:
                self.state = 1504
                self.match(MysqlQueryParser.T__5)
                self.state = 1505
                self.groupByItem()
                self.state = 1510
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HavingCaluseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(MysqlQueryParser.HAVING, 0)

        def logicExpression(self):
            return self.getTypedRuleContext(MysqlQueryParser.LogicExpressionContext,0)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_havingCaluse

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHavingCaluse" ):
                return visitor.visitHavingCaluse(self)
            else:
                return visitor.visitChildren(self)




    def havingCaluse(self):

        localctx = MysqlQueryParser.HavingCaluseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_havingCaluse)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1511
            self.match(MysqlQueryParser.HAVING)
            self.state = 1512
            self.logicExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderByClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(MysqlQueryParser.ORDER, 0)

        def BY(self):
            return self.getToken(MysqlQueryParser.BY, 0)

        def orderByExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.OrderByExpressionContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.OrderByExpressionContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_orderByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderByClause" ):
                return visitor.visitOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def orderByClause(self):

        localctx = MysqlQueryParser.OrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_orderByClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1514
            self.match(MysqlQueryParser.ORDER)
            self.state = 1515
            self.match(MysqlQueryParser.BY)
            self.state = 1516
            self.orderByExpression()
            self.state = 1521
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MysqlQueryParser.T__5:
                self.state = 1517
                self.match(MysqlQueryParser.T__5)
                self.state = 1518
                self.orderByExpression()
                self.state = 1523
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.offset = None # DecimalLiteralContext
            self.limit = None # DecimalLiteralContext

        def LIMIT(self):
            return self.getToken(MysqlQueryParser.LIMIT, 0)

        def OFFSET(self):
            return self.getToken(MysqlQueryParser.OFFSET, 0)

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.DecimalLiteralContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_limitClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimitClause" ):
                return visitor.visitLimitClause(self)
            else:
                return visitor.visitChildren(self)




    def limitClause(self):

        localctx = MysqlQueryParser.LimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_limitClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1524
            self.match(MysqlQueryParser.LIMIT)
            self.state = 1535
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
            if la_ == 1:
                self.state = 1528
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
                if la_ == 1:
                    self.state = 1525
                    localctx.offset = self.decimalLiteral()
                    self.state = 1526
                    self.match(MysqlQueryParser.T__5)


                self.state = 1530
                localctx.limit = self.decimalLiteral()
                pass

            elif la_ == 2:
                self.state = 1531
                localctx.limit = self.decimalLiteral()
                self.state = 1532
                self.match(MysqlQueryParser.OFFSET)
                self.state = 1533
                localctx.offset = self.decimalLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderByExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.order = None # Token

        def fullColumnName(self):
            return self.getTypedRuleContext(MysqlQueryParser.FullColumnNameContext,0)


        def ASC(self):
            return self.getToken(MysqlQueryParser.ASC, 0)

        def DESC(self):
            return self.getToken(MysqlQueryParser.DESC, 0)

        def getRuleIndex(self):
            return MysqlQueryParser.RULE_orderByExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderByExpression" ):
                return visitor.visitOrderByExpression(self)
            else:
                return visitor.visitChildren(self)




    def orderByExpression(self):

        localctx = MysqlQueryParser.OrderByExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_orderByExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1537
            self.fullColumnName()
            self.state = 1539
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MysqlQueryParser.ASC or _la==MysqlQueryParser.DESC:
                self.state = 1538
                localctx.order = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MysqlQueryParser.ASC or _la==MysqlQueryParser.DESC):
                    localctx.order = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.order = None # Token

        def fullColumnName(self):
            return self.getTypedRuleContext(MysqlQueryParser.FullColumnNameContext,0)


        def ASC(self):
            return self.getToken(MysqlQueryParser.ASC, 0)

        def DESC(self):
            return self.getToken(MysqlQueryParser.DESC, 0)

        def getRuleIndex(self):
            return MysqlQueryParser.RULE_groupByItem

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupByItem" ):
                return visitor.visitGroupByItem(self)
            else:
                return visitor.visitChildren(self)




    def groupByItem(self):

        localctx = MysqlQueryParser.GroupByItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_groupByItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1541
            self.fullColumnName()
            self.state = 1543
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MysqlQueryParser.ASC or _la==MysqlQueryParser.DESC:
                self.state = 1542
                localctx.order = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MysqlQueryParser.ASC or _la==MysqlQueryParser.DESC):
                    localctx.order = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(MysqlQueryParser.AND, 0)

        def OR(self):
            return self.getToken(MysqlQueryParser.OR, 0)

        def getRuleIndex(self):
            return MysqlQueryParser.RULE_logicalOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalOperator" ):
                return visitor.visitLogicalOperator(self)
            else:
                return visitor.visitChildren(self)




    def logicalOperator(self):

        localctx = MysqlQueryParser.LogicalOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_logicalOperator)
        try:
            self.state = 1551
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MysqlQueryParser.AND]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1545
                self.match(MysqlQueryParser.AND)
                pass
            elif token in [MysqlQueryParser.T__8]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1546
                self.match(MysqlQueryParser.T__8)
                self.state = 1547
                self.match(MysqlQueryParser.T__8)
                pass
            elif token in [MysqlQueryParser.OR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1548
                self.match(MysqlQueryParser.OR)
                pass
            elif token in [MysqlQueryParser.T__9]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1549
                self.match(MysqlQueryParser.T__9)
                self.state = 1550
                self.match(MysqlQueryParser.T__9)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STARTWITH(self):
            return self.getToken(MysqlQueryParser.STARTWITH, 0)

        def ENDWITH(self):
            return self.getToken(MysqlQueryParser.ENDWITH, 0)

        def LIKE(self):
            return self.getToken(MysqlQueryParser.LIKE, 0)

        def IS(self):
            return self.getToken(MysqlQueryParser.IS, 0)

        def IN(self):
            return self.getToken(MysqlQueryParser.IN, 0)

        def NOT(self):
            return self.getToken(MysqlQueryParser.NOT, 0)

        def getRuleIndex(self):
            return MysqlQueryParser.RULE_comparisonOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonOperator" ):
                return visitor.visitComparisonOperator(self)
            else:
                return visitor.visitChildren(self)




    def comparisonOperator(self):

        localctx = MysqlQueryParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_comparisonOperator)
        try:
            self.state = 1578
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1553
                self.match(MysqlQueryParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1554
                self.match(MysqlQueryParser.T__10)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1555
                self.match(MysqlQueryParser.T__11)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1556
                self.match(MysqlQueryParser.T__11)
                self.state = 1557
                self.match(MysqlQueryParser.T__6)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1558
                self.match(MysqlQueryParser.T__10)
                self.state = 1559
                self.match(MysqlQueryParser.T__6)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1560
                self.match(MysqlQueryParser.T__11)
                self.state = 1561
                self.match(MysqlQueryParser.T__10)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1562
                self.match(MysqlQueryParser.T__12)
                self.state = 1563
                self.match(MysqlQueryParser.T__6)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1564
                self.match(MysqlQueryParser.T__11)
                self.state = 1565
                self.match(MysqlQueryParser.T__6)
                self.state = 1566
                self.match(MysqlQueryParser.T__10)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1567
                self.match(MysqlQueryParser.STARTWITH)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1568
                self.match(MysqlQueryParser.ENDWITH)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1569
                self.match(MysqlQueryParser.LIKE)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1570
                self.match(MysqlQueryParser.IS)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1571
                self.match(MysqlQueryParser.IN)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1572
                self.match(MysqlQueryParser.NOT)
                self.state = 1573
                self.match(MysqlQueryParser.LIKE)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1574
                self.match(MysqlQueryParser.NOT)
                self.state = 1575
                self.match(MysqlQueryParser.IN)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1576
                self.match(MysqlQueryParser.IS)
                self.state = 1577
                self.match(MysqlQueryParser.NOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(MysqlQueryParser.UidContext,0)


        def textLiteral(self):
            return self.getTypedRuleContext(MysqlQueryParser.TextLiteralContext,0)


        def decimalLiteral(self):
            return self.getTypedRuleContext(MysqlQueryParser.DecimalLiteralContext,0)


        def NULL(self):
            return self.getToken(MysqlQueryParser.NULL, 0)

        def getRuleIndex(self):
            return MysqlQueryParser.RULE_value

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValue" ):
                return visitor.visitValue(self)
            else:
                return visitor.visitChildren(self)




    def value(self):

        localctx = MysqlQueryParser.ValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_value)
        try:
            self.state = 1584
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MysqlQueryParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1580
                self.uid()
                pass
            elif token in [MysqlQueryParser.TEXT_STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1581
                self.textLiteral()
                pass
            elif token in [MysqlQueryParser.DECIMAL_LITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1582
                self.decimalLiteral()
                pass
            elif token in [MysqlQueryParser.NULL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1583
                self.match(MysqlQueryParser.NULL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecimalLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_LITERAL(self):
            return self.getToken(MysqlQueryParser.DECIMAL_LITERAL, 0)

        def getRuleIndex(self):
            return MysqlQueryParser.RULE_decimalLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecimalLiteral" ):
                return visitor.visitDecimalLiteral(self)
            else:
                return visitor.visitChildren(self)




    def decimalLiteral(self):

        localctx = MysqlQueryParser.DecimalLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_decimalLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1586
            self.match(MysqlQueryParser.DECIMAL_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TextLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TEXT_STRING(self):
            return self.getToken(MysqlQueryParser.TEXT_STRING, 0)

        def getRuleIndex(self):
            return MysqlQueryParser.RULE_textLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTextLiteral" ):
                return visitor.visitTextLiteral(self)
            else:
                return visitor.visitChildren(self)




    def textLiteral(self):

        localctx = MysqlQueryParser.TextLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_textLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1588
            self.match(MysqlQueryParser.TEXT_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_selectElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SelectFunctionElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MysqlQueryParser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(MysqlQueryParser.FunctionCallContext,0)

        def uid(self):
            return self.getTypedRuleContext(MysqlQueryParser.UidContext,0)

        def AS(self):
            return self.getToken(MysqlQueryParser.AS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectFunctionElement" ):
                return visitor.visitSelectFunctionElement(self)
            else:
                return visitor.visitChildren(self)


    class SelectColumnElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MysqlQueryParser.SelectElementContext
            super().__init__(parser)
            self.distinct = None # Token
            self.copyFrom(ctx)

        def fullColumnName(self):
            return self.getTypedRuleContext(MysqlQueryParser.FullColumnNameContext,0)

        def uid(self):
            return self.getTypedRuleContext(MysqlQueryParser.UidContext,0)

        def ID(self):
            return self.getToken(MysqlQueryParser.ID, 0)
        def AS(self):
            return self.getToken(MysqlQueryParser.AS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectColumnElement" ):
                return visitor.visitSelectColumnElement(self)
            else:
                return visitor.visitChildren(self)



    def selectElement(self):

        localctx = MysqlQueryParser.SelectElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_selectElement)
        self._la = 0 # Token type
        try:
            self.state = 1607
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MysqlQueryParser.ID]:
                localctx = MysqlQueryParser.SelectColumnElementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1591
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
                if la_ == 1:
                    self.state = 1590
                    localctx.distinct = self.match(MysqlQueryParser.ID)


                self.state = 1593
                self.fullColumnName()
                self.state = 1598
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MysqlQueryParser.AS or _la==MysqlQueryParser.ID:
                    self.state = 1595
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MysqlQueryParser.AS:
                        self.state = 1594
                        self.match(MysqlQueryParser.AS)


                    self.state = 1597
                    self.uid()


                pass
            elif token in [MysqlQueryParser.MAX, MysqlQueryParser.SUM, MysqlQueryParser.AVG, MysqlQueryParser.MIN, MysqlQueryParser.COUNT]:
                localctx = MysqlQueryParser.SelectFunctionElementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1600
                self.functionCall()
                self.state = 1605
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MysqlQueryParser.AS or _la==MysqlQueryParser.ID:
                    self.state = 1602
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MysqlQueryParser.AS:
                        self.state = 1601
                        self.match(MysqlQueryParser.AS)


                    self.state = 1604
                    self.uid()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullColumnNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(MysqlQueryParser.Column_nameContext,0)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_fullColumnName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFullColumnName" ):
                return visitor.visitFullColumnName(self)
            else:
                return visitor.visitChildren(self)




    def fullColumnName(self):

        localctx = MysqlQueryParser.FullColumnNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_fullColumnName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1609
            self.column_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_functionCall

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AggregateFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MysqlQueryParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def aggregateWindowedFunction(self):
            return self.getTypedRuleContext(MysqlQueryParser.AggregateWindowedFunctionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregateFunctionCall" ):
                return visitor.visitAggregateFunctionCall(self)
            else:
                return visitor.visitChildren(self)



    def functionCall(self):

        localctx = MysqlQueryParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_functionCall)
        try:
            localctx = MysqlQueryParser.AggregateFunctionCallContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1611
            self.aggregateWindowedFunction()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AggregateWindowedFunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.starArg = None # Token
            self.aggregator = None # Token

        def functionArg(self):
            return self.getTypedRuleContext(MysqlQueryParser.FunctionArgContext,0)


        def AVG(self):
            return self.getToken(MysqlQueryParser.AVG, 0)

        def MAX(self):
            return self.getToken(MysqlQueryParser.MAX, 0)

        def MIN(self):
            return self.getToken(MysqlQueryParser.MIN, 0)

        def SUM(self):
            return self.getToken(MysqlQueryParser.SUM, 0)

        def COUNT(self):
            return self.getToken(MysqlQueryParser.COUNT, 0)

        def functionArgs(self):
            return self.getTypedRuleContext(MysqlQueryParser.FunctionArgsContext,0)


        def DISTINCT(self):
            return self.getToken(MysqlQueryParser.DISTINCT, 0)

        def getRuleIndex(self):
            return MysqlQueryParser.RULE_aggregateWindowedFunction

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregateWindowedFunction" ):
                return visitor.visitAggregateWindowedFunction(self)
            else:
                return visitor.visitChildren(self)




    def aggregateWindowedFunction(self):

        localctx = MysqlQueryParser.AggregateWindowedFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_aggregateWindowedFunction)
        self._la = 0 # Token type
        try:
            self.state = 1633
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1613
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MysqlQueryParser.MAX) | (1 << MysqlQueryParser.SUM) | (1 << MysqlQueryParser.AVG) | (1 << MysqlQueryParser.MIN))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1614
                self.match(MysqlQueryParser.T__3)
                self.state = 1615
                self.functionArg()
                self.state = 1616
                self.match(MysqlQueryParser.T__4)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1618
                self.match(MysqlQueryParser.COUNT)
                self.state = 1619
                self.match(MysqlQueryParser.T__3)
                self.state = 1624
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MysqlQueryParser.T__7]:
                    self.state = 1620
                    localctx.starArg = self.match(MysqlQueryParser.T__7)
                    pass
                elif token in [MysqlQueryParser.T__4, MysqlQueryParser.ID]:
                    self.state = 1622
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MysqlQueryParser.ID:
                        self.state = 1621
                        self.functionArg()


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1626
                self.match(MysqlQueryParser.T__4)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1627
                self.match(MysqlQueryParser.COUNT)
                self.state = 1628
                self.match(MysqlQueryParser.T__3)
                self.state = 1629
                localctx.aggregator = self.match(MysqlQueryParser.DISTINCT)
                self.state = 1630
                self.functionArgs()
                self.state = 1631
                self.match(MysqlQueryParser.T__4)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionArgContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(MysqlQueryParser.Column_nameContext,0)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_functionArg

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionArg" ):
                return visitor.visitFunctionArg(self)
            else:
                return visitor.visitChildren(self)




    def functionArg(self):

        localctx = MysqlQueryParser.FunctionArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_functionArg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1635
            self.column_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionArgsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MysqlQueryParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(MysqlQueryParser.Column_nameContext,i)


        def getRuleIndex(self):
            return MysqlQueryParser.RULE_functionArgs

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionArgs" ):
                return visitor.visitFunctionArgs(self)
            else:
                return visitor.visitChildren(self)




    def functionArgs(self):

        localctx = MysqlQueryParser.FunctionArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_functionArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1637
            self.column_name()
            self.state = 1642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MysqlQueryParser.T__5:
                self.state = 1638
                self.match(MysqlQueryParser.T__5)
                self.state = 1639
                self.column_name()
                self.state = 1644
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MysqlQueryParser.ID, 0)

        def getRuleIndex(self):
            return MysqlQueryParser.RULE_uid

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUid" ):
                return visitor.visitUid(self)
            else:
                return visitor.visitChildren(self)




    def uid(self):

        localctx = MysqlQueryParser.UidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_uid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1645
            self.match(MysqlQueryParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringTextContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_CONTENT(self):
            return self.getToken(MysqlQueryParser.STRING_CONTENT, 0)

        def getRuleIndex(self):
            return MysqlQueryParser.RULE_stringText

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringText" ):
                return visitor.visitStringText(self)
            else:
                return visitor.visitChildren(self)




    def stringText(self):

        localctx = MysqlQueryParser.StringTextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_stringText)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1647
            self.match(MysqlQueryParser.STRING_CONTENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathTextContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_CONTENT(self):
            return self.getToken(MysqlQueryParser.STRING_CONTENT, 0)

        def getRuleIndex(self):
            return MysqlQueryParser.RULE_pathText

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPathText" ):
                return visitor.visitPathText(self)
            else:
                return visitor.visitChildren(self)




    def pathText(self):

        localctx = MysqlQueryParser.PathTextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_pathText)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1649
            self.match(MysqlQueryParser.STRING_CONTENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[99] = self.logicExpression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def logicExpression_sempred(self, localctx:LogicExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 4)
         




